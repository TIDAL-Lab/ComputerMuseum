// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Bound closures
$$.BoundClosure$0 = {"": "BoundClosure;_self,_liblib$_target,_receiver",
  call$0: function() {
    return this._self[this._liblib$_target]();
  }
};

$$.BoundClosure$1 = {"": "BoundClosure;_self,_liblib$_target,_receiver",
  call$1: function(p0) {
    return this._self[this._liblib$_target](p0);
  }
};

$$.Closure$main = {"": "Closure;call$0,$name"};

$$.Closure$_processWorkerMessage = {"": "Closure;call$2,$name"};

$$.Closure$toStringWrapper = {"": "Closure;call$0,$name"};

$$.Closure$invokeClosure = {"": "Closure;call$5,$name"};

$$.Closure$typeNameInChrome = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInSafari = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInOpera = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInFirefox = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInIE = {"": "Closure;call$1,$name"};

$$.Closure$constructorNameFallback = {"": "Closure;call$1,$name"};

$$.Closure$callDartFunctionWith1Arg = {"": "Closure;call$2,$name"};

$$.Closure$_asyncRunCallback = {"": "Closure;call$0,$name"};

$$.Closure$_nullDataHandler = {"": "Closure;call$1,$name"};

$$.Closure$_nullErrorHandler = {"": "Closure;call$1,$name"};

$$.Closure$_nullDoneHandler = {"": "Closure;call$0,$name"};

$$.Closure$_defaultEquals = {"": "Closure;call$2,$name"};

$$.Closure$_defaultHashCode = {"": "Closure;call$1,$name"};

$$.Closure$compare = {"": "Closure;call$2,$name"};

$$.Closure$identical = {"": "Closure;call$2,$name"};

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.interfaces) init.interfaces = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var descriptor = data[3];
    var isRoot = !!data[4];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.interfaces[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (typeof element === "function") {
          $[previousProperty = property] = element;
          functions.push(property);
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = newDesc;
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot]);
  }
})([
["ComputerHistory", "main.dart", , {
main: function() {
  $.Sounds_loadSound("hop");
  $.Sounds_loadSound("skip");
  $.Sounds_loadSound("jump");
  $.Sounds_loadSound("chimes");
  $.Sounds_loadSound("croak");
  $.Sounds_loadSound("crunch");
  $.Sounds_loadSound("sing");
  $.Sounds_loadSound("chirp");
  $.Sounds_loadSound("click");
  $.Sounds_loadSound("splash");
  $.Sounds_loadSound("tick");
  $.Sounds_loadSound("turn");
  $.Sounds_loadSound("swoosh");
  $.Sounds_loadSound("gulp");
  $.FrogPond$();
},

Sounds_loadSound: function($name) {
  var audio, t1;
  audio = $.AudioElement_AudioElement(null);
  audio.src = "sounds/" + $name + ".wav";
  t1 = $.get$Sounds_sounds();
  t1.$indexSet(t1, $name, audio);
},

Sounds_playSound: function($name) {
  var t1 = $.get$Sounds_sounds();
  if (t1.$index(t1, $name) != null) {
    t1 = $.get$Sounds_sounds();
    $.set$volume$x(t1.$index(t1, $name), 0.6);
    t1 = $.get$Sounds_sounds();
    $.play$0$x(t1.$index(t1, $name));
  }
},

isFlagSet: function($name) {
  return $.$gt$n($.indexOf$1$asx($.get$search$x(C.Window_methods.get$location(window)), $name + "=true"), 0);
},

roundRect: function(ctx, x, y, w, h, r) {
  var t1, t2, t3, t4, t5;
  t1 = $.getInterceptor$x(ctx);
  t1.beginPath$0(ctx);
  t2 = $.getInterceptor$ns(x);
  t1.moveTo$2(ctx, t2.$add(x, r), y);
  t1.lineTo$2(ctx, $.$sub$n(t2.$add(x, w), r), y);
  t3 = y + r;
  t1.quadraticCurveTo$4(ctx, t2.$add(x, w), y, t2.$add(x, w), t3);
  t4 = y + h;
  t5 = t4 - r;
  t1.lineTo$2(ctx, t2.$add(x, w), t5);
  t1.quadraticCurveTo$4(ctx, t2.$add(x, w), t4, $.$sub$n(t2.$add(x, w), r), t4);
  t1.lineTo$2(ctx, t2.$add(x, r), t4);
  t1.quadraticCurveTo$4(ctx, x, t4, x, t5);
  t1.lineTo$2(ctx, x, t3);
  t1.quadraticCurveTo$4(ctx, x, y, t2.$add(x, r), y);
  t1.closePath$0(ctx);
},

drawLineArrow: function(ctx, x0, y0, x1, y1, width) {
  var t1, t2, t3, theta, y2, t4, t5, y3, t6, y4;
  t1 = $.getInterceptor$x(ctx);
  t1.save$0(ctx);
  t1.beginPath$0(ctx);
  t1.moveTo$2(ctx, x0, y0);
  t1.lineTo$2(ctx, x1, y1);
  t1.set$lineWidth(ctx, width);
  t1.set$lineCap(ctx, "butt");
  t1.stroke$0(ctx);
  t2 = $.getInterceptor$n(y1);
  t3 = t2.$sub(y1, y0);
  if (typeof t3 !== "number")
    $.throwExpression(new $.ArgumentError(t3));
  theta = Math.atan2(x1 - x0, t3);
  t3 = Math.sin(theta);
  y2 = t2.$add(y1, Math.cos(theta) * width * 1.2);
  t4 = theta + 1.8849555921538759;
  t5 = Math.sin(t4);
  y3 = t2.$add(y1, Math.cos(t4) * width * 1.2);
  t4 = theta - 1.8849555921538759;
  t6 = Math.sin(t4);
  y4 = t2.$add(y1, Math.cos(t4) * width * 1.2);
  t1.beginPath$0(ctx);
  t1.moveTo$2(ctx, x1 + t3 * width * 1.2, y2);
  t1.lineTo$2(ctx, x1 + t5 * width * 1.2, y3);
  t1.lineTo$2(ctx, x1, y1);
  t1.lineTo$2(ctx, x1 + t6 * width * 1.2, y4);
  t1.closePath$0(ctx);
  t1.fill$0(ctx);
  t1.restore$0(ctx);
},

Beetle: {"": "Fly;_turn@,frame,perched,frame0,frame1,frame2,colors,color<,lib3$Fly$_turn,perch,pond,x,y,size,heading,opacity,dead,tween,img,variables,_width,_height",
  spook$0: function() {
    this.perched = false;
  },
  animate$0: function() {
    this.frame = this.frame + 1;
    if (this.frame > 1)
      this.frame = 0;
    var t1 = this.tween;
    if (t1.isTweening$0()) {
      t1.animate$0();
      return true;
    } else if (this.perched) {
      $.get$Turtle_rand();
      if (Math.random() * 100 >>> 0 > 98) {
        this.heading = this.heading - 0.2617993877991494;
        return true;
      } else {
        $.get$Turtle_rand();
        if (Math.random() * 100 >>> 0 > 98) {
          this.heading = this.heading - -0.2617993877991494;
          return true;
        } else
          return false;
      }
    } else {
      this.forward$1(6);
      t1 = this._turn;
      this.heading = this.heading - t1 / 180 * 3.141592653589793;
      t1 = this.pond;
      if (t1.onGridPoint$3(this.x, this.y, 8) && t1.getTurtlesHere$2(this, C.Type_tCm)._liblib2$_length === 0 && t1.getTurtlesHere$2(this, C.Type_QA5)._liblib2$_length === 0)
        this.perched = true;
      else {
        $.get$Turtle_rand();
        if (Math.random() * 100 >>> 0 > 98) {
          $.get$Turtle_rand();
          this._turn = Math.random() * 3 - 1.5;
        }
      }
      return true;
    }
  },
  _drawLocal$1: function(ctx) {
    var i, t1, iw, ih;
    if (this.dead)
      return;
    i = this.frame === 0 ? this.frame1 : this.frame2;
    if (this.perched)
      i = this.frame0;
    t1 = $.getInterceptor$x(i);
    iw = t1.get$width(i);
    ih = t1.get$height(i);
    $.drawImageScaled$5$x(ctx, i, $.$negate$n(iw) / 2, $.$negate$n(ih) / 2, iw, ih);
  },
  Beetle$1: function(pond) {
    var t1 = $.get$Turtle_rand().nextInt$1(4);
    if (t1 < 0 || t1 >= 4)
      throw $.ioore(t1);
    this.color = this.colors[t1];
    $.set$src$x(this.img, "images/gems/beetle_" + $.S(this.color) + "2.png");
    $.set$src$x(this.frame0, "images/gems/beetle_" + $.S(this.color) + "0.png");
    $.set$src$x(this.frame1, "images/gems/beetle_" + $.S(this.color) + "1.png");
    $.set$src$x(this.frame2, "images/gems/beetle_" + $.S(this.color) + "2.png");
  },
  static: {
Beetle$: function(pond) {
  var t1, t2, t3, t4, t5, t6;
  t1 = $.ImageElement_ImageElement(null, null, null);
  t2 = $.ImageElement_ImageElement(null, null, null);
  t3 = $.ImageElement_ImageElement(null, null, null);
  t4 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
  t4.segments = [];
  t5 = $.ImageElement_ImageElement(null, null, null);
  t6 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t6, [$.JSString, null]);
  t6 = new $.Beetle(1.5, 1, false, t1, t2, t3, ["red", "green", "blue", "yellow"], null, 3, 0, pond, 0, 0, 1, 0, 1, false, t4, t5, t6, 0, 0);
  t5 = $.get$Turtle_rand().nextInt$1(365);
  t6.heading = t6.heading - -t5 / 180 * 3.141592653589793;
  t6.Fly$1(pond);
  t6.Beetle$1(pond);
  return t6;
}}

},

Block: {"": "Object;workspace<,id,x*,y*,_width,_height,_targetX,_targetY,text,color<,textColor,dragging<,candidate',next<,prev,param,_lastX,_lastY,inMenu?,inserted<",
  clone$0: function(_) {
    var b, t1;
    b = new $.Block(this.workspace, null, 0, 0, 0, 0, null, null, this.text, "#3399aa", "white", false, null, null, null, null, null, null, false, false);
    t1 = $.Block_BLOCK_ID;
    if (typeof t1 !== "number")
      return this.clone$0$bailout(1, b, t1);
    $.Block_BLOCK_ID = t1 + 1;
    b.id = t1;
    b._width = 95;
    b._height = 40;
    this.copyTo$1(b);
    return b;
  },
  clone$0$bailout: function(state0, b, t1) {
    $.Block_BLOCK_ID = $.$add$ns(t1, 1);
    b.id = t1;
    b._width = 95;
    b._height = 40;
    this.copyTo$1(b);
    return b;
  },
  copyTo$1: function(other) {
    var t1;
    other.x = this.x;
    other.y = this.y;
    other._width = this._width;
    other._height = this._height;
    other.text = this.text;
    other.color = this.color;
    other.textColor = this.textColor;
    t1 = this.param;
    if (t1 != null)
      other.param = $.clone$1$x(t1, other);
  },
  get$isInProgram: function() {
    return this.prev != null;
  },
  get$width: function(_) {
    var t1, t2;
    t1 = this.inMenu;
    t2 = this._width;
    if (typeof t2 !== "number")
      return this.get$width$bailout(1, t1, t2);
    if (t1)
      t1 = t2 * 0.68;
    else
      t1 = t2;
    return t1;
  },
  get$width$bailout: function(state0, t1, t2) {
    return t1 ? $.$mul$n(t2, 0.68) : t2;
  },
  get$height: function(_) {
    return this._height;
  },
  get$connectorX: function() {
    return this.get$targetX(this);
  },
  get$targetX: function(_) {
    var t1 = this._targetX;
    if (t1 != null)
      return t1;
    t1 = this.prev;
    return t1 != null ? t1.get$connectorX() : this.x;
  },
  get$targetY: function(_) {
    var t1, ty;
    t1 = this._targetY;
    if (t1 != null)
      return t1;
    t1 = this.next;
    ty = t1 != null ? $.$sub$n($.$sub$n(t1.get$targetY(t1), this._height), 0) : this.y;
    t1 = this.candidate;
    return t1 != null ? $.$sub$n(ty, $.$add$ns($.get$height$x(t1), 0)) : ty;
  },
  moveChain$2: function(deltaX, deltaY) {
    var t1 = this.x;
    if (typeof deltaX !== "number")
      throw $.iae(deltaX);
    this.x = t1 + deltaX;
    this.y = $.$add$ns(this.y, deltaY);
    t1 = this.next;
    if (t1 != null)
      t1.moveChain$2(deltaX, deltaY);
  },
  move$2: function(deltaX, deltaY) {
    var t1;
    if (typeof deltaY !== "number")
      return this.move$2$bailout(1, deltaX, deltaY);
    t1 = this.x;
    if (typeof deltaX !== "number")
      throw $.iae(deltaX);
    this.x = t1 + deltaX;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.move$2$bailout(2, 0, deltaY, t1);
    this.y = t1 + deltaY;
  },
  move$2$bailout: function(state0, deltaX, deltaY, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.x;
        if (typeof deltaX !== "number")
          throw $.iae(deltaX);
        this.x = t1 + deltaX;
        t1 = this.y;
      case 2:
        state0 = 0;
        this.y = $.$add$ns(t1, deltaY);
    }
  },
  overlaps$1: function(other) {
    var t1, t2, t3, t4, t5;
    t1 = this.x;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t3 !== "number")
      return this.overlaps$1$bailout(1, other, t1, t2, t3);
    t4 = t2.get$width(other);
    if (typeof t4 !== "number")
      return this.overlaps$1$bailout(2, other, t1, t2, t3, t4);
    if (t1 <= t3 + t4 + 0) {
      t1 = t2.get$x(other);
      if (typeof t1 !== "number")
        return this.overlaps$1$bailout(3, other, t1, t2);
      t3 = this.x;
      t4 = this.inMenu;
      t5 = this._width;
      if (typeof t5 !== "number")
        return this.overlaps$1$bailout(4, other, t1, t2, t3, t4, t5);
      if (t4)
        t4 = t5 * 0.68;
      else
        t4 = t5;
      if (t1 <= t3 + t4 + 0) {
        t1 = this.y;
        if (typeof t1 !== "number")
          return this.overlaps$1$bailout(5, other, t1, t2);
        t2 = t2.get$y(other);
        if (typeof t2 !== "number")
          return this.overlaps$1$bailout(6, 0, t1, t2);
        t2 = t1 <= t2;
        t1 = t2;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  overlaps$1$bailout: function(state0, other, t1, t2, t3, t4, t5) {
    switch (state0) {
      case 0:
        t1 = this.x;
        t2 = $.getInterceptor$x(other);
        t3 = t2.get$x(other);
      case 1:
        state0 = 0;
        t4 = t2.get$width(other);
      case 2:
        state0 = 0;
        t4 = $.$add$ns($.$add$ns(t3, t4), 0);
        if (typeof t4 !== "number")
          throw $.iae(t4);
      default:
        if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && t1 <= t4)
          switch (state0) {
            case 0:
              t1 = t2.get$x(other);
            case 3:
              state0 = 0;
              t3 = this.x;
              t4 = this.inMenu;
              t5 = this._width;
            case 4:
              state0 = 0;
              t4 = t4 ? $.$mul$n(t5, 0.68) : t5;
              if (typeof t4 !== "number")
                throw $.iae(t4);
            default:
              if (state0 === 6 || state0 === 5 || state0 === 0 && $.$le$n(t1, t3 + t4 + 0))
                switch (state0) {
                  case 0:
                    t1 = this.y;
                  case 5:
                    state0 = 0;
                    t2 = t2.get$y(other);
                  case 6:
                    state0 = 0;
                    t2 = $.$le$n(t1, t2);
                    t1 = t2;
                }
              else
                t1 = false;
          }
        else
          t1 = false;
        return t1;
    }
  },
  eval$1: function(program) {
    var t1, pval;
    t1 = this.param;
    pval = t1 == null ? null : $.get$value$x(t1);
    program.doCommand$2(this.text, pval);
  },
  step$1: function(_, program) {
    return this.next;
  },
  checkSyntax$1: function(before) {
    return !before.$isEndProgramBlock;
  },
  parameterChanged$1: function(param) {
    this.workspace.preview$1(this);
  },
  animate$0: function() {
    var t1, dx, t2, dy;
    t1 = this.get$targetX(this);
    if (typeof t1 !== "number")
      return this.animate$0$bailout(1, t1);
    dx = t1 - this.x;
    t1 = this.get$targetY(this);
    if (typeof t1 !== "number")
      return this.animate$0$bailout(2, t1, dx);
    t2 = this.y;
    if (typeof t2 !== "number")
      return this.animate$0$bailout(3, t1, dx, t2);
    dy = t1 - t2;
    if (C.JSNumber_methods.abs$0(dx) > 1)
      dx *= 0.3;
    else
      this._targetX = null;
    if (C.JSNumber_methods.abs$0(dy) > 1)
      dy *= 0.3;
    else
      this._targetY = null;
    if (C.JSNumber_methods.abs$0(dx) > 0 || C.JSNumber_methods.abs$0(dy) > 0) {
      this.x = this.x + dx;
      t1 = this.y;
      if (typeof t1 !== "number")
        return this.animate$0$bailout(4, t1, 0, 0, dy);
      this.y = t1 + dy;
      return true;
    } else
      return this.dragging;
  },
  animate$0$bailout: function(state0, t1, dx, t2, dy) {
    switch (state0) {
      case 0:
        t1 = this.get$targetX(this);
      case 1:
        state0 = 0;
        dx = $.$sub$n(t1, this.x);
        t1 = this.get$targetY(this);
      case 2:
        state0 = 0;
        t2 = this.y;
      case 3:
        state0 = 0;
        dy = $.$sub$n(t1, t2);
        t1 = $.getInterceptor$n(dx);
        if (t1.abs$0(dx) > 1)
          dx = t1.$mul(dx, 0.3);
        else
          this._targetX = null;
        t1 = $.getInterceptor$n(dy);
        if (t1.abs$0(dy) > 1)
          dy = t1.$mul(dy, 0.3);
        else
          this._targetY = null;
      case 4:
        if (state0 === 4 || state0 === 0 && ($.abs$0$n(dx) > 0 || $.abs$0$n(dy) > 0))
          switch (state0) {
            case 0:
              t1 = this.x;
              if (typeof dx !== "number")
                throw $.iae(dx);
              this.x = t1 + dx;
              t1 = this.y;
            case 4:
              state0 = 0;
              this.y = $.$add$ns(t1, dy);
              return true;
          }
        else
          return this.dragging;
    }
  },
  insertBlock$1: function(target) {
    var t1;
    target.next = this.next;
    target.prev = this;
    t1 = this.next;
    if (t1 != null)
      t1.prev = target;
    this.next = target;
    this.workspace.stopProgram$0();
  },
  draw$1: function(ctx) {
    var t1;
    this._drawMenuArrow$1(ctx);
    this._resize$1(ctx);
    this._drawOutline$1(ctx);
    this._drawLabel$1(ctx);
    t1 = this.param;
    if (t1 != null && this.inserted)
      t1.draw$1(ctx);
  },
  _resize$1: function(ctx) {
    var t1, t2;
    t1 = this.param;
    if (t1 != null && this.inserted) {
      t1 = t1.getDisplayWidth$1(ctx);
      t2 = this.param.get$centerX();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      this._width = $.max(t1 + t2 - 14, 95);
    }
  },
  _drawMenuArrow$1: function(ctx) {
    var t1, t2, t3, t4, t5, t6;
    if (this.workspace.isOverMenu$1(this) && this.dragging && !this.inserted) {
      t1 = $.getInterceptor$x(ctx);
      t1.set$fillStyle(ctx, "orange");
      t1.set$strokeStyle(ctx, "orange");
      t1 = this.x;
      t2 = this.inMenu;
      t3 = this._width;
      t2 = $.$div$n(t2 ? $.$mul$n(t3, 0.68) : t3, 2);
      t3 = $.$add$ns(this.y, this._height / 2);
      t4 = this.x;
      t5 = this.inMenu;
      t6 = this._width;
      $.drawLineArrow(ctx, t1 + t2, t3, t4 + $.$div$n(t5 ? $.$mul$n(t6, 0.68) : t6, 2), $.$sub$n($.$add$ns(this.y, this._height / 2), this._height), 18);
    }
  },
  _drawOutline$1: function(ctx) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = this.y;
    t3 = this.inMenu;
    t4 = this._width;
    t3 = t3 ? $.$mul$n(t4, 0.68) : t4;
    this._outline$5(ctx, t1, t2, t3, this._height);
    t3 = $.getInterceptor$x(ctx);
    t3.save$0(ctx);
    t3.set$fillStyle(ctx, this.color);
    t3.set$strokeStyle(ctx, "rgba(255, 255, 255, 0.3)");
    t3.set$lineWidth(ctx, 2);
    t3.fill$0(ctx);
    t3.stroke$0(ctx);
    t3.restore$0(ctx);
  },
  _drawLabel$1: function(ctx) {
    var lines, t1, tx, ty, t2;
    lines = $.split$1$s(this.text, "\n");
    t1 = $.getInterceptor$x(ctx);
    t1.set$fillStyle(ctx, this.textColor);
    t1.set$font(ctx, "200 11pt sans-serif");
    t1.set$textAlign(ctx, "left");
    t1.set$textBaseline(ctx, "middle");
    tx = this.x + 12;
    ty = $.$add$ns(this.y, this._height / 2);
    t2 = lines.length;
    if (t2 === 1)
      t1.fillText$3(ctx, this.text, tx, ty);
    else {
      if (0 >= t2)
        throw $.ioore(0);
      t2 = $.getInterceptor$n(ty);
      t1.fillText$3(ctx, lines[0], tx, t2.$sub(ty, 7));
      if (1 >= lines.length)
        throw $.ioore(1);
      t1.fillText$3(ctx, lines[1], tx, t2.$add(ty, 7));
    }
  },
  _outline$5: function(ctx, x, y, w, h) {
    var t1, t2, r0, r1, t3, t4, t5, t6, t7, t8;
    t1 = this.prev;
    if (t1 != null) {
      t2 = $.getInterceptor(t1);
      t1 = typeof t1 === "object" && t1 !== null && !!t2.$isControlBlock && (typeof t1 !== "object" || t1 === null || !t2.$isEndBlock);
    } else
      t1 = true;
    r0 = t1 ? 14 : 2;
    t1 = this.next;
    if (t1 != null) {
      t2 = $.getInterceptor(t1);
      t1 = typeof t1 === "object" && t1 !== null && !!t2.$isControlBlock && (typeof t1 !== "object" || t1 === null || !t2.$isBeginBlock);
    } else
      t1 = true;
    r1 = t1 ? 14 : 2;
    t1 = $.getInterceptor$x(ctx);
    t1.beginPath$0(ctx);
    t2 = x + r0;
    t1.moveTo$2(ctx, t2, y);
    t3 = x + 20;
    t1.lineTo$2(ctx, t3, y);
    t4 = t3 + 5;
    t5 = $.getInterceptor$ns(y);
    t1.lineTo$2(ctx, t4, t5.$add(y, 4));
    t6 = t3 + 10;
    t1.lineTo$2(ctx, t6, t5.$add(y, 4));
    t7 = t3 + 15;
    t1.lineTo$2(ctx, t7, y);
    if (typeof w !== "number")
      throw $.iae(w);
    t8 = x + w;
    t1.lineTo$2(ctx, t8, y);
    t1.lineTo$2(ctx, t8, t5.$add(y, h));
    t1.lineTo$2(ctx, t7, t5.$add(y, h));
    t1.lineTo$2(ctx, t6, $.$add$ns(t5.$add(y, h), 4));
    t1.lineTo$2(ctx, t4, $.$add$ns(t5.$add(y, h), 4));
    t1.lineTo$2(ctx, t3, t5.$add(y, h));
    t1.lineTo$2(ctx, x + r1, t5.$add(y, h));
    t1.quadraticCurveTo$4(ctx, x, t5.$add(y, h), x, $.$sub$n(t5.$add(y, h), r1));
    t1.lineTo$2(ctx, x, t5.$add(y, r0));
    t1.quadraticCurveTo$4(ctx, x, y, t2, y);
    t1.closePath$0(ctx);
  },
  containsTouch$1: function(c) {
    var tx, ty, t1, t2, t3, t4;
    tx = c.get$touchX();
    if (typeof tx !== "number")
      return this.containsTouch$1$bailout(1, c, tx);
    ty = c.get$touchY();
    if (typeof ty !== "number")
      return this.containsTouch$1$bailout(2, 0, tx, ty);
    t1 = this.x;
    if (tx >= t1) {
      t2 = this.y;
      if (typeof t2 !== "number")
        return this.containsTouch$1$bailout(3, 0, tx, ty, C.JSNumber_methods, t2);
      if (ty >= t2) {
        t3 = this.inMenu;
        t4 = this._width;
        if (typeof t4 !== "number")
          return this.containsTouch$1$bailout(4, 0, tx, ty, C.JSNumber_methods, t1, C.JSNumber_methods, t4, t3);
        if (t3)
          t3 = t4 * 0.68;
        else
          t3 = t4;
        t1 = tx <= t1 + t3 && ty <= t2 + this._height;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  containsTouch$1$bailout: function(state0, c, tx, ty, t1, t2, t3, t5, t4) {
    switch (state0) {
      case 0:
        tx = c.get$touchX();
      case 1:
        state0 = 0;
        ty = c.get$touchY();
      case 2:
        state0 = 0;
        t1 = $.getInterceptor$n(tx);
      default:
        if (state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && t1.$ge(tx, this.x))
          switch (state0) {
            case 0:
              t2 = this.y;
            case 3:
              state0 = 0;
              t3 = $.getInterceptor$n(ty);
            default:
              if (state0 === 5 || state0 === 4 || state0 === 0 && t3.$ge(ty, t2))
                switch (state0) {
                  case 0:
                    t2 = this.x;
                    t4 = this.inMenu;
                    t5 = this._width;
                  case 4:
                    state0 = 0;
                    t4 = t4 ? $.$mul$n(t5, 0.68) : t5;
                    if (typeof t4 !== "number")
                      throw $.iae(t4);
                  case 5:
                    if (state0 === 5 || state0 === 0 && t1.$le(tx, t2 + t4))
                      switch (state0) {
                        case 0:
                          t1 = this.y;
                        case 5:
                          state0 = 0;
                          t1 = t3.$le(ty, $.$add$ns(t1, this._height));
                      }
                    else
                      t1 = false;
                }
              else
                t1 = false;
          }
        else
          t1 = false;
        return t1;
    }
  },
  touchDown$1: function(c) {
    var wasInProgram, t1;
    this.dragging = true;
    wasInProgram = this.get$isInProgram();
    this._lastX = c.get$touchX();
    this._lastY = c.get$touchY();
    t1 = this.prev;
    if (t1 != null)
      t1.next = this.next;
    t1 = this.next;
    if (t1 != null)
      t1.prev = this.prev;
    this.prev = null;
    this.next = null;
    if (wasInProgram)
      this.workspace.stopProgram$0();
    t1 = this.workspace;
    t1.moveToTop$1(this);
    t1.draw$0();
    return true;
  },
  touchUp$1: function(c) {
    var t1 = this.workspace;
    if (t1.snapTogether$1(this)) {
      $.Sounds_playSound("click");
      t1.preview$1(this);
      this.inserted = true;
    } else if (!this.inserted && t1.isOverMenu$1(this)) {
      t1.snapToEnd$1(this);
      $.Sounds_playSound("click");
      t1.preview$1(this);
      this.inserted = true;
    } else if (t1.isOffscreen$1(this) || t1.isOverMenu$1(this) || this.inserted) {
      t1.removeBlock$1(this);
      $.Sounds_playSound("crunch");
    }
    this.dragging = false;
  },
  touchDrag$1: function(c) {
    var t1, t2, t3;
    t1 = $.$sub$n(c.get$touchX(), this._lastX);
    t2 = $.$sub$n(c.get$touchY(), this._lastY);
    t3 = this.x;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this.x = t3 + t1;
    this.y = $.$add$ns(this.y, t2);
    this._lastX = c.get$touchX();
    this._lastY = c.get$touchY();
  },
  touchSlide$1: function(c) {
  },
  Block$2: function(workspace, text) {
    var t1 = $.Block_BLOCK_ID;
    $.Block_BLOCK_ID = $.$add$ns(t1, 1);
    this.id = t1;
    this._width = 95;
    this._height = 40;
  },
  static: {
"": "Block_BLOCK_ID",
Block$: function(workspace, text) {
  var t1 = new $.Block(workspace, null, 0, 0, 0, 0, null, null, text, "#3399aa", "white", false, null, null, null, null, null, null, false, false);
  t1.Block$2(workspace, text);
  return t1;
}}

},

TraceBug: {"": "Object;x*,y*,target,start>",
  get$targetX: function(_) {
    var t1, t2;
    t1 = this.target;
    if (t1 == null)
      t1 = 0;
    else {
      t2 = $.getInterceptor$x(t1);
      t1 = $.$add$ns($.$add$ns(t2.get$x(t1), t2.get$width(t1)), 6);
    }
    return t1;
  },
  get$targetY: function(_) {
    var t1, t2;
    t1 = this.target;
    if (t1 == null)
      t1 = 0;
    else {
      t2 = $.getInterceptor$x(t1);
      t1 = $.$add$ns(t2.get$y(t1), $.$div$n(t2.get$height(t1), 2));
    }
    return t1;
  },
  animate$0: function() {
    var t1, t2, t3, dx, dy;
    t1 = this.target;
    if (t1 == null)
      return false;
    t2 = $.getInterceptor$x(t1);
    t3 = t2.get$x(t1);
    if (typeof t3 !== "number")
      return this.animate$0$bailout(1, t2, t3, t1);
    t1 = t2.get$width(t1);
    if (typeof t1 !== "number")
      return this.animate$0$bailout(2, 0, t3, t1);
    t1 = t3 + t1 + 6;
    t2 = this.x;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    dx = t1 - t2;
    t1 = this.target;
    if (t1 == null)
      t1 = 0;
    else {
      t2 = $.getInterceptor$x(t1);
      t3 = t2.get$y(t1);
      if (typeof t3 !== "number")
        return this.animate$0$bailout(3, t2, t3, t1, dx);
      t1 = t2.get$height(t1);
      if (typeof t1 !== "number")
        return this.animate$0$bailout(4, 0, t3, t1, dx);
      t1 = t3 + t1 / 2;
    }
    t2 = this.y;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    dy = t1 - t2;
    if (C.JSNumber_methods.abs$0(dx) > 1)
      dx *= 0.3;
    if (C.JSNumber_methods.abs$0(dy) > 1)
      dy *= 0.3;
    if (C.JSNumber_methods.abs$0(dx) > 0 || C.JSNumber_methods.abs$0(dy) > 0) {
      t1 = this.x;
      if (typeof t1 !== "number")
        return this.animate$0$bailout(5, 0, 0, t1, dx, dy);
      this.x = t1 + dx;
      t1 = this.y;
      if (typeof t1 !== "number")
        return this.animate$0$bailout(6, 0, 0, t1, 0, dy);
      this.y = t1 + dy;
      return true;
    } else
      return false;
  },
  animate$0$bailout: function(state0, t2, t3, t1, dx, dy) {
    switch (state0) {
      case 0:
        t1 = this.target;
        if (t1 == null)
          return false;
        t2 = $.getInterceptor$x(t1);
        t3 = t2.get$x(t1);
      case 1:
        state0 = 0;
        t1 = t2.get$width(t1);
      case 2:
        state0 = 0;
        t1 = $.$add$ns($.$add$ns(t3, t1), 6);
        t2 = this.x;
        if (typeof t2 !== "number")
          throw $.iae(t2);
        dx = $.$sub$n(t1, t2);
        t1 = this.target;
      default:
        if (state0 === 0 && t1 == null)
          t1 = 0;
        else
          switch (state0) {
            case 0:
              t2 = $.getInterceptor$x(t1);
              t3 = t2.get$y(t1);
            case 3:
              state0 = 0;
              t1 = t2.get$height(t1);
            case 4:
              state0 = 0;
              t1 = $.$add$ns(t3, $.$div$n(t1, 2));
          }
        t2 = this.y;
        if (typeof t2 !== "number")
          throw $.iae(t2);
        dy = $.$sub$n(t1, t2);
        t1 = $.getInterceptor$n(dx);
        if (t1.abs$0(dx) > 1)
          dx = t1.$mul(dx, 0.3);
        t1 = $.getInterceptor$n(dy);
        if (t1.abs$0(dy) > 1)
          dy = t1.$mul(dy, 0.3);
      case 5:
      case 6:
        if (state0 === 6 || state0 === 5 || state0 === 0 && ($.abs$0$n(dx) > 0 || $.abs$0$n(dy) > 0))
          switch (state0) {
            case 0:
              t1 = this.x;
            case 5:
              state0 = 0;
              this.x = $.$add$ns(t1, dx);
              t1 = this.y;
            case 6:
              state0 = 0;
              this.y = $.$add$ns(t1, dy);
              return true;
          }
        else
          return false;
    }
  },
  reset$0: function(_) {
    this.target = this.start;
    this.x = this.get$targetX(this);
    this.y = this.get$targetY(this);
  },
  draw$1: function(ctx) {
    var t1, t2, t3;
    t1 = this.target;
    if (t1 != null) {
      t2 = $.getInterceptor(t1);
      t2 = typeof t1 === "object" && t1 !== null && !!t2.$isStartBlock;
      t1 = t2;
    } else
      t1 = true;
    if (t1)
      return;
    t1 = $.getInterceptor$x(ctx);
    t1.beginPath$0(ctx);
    t1.moveTo$2(ctx, this.x, this.y);
    t2 = this.x;
    if (typeof t2 !== "number")
      return this.draw$1$bailout(1, ctx, t2, t1);
    t2 += 9;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.draw$1$bailout(2, ctx, t2, t1, t3);
    t1.lineTo$2(ctx, t2, t3 - 7);
    t3 = this.x;
    if (typeof t3 !== "number")
      return this.draw$1$bailout(3, ctx, 0, t1, t3);
    t3 += 8;
    t2 = this.y;
    if (typeof t2 !== "number")
      return this.draw$1$bailout(4, ctx, t2, t1, t3);
    t1.lineTo$2(ctx, t3, t2 - 3);
    t2 = this.x;
    if (typeof t2 !== "number")
      return this.draw$1$bailout(5, ctx, t2, t1);
    t2 += 20;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.draw$1$bailout(6, ctx, t2, t1, t3);
    t1.lineTo$2(ctx, t2, t3 - 3);
    t3 = this.x;
    if (typeof t3 !== "number")
      return this.draw$1$bailout(7, ctx, 0, t1, t3);
    t3 += 20;
    t2 = this.y;
    if (typeof t2 !== "number")
      return this.draw$1$bailout(8, ctx, t2, t1, t3);
    t1.lineTo$2(ctx, t3, t2 + 3);
    t2 = this.x;
    if (typeof t2 !== "number")
      return this.draw$1$bailout(9, ctx, t2, t1);
    t2 += 8;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.draw$1$bailout(10, ctx, t2, t1, t3);
    t1.lineTo$2(ctx, t2, t3 + 3);
    t3 = this.x;
    if (typeof t3 !== "number")
      return this.draw$1$bailout(11, ctx, 0, t1, t3);
    t3 += 9;
    t2 = this.y;
    if (typeof t2 !== "number")
      return this.draw$1$bailout(12, ctx, t2, t1, t3);
    t1.lineTo$2(ctx, t3, t2 + 7);
    t1.closePath$0(ctx);
    t1.set$fillStyle(ctx, "yellow");
    t1.set$strokeStyle(ctx, "yellow");
    t1.set$lineWidth(ctx, 2);
    t1.fill$0(ctx);
    t1.stroke$0(ctx);
  },
  draw$1$bailout: function(state0, ctx, t2, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.target;
        if (t1 != null) {
          t2 = $.getInterceptor(t1);
          t2 = typeof t1 === "object" && t1 !== null && !!t2.$isStartBlock;
          t1 = t2;
        } else
          t1 = true;
        if (t1)
          return;
        t1 = $.getInterceptor$x(ctx);
        t1.beginPath$0(ctx);
        t1.moveTo$2(ctx, this.x, this.y);
        t2 = this.x;
      case 1:
        state0 = 0;
        t2 = $.$add$ns(t2, 9);
        t3 = this.y;
      case 2:
        state0 = 0;
        t1.lineTo$2(ctx, t2, $.$sub$n(t3, 7));
        t3 = this.x;
      case 3:
        state0 = 0;
        t3 = $.$add$ns(t3, 8);
        t2 = this.y;
      case 4:
        state0 = 0;
        t1.lineTo$2(ctx, t3, $.$sub$n(t2, 3));
        t2 = this.x;
      case 5:
        state0 = 0;
        t2 = $.$add$ns(t2, 20);
        t3 = this.y;
      case 6:
        state0 = 0;
        t1.lineTo$2(ctx, t2, $.$sub$n(t3, 3));
        t3 = this.x;
      case 7:
        state0 = 0;
        t3 = $.$add$ns(t3, 20);
        t2 = this.y;
      case 8:
        state0 = 0;
        t1.lineTo$2(ctx, t3, $.$add$ns(t2, 3));
        t2 = this.x;
      case 9:
        state0 = 0;
        t2 = $.$add$ns(t2, 8);
        t3 = this.y;
      case 10:
        state0 = 0;
        t1.lineTo$2(ctx, t2, $.$add$ns(t3, 3));
        t3 = this.x;
      case 11:
        state0 = 0;
        t3 = $.$add$ns(t3, 9);
        t2 = this.y;
      case 12:
        state0 = 0;
        t1.lineTo$2(ctx, t3, $.$add$ns(t2, 7));
        t1.closePath$0(ctx);
        t1.set$fillStyle(ctx, "yellow");
        t1.set$strokeStyle(ctx, "yellow");
        t1.set$lineWidth(ctx, 2);
        t1.fill$0(ctx);
        t1.stroke$0(ctx);
    }
  },
  TraceBug$1: function(start) {
    this.target = this.start;
    this.x = this.get$targetX(this);
    this.y = this.get$targetY(this);
  },
  static: {
TraceBug$: function(start) {
  var t1 = new $.TraceBug(0, 0, null, start);
  t1.TraceBug$1(start);
  return t1;
}}

},

ControlBlock: {"": "Block;begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  get$targetX: function(_) {
    var t1;
    if (!this.dragging) {
      t1 = this.cprev;
      t1 = t1 != null && t1.get$isInProgram();
    } else
      t1 = false;
    if (t1)
      return $.$sub$n($.Block.prototype.get$targetX.call(this, this), 10);
    else
      return $.Block.prototype.get$targetX.call(this, this);
  },
  get$targetY: function(_) {
    var t1, t2;
    if (this.candidate == null) {
      t1 = this.cnext;
      if (t1 != null) {
        t2 = this.next;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
    } else
      t1 = false;
    if (t1)
      return $.$sub$n($.Block.prototype.get$targetY.call(this, this), 25);
    else
      return $.Block.prototype.get$targetY.call(this, this);
  },
  get$connectorX: function() {
    if (!this.dragging && this.cnext != null)
      return $.$add$ns(this.get$targetX(this), 10);
    else
      return this.get$targetX(this);
  },
  draw$1: function(ctx) {
    var t1;
    this._resize$1(ctx);
    this._drawMenuArrow$1(ctx);
    this._drawLabel$1(ctx);
    t1 = this.param;
    if (t1 != null && this.inserted)
      t1.draw$1(ctx);
  },
  checkSyntax$1: function(before) {
    var t1, t2, p, nest, t3, a;
    t1 = this.inserted;
    if (t1 && this.cprev != null)
      for (t2 = this.cprev, p = before, nest = 0; true;) {
        if (p == null)
          return false;
        else if (p == null ? t2 == null : p === t2)
          if (nest !== 0)
            return false;
          else
            break;
        else {
          t3 = $.getInterceptor(p);
          if (typeof p === "object" && p !== null && !!t3.$isEndBlock)
            --nest;
          else if (typeof p === "object" && p !== null && !!t3.$isBeginBlock)
            ++nest;
        }
        p = p.prev;
      }
    if (t1 && this.cnext != null) {
      a = before.next;
      for (t1 = this.cnext, nest = 0; true;) {
        if (a == null)
          return false;
        else if (a == null ? t1 == null : a === t1)
          if (nest !== 0)
            return false;
          else
            break;
        else {
          t2 = $.getInterceptor(a);
          if (typeof a === "object" && a !== null && !!t2.$isEndBlock)
            --nest;
          else if (typeof a === "object" && a !== null && !!t2.$isBeginBlock)
            ++nest;
        }
        a = a.next;
      }
    }
    return true;
  },
  touchUp$1: function(c) {
    var wasInProgram = this.inserted;
    $.Block.prototype.touchUp$1.call(this, c);
    if (this.inserted && !wasInProgram)
      this.begin.addAllBlocks$0();
    else if (!this.get$isInProgram()) {
      this.begin.removeAllBlocks$0();
      this.workspace.draw$0();
    }
  },
  touchDown$1: function(c) {
    var t1, t2, b;
    t1 = this.cnext;
    if (t1 != null) {
      t2 = this.next;
      if (t2 == null ? t1 == null : t2 === t1) {
        t1 = this.cprev;
        if (t1 != null) {
          t2 = this.prev;
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    if (t1)
      return false;
    $.Block.prototype.touchDown$1.call(this, c);
    if (this.inserted && this.begin != null) {
      b = this.begin;
      for (t1 = this.workspace; b != null;) {
        t1.moveToTop$1(b);
        b = b.cnext;
      }
    }
    return true;
  },
  touchDrag$1: function(c) {
    var t1, t2, miny, maxy, ty, dx;
    if (!this.inserted) {
      $.Block.prototype.touchDrag$1.call(this, c);
      return;
    }
    t1 = this.cprev;
    if (t1 != null) {
      t2 = t1.y;
      t1.get$height;
      miny = $.$add$ns(t2, t1._height);
    } else
      miny = 0;
    t1 = this.cnext;
    maxy = t1 != null ? $.$sub$n(t1.y, this._height) : $.$sub$n($.get$y$x($.get$start$x(this.workspace).get$end()), this._height);
    ty = $.$add$ns(this.y, $.$sub$n(c.get$touchY(), this._lastY));
    dx = !!this.$isBeginBlock ? $.$sub$n(c.get$touchX(), this._lastX) : 0;
    t1 = $.getInterceptor$n(ty);
    if (t1.$lt(ty, miny)) {
      t1 = $.$sub$n(miny, this.y);
      t2 = this.x;
      if (typeof dx !== "number")
        throw $.iae(dx);
      this.x = t2 + dx;
      this.y = $.$add$ns(this.y, t1);
      this._lastX = c.get$touchX();
      this._lastY = this.y;
    } else if (t1.$gt(ty, maxy)) {
      t1 = $.$sub$n(maxy, this.y);
      t2 = this.x;
      if (typeof dx !== "number")
        throw $.iae(dx);
      this.x = t2 + dx;
      this.y = $.$add$ns(this.y, t1);
      this._lastX = c.get$touchX();
      this._lastY = this.y;
    } else {
      t1 = $.$sub$n(c.get$touchY(), this._lastY);
      t2 = this.x;
      if (typeof dx !== "number")
        throw $.iae(dx);
      this.x = t2 + dx;
      this.y = $.$add$ns(this.y, t1);
      this._lastX = c.get$touchX();
      this._lastY = c.get$touchY();
    }
  },
  $isControlBlock: true
},

BeginBlock: {"": "ControlBlock;end<,begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  draw$1: function(ctx) {
    var t1;
    this._resize$1(ctx);
    this._drawMenuArrow$1(ctx);
    this._drawOutline$1(ctx);
    this._drawLabel$1(ctx);
    t1 = this.param;
    if (t1 != null && this.inserted)
      t1.draw$1(ctx);
  },
  _addClause$1: function(clause) {
    var c, c0;
    for (c = this; c != null; c = c0) {
      c0 = c.cnext;
      if (c0 == null) {
        c.cnext = clause;
        c.next = clause;
        clause.cprev = c;
        clause.prev = c;
        return;
      }
    }
  },
  _endStep$1: function(program) {
    return this.end.next;
  },
  _subpath$2: function(ctx, b) {
    var x0, t1, t2, x1, y0, y1, n, t3, t4, t5, y2;
    x0 = this.x;
    b.get$width;
    t1 = b.inMenu;
    t2 = b._width;
    if (typeof t2 !== "number")
      return this._subpath$2$bailout(1, ctx, b, t2, x0, t1);
    if (t1)
      t1 = t2 * 0.68;
    else
      t1 = t2;
    x1 = x0 + t1;
    y0 = b.y;
    if (typeof y0 !== "number")
      return this._subpath$2$bailout(2, ctx, b, 0, x0, 0, x1, y0);
    y1 = y0 + b._height;
    t1 = $.getInterceptor(b);
    t2 = typeof b === "object" && b !== null && !!t1.$isBeginBlock;
    n = t2 ? 20 : 30;
    if (typeof b !== "object" || b === null || !t1.$isStartBlock) {
      t3 = x0 + n;
      t4 = $.getInterceptor$x(ctx);
      t4.lineTo$2(ctx, t3, y0);
      t5 = y0 + 4;
      t4.lineTo$2(ctx, t3 + 5, t5);
      t4.lineTo$2(ctx, t3 + 10, t5);
      t4.lineTo$2(ctx, t3 + 15, y0);
    }
    t3 = $.getInterceptor$x(ctx);
    t3.lineTo$2(ctx, x1, y0);
    t3.lineTo$2(ctx, x1, y1);
    if (t2)
      n += 10;
    else if (typeof b === "object" && b !== null && !!t1.$isEndBlock)
      n -= 10;
    if (typeof b !== "object" || b === null || !t1.$isEndProgramBlock) {
      t1 = x0 + n;
      t3.lineTo$2(ctx, t1 + 15, y1);
      t2 = y1 + 4;
      t3.lineTo$2(ctx, t1 + 10, t2);
      t3.lineTo$2(ctx, t1 + 5, t2);
      t3.lineTo$2(ctx, t1, y1);
    }
    t1 = b.cnext;
    if (t1 != null) {
      y2 = t1.y;
      if (typeof y2 !== "number")
        return this._subpath$2$bailout(3, ctx, 0, 0, x0, t3, 0, 0, y2, y1);
      t1 = x0 + 10;
      t2 = t1 + 14;
      t3.lineTo$2(ctx, t2, y1);
      t3.quadraticCurveTo$4(ctx, t1, y1, t1, y1 + 14);
      t3.lineTo$2(ctx, t1, y2 - 14);
      t3.quadraticCurveTo$4(ctx, t1, y2, t2, y2);
    }
  },
  _subpath$2$bailout: function(state0, ctx, b, t2, x0, t1, x1, y0, y2, y1) {
    switch (state0) {
      case 0:
        x0 = this.x;
        b.get$width;
        t1 = b.inMenu;
        t2 = b._width;
      case 1:
        state0 = 0;
        t1 = t1 ? $.$mul$n(t2, 0.68) : t2;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        x1 = x0 + t1;
        y0 = b.y;
      case 2:
        state0 = 0;
        t1 = $.getInterceptor$ns(y0);
        y1 = t1.$add(y0, b._height);
        t2 = $.getInterceptor(b);
        t3 = typeof b === "object" && b !== null && !!t2.$isBeginBlock;
        n = t3 ? 20 : 30;
        if (typeof b !== "object" || b === null || !t2.$isStartBlock) {
          t4 = x0 + n;
          t5 = $.getInterceptor$x(ctx);
          t5.lineTo$2(ctx, t4, y0);
          t5.lineTo$2(ctx, t4 + 5, t1.$add(y0, 4));
          t5.lineTo$2(ctx, t4 + 10, t1.$add(y0, 4));
          t5.lineTo$2(ctx, t4 + 15, y0);
        }
        t1 = $.getInterceptor$x(ctx);
        t1.lineTo$2(ctx, x1, y0);
        t1.lineTo$2(ctx, x1, y1);
        if (t3)
          n += 10;
        else if (typeof b === "object" && b !== null && !!t2.$isEndBlock)
          n -= 10;
        if (typeof b !== "object" || b === null || !t2.$isEndProgramBlock) {
          t2 = x0 + n;
          t1.lineTo$2(ctx, t2 + 15, y1);
          t3 = $.getInterceptor$ns(y1);
          t1.lineTo$2(ctx, t2 + 10, t3.$add(y1, 4));
          t1.lineTo$2(ctx, t2 + 5, t3.$add(y1, 4));
          t1.lineTo$2(ctx, t2, y1);
        }
        t2 = b.cnext;
      case 3:
        var t3, n, t4, t5;
        if (state0 === 3 || state0 === 0 && t2 != null)
          switch (state0) {
            case 0:
              y2 = t2.y;
            case 3:
              state0 = 0;
              t2 = x0 + 10;
              t3 = t2 + 14;
              t1.lineTo$2(ctx, t3, y1);
              t1.quadraticCurveTo$4(ctx, t2, y1, t2, $.$add$ns(y1, 14));
              t1.lineTo$2(ctx, t2, $.$sub$n(y2, 14));
              t1.quadraticCurveTo$4(ctx, t2, y2, t3, y2);
          }
    }
  },
  _outline$5: function(ctx, x, y, w, h) {
    var t1, t2, r0, r1, y1, t3, y3, clause;
    if (!this.inserted)
      $.Block.prototype._outline$5.call(this, ctx, x, y, w, h);
    else {
      t1 = this.prev;
      if (t1 != null) {
        t2 = $.getInterceptor(t1);
        t2 = typeof t1 === "object" && t1 !== null && !!t2.$isBeginBlock;
        t1 = t2;
      } else
        t1 = true;
      r0 = t1 ? 14 : 2;
      if (this.next != null) {
        t1 = this.end.next;
        t2 = $.getInterceptor(t1);
        t1 = typeof t1 === "object" && t1 !== null && !!t2.$isEndBlock || t1 == null;
      } else
        t1 = true;
      r1 = t1 ? 14 : 2;
      t1 = $.getInterceptor$ns(y);
      y1 = t1.$add(y, h);
      $.max(this.end.y, $.$add$ns(y1, 16));
      t2 = this.end;
      t3 = t2.y;
      t2.get$height;
      y3 = $.$add$ns(t3, t2._height);
      t2 = $.getInterceptor$x(ctx);
      t2.beginPath$0(ctx);
      t3 = x + r0;
      t2.moveTo$2(ctx, t3, y);
      for (clause = this; clause != null;) {
        this._subpath$2(ctx, clause);
        clause = clause.cnext;
      }
      t2.lineTo$2(ctx, x + r1, y3);
      t2.quadraticCurveTo$4(ctx, x, y3, x, $.$sub$n(y3, r1));
      t2.lineTo$2(ctx, x, t1.$add(y, r0));
      t2.quadraticCurveTo$4(ctx, x, y, t3, y);
      t2.closePath$0(ctx);
    }
  },
  addAllBlocks$0: function() {
    var b, t1;
    this.next.prev = this.end;
    this.end.next = this.next;
    this.next = this.cnext;
    this.cnext.prev = this;
    b = this.cnext;
    for (t1 = this.workspace; b != null;) {
      b.x = this.x;
      b.y = $.$add$ns(this.y, this._height);
      t1.addBlock$1(b);
      b.inserted = true;
      b = b.cnext;
    }
  },
  removeAllBlocks$0: function() {
    var t1, b, t2;
    for (t1 = this.workspace, b = this; b != null;) {
      b.get$hasPrev;
      t2 = b.prev;
      if (t2 != null)
        t2.next = b.next;
      t2 = b.next;
      if (t2 != null)
        t2.prev = b.prev;
      b.prev = null;
      b.next = null;
      t1.removeBlock$1(b);
      b = b.cnext;
    }
  },
  $isBeginBlock: true
},

EndBlock: {"": "ControlBlock;begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  step$1: function(_, program) {
    var t1 = this.begin;
    if (t1 != null)
      return t1._endStep$1(program);
    else
      return this.next;
  },
  $isEndBlock: true
},

IfBlock: {"": "BeginBlock;el,end,begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  clone$0: function(_) {
    var block = $.IfBlock$(this.workspace);
    this.copyTo$1(block);
    return block;
  },
  step$1: function(_, program) {
    var t1, t2, t3;
    t1 = program.getSensorValue$1($.get$value$x(this.param));
    t2 = program.variables;
    t3 = this.id;
    if (t1) {
      t2.$indexSet(t2, "if" + $.S(t3), "if-branch");
      return this.next;
    } else {
      t2.$indexSet(t2, "if" + $.S(t3), "else-branch");
      return this.el;
    }
  },
  IfBlock$1: function(workspace) {
    var t1, t2, t3;
    this.param = $.Parameter$(this);
    t1 = this.param;
    t2 = this.inMenu;
    t3 = this._width;
    t1.set$centerX($.$sub$n(t2 ? $.$mul$n(t3, 0.68) : t3, 35));
    $.set$values$x(this.param, ["see-bug?", "near-water?", "blocked?"]);
    t1 = new $.ElseBlock(null, null, null, workspace, null, 0, 0, 0, 0, null, null, "else", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
    t1.Block$2(workspace, "else");
    t1.color = "#c92";
    t1.begin = this;
    this.el = t1;
    this._addClause$1(this.el);
    t1 = new $.EndBlock(null, null, null, workspace, null, 0, 0, 0, 0, null, null, "", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
    t1.Block$2(workspace, "");
    t1.color = "#c92";
    t1.begin = this;
    t1._height = 18;
    this.end = t1;
    this._addClause$1(this.end);
  },
  static: {
IfBlock$: function(workspace) {
  var t1 = new $.IfBlock(null, null, null, null, null, workspace, null, 0, 0, 0, 0, null, null, "if", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
  t1.Block$2(workspace, "if");
  t1.color = "#c92";
  t1.begin = null;
  t1.begin = t1;
  t1.IfBlock$1(workspace);
  return t1;
}}

},

ElseBlock: {"": "ControlBlock;begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  step$1: function(_, program) {
    var t1 = program.variables;
    if ($.$eq(t1.$index(t1, "if" + $.S(this.begin.id)), "else-branch"))
      return this.next;
    else
      return this.begin.end.next;
  }
},

Menu: {"": "Object;workspace<,x*,y*,w?,h?,blocks,target,play,pause,btarget,frog<,buttons",
  play$0: function($receiver) {
    return this.play.call$0();
  },
  addBlock$1: function(block) {
    this.blocks.push(block);
  },
  animate$0: function() {
    this.play.animate$0();
  },
  draw$1: function(ctx) {
    var t1, t2, t3, t4, truncated, iw, ih, ix, iy, $arguments, block;
    t1 = $.getInterceptor$x(ctx);
    t1.save$0(ctx);
    t1.set$fillStyle(ctx, "rgba(0, 0, 0, 0.3)");
    t1.fillRect$4(ctx, this.x, this.y, this.w, this.h);
    t1.set$fillStyle(ctx, "#3e5d64");
    t1.set$strokeStyle(ctx, "#223333");
    t1.set$lineWidth(ctx, 3);
    t1.beginPath$0(ctx);
    t2 = this.x;
    t3 = this.y;
    t4 = this.h;
    if (t3 == null)
      throw t3.$add();
    if (t4 == null)
      throw $.iae(t4);
    t1.moveTo$2(ctx, t2 + 230, t3 + t4);
    t4 = this.x;
    t3 = this.y;
    if (t3 == null)
      throw t3.$sub();
    t1.bezierCurveTo$6(ctx, t4 + 250, t3 - 50, t4 + 160, t3 + 10, t4 - 6, t3 - 5);
    t3 = this.x;
    t4 = this.y;
    t2 = this.h;
    if (t4 == null)
      throw t4.$add();
    if (t2 == null)
      throw $.iae(t2);
    t1.lineTo$2(ctx, t3 - 6, t4 + t2);
    t1.fill$0(ctx);
    t1.stroke$0(ctx);
    t2 = $.get$width$x(this.frog);
    if (t2 !== (t2 | 0))
      return this.draw$1$bailout(1, ctx, t2, t1);
    t2 *= 0.7;
    if (isNaN(t2))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t2 == Infinity || t2 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
    iw = truncated == -0.0 ? 0 : truncated;
    t2 = $.get$height$x(this.frog);
    if (t2 !== (t2 | 0))
      return this.draw$1$bailout(2, ctx, t2, t1, iw);
    t2 *= 0.7;
    if (isNaN(t2))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t2 == Infinity || t2 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
    ih = truncated == -0.0 ? 0 : truncated;
    ix = this.x + 10;
    t2 = this.y;
    if (t2 == null)
      throw t2.$add();
    t1.drawImageScaled$5(ctx, this.frog, ix, t2 + 2, iw, ih);
    t2 = this.workspace;
    this.play.visible = !t2.running;
    this.pause.visible = t2.running;
    $.IterableMixinWorkaround_forEach(this.buttons, new $.Menu_draw_closure(ctx));
    ix += 235;
    t2 = this.y;
    t3 = this.h;
    if (t3 == null)
      throw t3.$div();
    if (t2 == null)
      throw t2.$add();
    iy = t2 + t3 / 2;
    t2 = this.blocks;
    $arguments = $.substitute(t2.$asJSArray, $.getRuntimeTypeInfo(t2));
    t3 = $arguments == null ? null : $arguments[0];
    t2 = new $.ListIterator(t2, t2.length, 0, null);
    t2.$builtinTypeInfo = [t3];
    for (; t2.moveNext$0();) {
      block = t2._liblib0$_current;
      t3 = $.getInterceptor$x(block);
      t3.set$x(block, ix);
      t4 = t3.get$height(block);
      if (typeof t4 !== "number")
        return this.draw$1$bailout(3, ctx, t2, t1, 0, block, t4, iy, ix, t3);
      t3.set$y(block, iy - t4 / 2);
      block.set$inMenu(true);
      block.draw$1(ctx);
      t3 = t3.get$width(block);
      if (typeof t3 !== "number")
        return this.draw$1$bailout(4, ctx, t2, t1, 0, 0, 0, iy, ix, t3);
      ix += t3 + 10;
    }
    t1.restore$0(ctx);
  },
  draw$1$bailout: function(state0, ctx, t2, t1, iw, block, t4, iy, ix, t3) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$x(ctx);
        t1.save$0(ctx);
        t1.set$fillStyle(ctx, "rgba(0, 0, 0, 0.3)");
        t1.fillRect$4(ctx, this.x, this.y, this.w, this.h);
        t1.set$fillStyle(ctx, "#3e5d64");
        t1.set$strokeStyle(ctx, "#223333");
        t1.set$lineWidth(ctx, 3);
        t1.beginPath$0(ctx);
        t2 = this.x;
        t3 = this.y;
        t4 = this.h;
        if (t3 == null)
          throw t3.$add();
        if (t4 == null)
          throw $.iae(t4);
        t1.moveTo$2(ctx, t2 + 230, t3 + t4);
        t4 = this.x;
        t3 = this.y;
        if (t3 == null)
          throw t3.$sub();
        t1.bezierCurveTo$6(ctx, t4 + 250, t3 - 50, t4 + 160, t3 + 10, t4 - 6, t3 - 5);
        t3 = this.x;
        t4 = this.y;
        t2 = this.h;
        if (t4 == null)
          throw t4.$add();
        if (t2 == null)
          throw $.iae(t2);
        t1.lineTo$2(ctx, t3 - 6, t4 + t2);
        t1.fill$0(ctx);
        t1.stroke$0(ctx);
        t2 = $.get$width$x(this.frog);
      case 1:
        state0 = 0;
        t2 = $.$mul$n(t2, 0.7);
        if (isNaN(t2))
          $.throwExpression(new $.UnsupportedError("NaN"));
        if (t2 == Infinity || t2 == -Infinity)
          $.throwExpression(new $.UnsupportedError("Infinity"));
        truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
        iw = truncated == -0.0 ? 0 : truncated;
        t2 = $.get$height$x(this.frog);
      case 2:
        state0 = 0;
        t2 = $.$mul$n(t2, 0.7);
        if (isNaN(t2))
          $.throwExpression(new $.UnsupportedError("NaN"));
        if (t2 == Infinity || t2 == -Infinity)
          $.throwExpression(new $.UnsupportedError("Infinity"));
        truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
        ih = truncated == -0.0 ? 0 : truncated;
        ix = this.x + 10;
        t2 = this.y;
        if (t2 == null)
          throw t2.$add();
        t1.drawImageScaled$5(ctx, this.frog, ix, t2 + 2, iw, ih);
        t2 = this.workspace;
        this.play.visible = !t2.running;
        this.pause.visible = t2.running;
        $.IterableMixinWorkaround_forEach(this.buttons, new $.Menu_draw_closure(ctx));
        ix += 235;
        t2 = this.y;
        t3 = this.h;
        if (t3 == null)
          throw t3.$div();
        if (t2 == null)
          throw t2.$add();
        iy = t2 + t3 / 2;
        t2 = this.blocks;
        $arguments = $.substitute(t2.$asJSArray, $.getRuntimeTypeInfo(t2));
        t3 = $arguments == null ? null : $arguments[0];
        t2 = new $.ListIterator(t2, t2.length, 0, null);
        t2.$builtinTypeInfo = [t3];
      default:
        var truncated, ih, $arguments;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!t2.moveNext$0())
                  break L0;
                block = t2._liblib0$_current;
                t3 = $.getInterceptor$x(block);
                t3.set$x(block, ix);
                t4 = t3.get$height(block);
              case 3:
                state0 = 0;
                t3.set$y(block, iy - $.$div$n(t4, 2));
                block.set$inMenu(true);
                block.draw$1(ctx);
                t3 = t3.get$width(block);
              case 4:
                state0 = 0;
                t3 = $.$add$ns(t3, 10);
                if (typeof t3 !== "number")
                  throw $.iae(t3);
                ix += t3;
            }
        t1.restore$0(ctx);
    }
  },
  containsTouch$1: function(c) {
    var t1, $arguments, t2;
    t1 = this.blocks;
    $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();)
      if (t1._liblib0$_current.containsTouch$1(c))
        return true;
    t1 = this.buttons;
    $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();)
      if (t1._liblib0$_current.containsTouch$1(c))
        return true;
    return false;
  },
  touchDown$1: function(c) {
    var t1, $arguments, t2, block, t3, button;
    t1 = this.blocks;
    $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();) {
      block = t1._liblib0$_current;
      if (block.containsTouch$1(c)) {
        this.target = $.clone$0$x(block);
        t2 = this.workspace;
        t3 = this.target;
        t2.blocks.push(t3);
        t2 = t2.touchables;
        t2.push(t3);
        t3.get$hasParam;
        t3 = t3.param;
        if (t3 != null)
          t2.push(t3);
        t2 = this.target;
        t2.move$2;
        t2.x = t2.x + -2;
        t3 = t2.y;
        if (typeof t3 !== "number")
          return this.touchDown$1$bailout(1, c, t2, t3, t1);
        t2.y = t3 + -8;
        this.target.touchDown$1(c);
        return true;
      }
    }
    t1 = this.buttons;
    $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();) {
      button = t1._liblib0$_current;
      if (button.containsTouch$1(c)) {
        this.btarget = button;
        this.btarget.touchDown$1(c);
        this.workspace.draw$0();
        return true;
      }
    }
    return false;
  },
  touchDown$1$bailout: function(state0, c, t2, t3, t1) {
    switch (state0) {
      case 0:
        t1 = this.blocks;
        $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
        t2 = $arguments == null ? null : $arguments[0];
        t1 = new $.ListIterator(t1, t1.length, 0, null);
        t1.$builtinTypeInfo = [t2];
      case 1:
        var $arguments, block, button;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!t1.moveNext$0())
                  break L0;
                block = t1._liblib0$_current;
              case 1:
                if (state0 === 1 || state0 === 0 && block.containsTouch$1(c))
                  switch (state0) {
                    case 0:
                      this.target = $.clone$0$x(block);
                      t2 = this.workspace;
                      t3 = this.target;
                      t2.blocks.push(t3);
                      t2 = t2.touchables;
                      t2.push(t3);
                      t3.get$hasParam;
                      t3 = t3.param;
                      if (t3 != null)
                        t2.push(t3);
                      t2 = this.target;
                      t2.move$2;
                      t2.x = t2.x + -2;
                      t3 = t2.y;
                    case 1:
                      state0 = 0;
                      t2.y = $.$add$ns(t3, -8);
                      this.target.touchDown$1(c);
                      return true;
                  }
            }
        t1 = this.buttons;
        $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
        t2 = $arguments == null ? null : $arguments[0];
        t1 = new $.ListIterator(t1, t1.length, 0, null);
        t1.$builtinTypeInfo = [t2];
        for (; t1.moveNext$0();) {
          button = t1._liblib0$_current;
          if (button.containsTouch$1(c)) {
            this.btarget = button;
            this.btarget.touchDown$1(c);
            this.workspace.draw$0();
            return true;
          }
        }
        return false;
    }
  },
  touchUp$1: function(c) {
    var t1 = this.target;
    if (t1 != null)
      t1.touchUp$1(c);
    else {
      t1 = this.btarget;
      if (t1 != null) {
        t1.touchUp$1(c);
        this.workspace.draw$0();
      }
    }
    this.target = null;
    this.btarget = null;
  },
  touchDrag$1: function(c) {
    var t1 = this.target;
    if (t1 != null)
      t1.touchDrag$1(c);
    else {
      t1 = this.btarget;
      if (t1 != null) {
        t1.touchDrag$1(c);
        this.workspace.draw$0();
      }
    }
  },
  touchSlide$1: function(c) {
  },
  Menu$5: function(workspace, x, y, w, h) {
    var bx, bspace, t1, t2, t3;
    $.set$src$x(this.frog, "images/" + this.workspace.color + "frog.png");
    bx = this.x + 95;
    bspace = $.SHOW_FASTFORWARD ? 35 : 43;
    t1 = this.y;
    t2 = this.h;
    if (t2 == null)
      throw t2.$div();
    if (t1 == null)
      throw t1.$add();
    this.play = $.Button$(bx, t1 + t2 / 2 - 15, "images/toolbar/play.png", new $.Menu_closure(this));
    t2 = this.y;
    t1 = this.h;
    if (t1 == null)
      throw t1.$div();
    if (t2 == null)
      throw t2.$add();
    this.pause = $.Button$(bx, t2 + t1 / 2 - 15, "images/toolbar/pause.png", new $.Menu_closure0(this));
    this.pause.visible = false;
    t1 = this.buttons;
    t1.push(this.play);
    t1.push(this.pause);
    bx += bspace;
    t2 = this.y;
    t3 = this.h;
    if (t3 == null)
      throw t3.$div();
    if (t2 == null)
      throw t2.$add();
    t1.push($.Button$(bx, t2 + t3 / 2 - 15, "images/toolbar/restart.png", new $.Menu_closure1(this)));
    if ($.SHOW_FASTFORWARD) {
      bx += bspace;
      t2 = this.y;
      t3 = this.h;
      if (t3 == null)
        throw t3.$div();
      if (t2 == null)
        throw t2.$add();
      t1.push($.Button$(bx, t2 + t3 / 2 - 15, "images/toolbar/fastforward.png", new $.Menu_closure2(this)));
    }
    t2 = this.y;
    t3 = this.h;
    if (t3 == null)
      throw t3.$div();
    if (t2 == null)
      throw t2.$add();
    t1.push($.Button$(bx + bspace, t2 + t3 / 2 - 15, "images/toolbar/trash.png", new $.Menu_closure3(this)));
  },
  static: {
Menu$: function(workspace, x, y, w, h) {
  var t1, t2, t3;
  t1 = $.List_List(null, $.Block);
  $.setRuntimeTypeInfo(t1, [$.Block]);
  t2 = $.ImageElement_ImageElement(null, null, null);
  t3 = $.List_List(null, $.Button);
  $.setRuntimeTypeInfo(t3, [$.Button]);
  t3 = new $.Menu(workspace, x, y, w, h, t1, null, null, null, null, t2, t3);
  t3.Menu$5(workspace, x, y, w, h);
  return t3;
}}

},

Menu_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0.get$workspace();
    t1.get$pond().playProgram$1(t1);
  },
  "+call:0:0": 0
},

Menu_closure0: {"": "Closure;this_1",
  call$0: function() {
    var t1 = this.this_1.get$workspace();
    t1.get$pond().pauseProgram$1(t1);
  },
  "+call:0:0": 0
},

Menu_closure1: {"": "Closure;this_2",
  call$0: function() {
    var t1 = this.this_2.get$workspace();
    t1.get$pond().restartProgram$1(t1);
    t1 = t1.get$bug();
    t1.reset$0(t1);
  },
  "+call:0:0": 0
},

Menu_closure2: {"": "Closure;this_3",
  call$0: function() {
    var t1 = this.this_3.get$workspace();
    t1.get$pond().fastForwardProgram$1(t1);
  },
  "+call:0:0": 0
},

Menu_closure3: {"": "Closure;this_4",
  call$0: function() {
    this.this_4.get$workspace().removeAllBlocks$0();
  },
  "+call:0:0": 0
},

Menu_draw_closure: {"": "Closure;ctx_0",
  call$1: function(button) {
    return button.draw$1(this.ctx_0);
  },
  "+call:1:0": 0
},

Button: {"": "Object;x*,y*,w?,h?,img>,down,over,visible,action,tween,_pulse@",
  get$width: function(_) {
    return this.w;
  },
  get$height: function(_) {
    return this.h;
  },
  pulse$0: function() {
    var t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.$function = 1;
    this.tween.delay = 5;
    this.tween.duration = 30;
    this.tween.repeat = 2;
    this.tween.onstart = new $.Button_pulse_closure(this);
    this.tween.onend = new $.Button_pulse_closure0(this);
    this.tween.ondelta = new $.Button_pulse_closure1(this);
    this.tween.addControlPoint$2(1, 0);
    this.tween.addControlPoint$2(0.3, 0.5);
    this.tween.addControlPoint$2(1, 1);
  },
  animate$0: function() {
    var t1 = this.tween;
    if (t1.isTweening$0()) {
      t1.animate$0();
      return true;
    } else
      return false;
  },
  draw$1: function(ctx) {
    var t1, t2, ix, iy;
    if (this.visible) {
      t1 = this.down;
      t2 = t1 && this.over;
      ix = this.x;
      if (t2)
        ix += 2;
      t1 = t1 && this.over;
      t2 = this.y;
      if (typeof t2 !== "number")
        return this.draw$1$bailout(1, ctx, t1, t2, ix);
      if (t1)
        iy = t2 + 2;
      else
        iy = t2;
      t1 = $.getInterceptor$x(ctx);
      t1.set$globalAlpha(ctx, this._pulse);
      t1.drawImage$3(ctx, this.img, ix, iy);
      t1.set$globalAlpha(ctx, 1);
    }
  },
  draw$1$bailout: function(state0, ctx, t1, t2, ix) {
    switch (state0) {
      case 0:
      case 1:
        var iy;
        if (state0 === 1 || state0 === 0 && this.visible)
          switch (state0) {
            case 0:
              t1 = this.down;
              t2 = t1 && this.over;
              ix = this.x;
              if (t2)
                ix += 2;
              t1 = t1 && this.over;
              t2 = this.y;
            case 1:
              state0 = 0;
              iy = t1 ? $.$add$ns(t2, 2) : t2;
              t1 = $.getInterceptor$x(ctx);
              t1.set$globalAlpha(ctx, this._pulse);
              t1.drawImage$3(ctx, this.img, ix, iy);
              t1.set$globalAlpha(ctx, 1);
          }
    }
  },
  containsTouch$1: function(c) {
    var t1, t2, t3, t4, t5;
    if (this.visible) {
      t1 = c.get$touchX();
      if (typeof t1 !== "number")
        return this.containsTouch$1$bailout(1, c, t1);
      t2 = this.x;
      if (t1 >= t2) {
        t3 = c.get$touchY();
        if (typeof t3 !== "number")
          return this.containsTouch$1$bailout(2, c, t3);
        t4 = this.y;
        if (typeof t4 !== "number")
          return this.containsTouch$1$bailout(3, c, t3, t4);
        if (t3 >= t4) {
          t5 = this.w;
          if (typeof t5 !== "number")
            throw $.iae(t5);
          if (t1 <= t2 + t5) {
            t1 = this.h;
            if (t1 !== (t1 | 0))
              return this.containsTouch$1$bailout(7, 0, t3, t4, t1);
            t1 = t3 <= t4 + t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  containsTouch$1$bailout: function(state0, c, t1, t2, t3) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && this.visible)
          switch (state0) {
            case 0:
              t1 = c.get$touchX();
            case 1:
              state0 = 0;
            default:
              if (state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && $.$ge$n(t1, this.x))
                switch (state0) {
                  case 0:
                    t1 = c.get$touchY();
                  case 2:
                    state0 = 0;
                    t2 = this.y;
                  case 3:
                    state0 = 0;
                  default:
                    if (state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && $.$ge$n(t1, t2))
                      switch (state0) {
                        case 0:
                          t1 = c.get$touchX();
                        case 4:
                          state0 = 0;
                          t2 = this.x;
                          t3 = this.w;
                          if (typeof t3 !== "number")
                            throw $.iae(t3);
                        default:
                          if (state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && $.$le$n(t1, t2 + t3))
                            switch (state0) {
                              case 0:
                                t1 = c.get$touchY();
                              case 5:
                                state0 = 0;
                                t2 = this.y;
                              case 6:
                                state0 = 0;
                                t3 = this.h;
                              case 7:
                                state0 = 0;
                                t3 = $.$le$n(t1, $.$add$ns(t2, t3));
                                t1 = t3;
                            }
                          else
                            t1 = false;
                      }
                    else
                      t1 = false;
                }
              else
                t1 = false;
          }
        else
          t1 = false;
        return t1;
    }
  },
  touchDown$1: function(c) {
    this.down = true;
    this.over = true;
    return this.visible;
  },
  touchUp$1: function(c) {
    if (this.down && this.over && this.visible && this.action != null)
      $.Primitives_applyFunction(this.action, [], $.Function__toMangledNames(null));
    this.down = false;
    this.over = false;
  },
  touchDrag$1: function(c) {
    if (this.down && this.visible)
      this.over = this.containsTouch$1(c);
  },
  Button$4: function(x, y, src, action) {
    var t1, t2;
    t1 = this.img;
    t2 = $.getInterceptor$x(t1);
    t2.set$src(t1, src);
    t1 = t2.get$onLoad(t1);
    t2 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.Button_closure(this), t1._useCapture);
    $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
  },
  static: {
Button$: function(x, y, src, action) {
  var t1, t2;
  t1 = $.ImageElement_ImageElement(null, null, null);
  t2 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
  t2.segments = [];
  t2 = new $.Button(x, y, null, null, t1, false, false, true, action, t2, 1);
  t2.Button$4(x, y, src, action);
  return t2;
}}

},

Button_closure: {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2;
    t1 = this.this_0;
    t2 = $.getInterceptor$x(t1);
    t1.set$w($.get$width$x(t2.get$img(t1)));
    t1.set$h($.get$height$x(t2.get$img(t1)));
  },
  "+call:1:0": 0
},

Button_pulse_closure: {"": "Closure;this_0",
  call$0: function() {
    this.this_0.set$_pulse(1);
    return 1;
  },
  "+call:0:0": 0
},

Button_pulse_closure0: {"": "Closure;this_1",
  call$0: function() {
    this.this_1.set$_pulse(1);
    return 1;
  },
  "+call:0:0": 0
},

Button_pulse_closure1: {"": "Closure;this_2",
  call$1: function(value) {
    var t1, t2;
    t1 = this.this_2;
    t2 = t1.get$_pulse();
    if (typeof value !== "number")
      throw $.iae(value);
    t1.set$_pulse(t2 + value);
  },
  "+call:1:0": 0
},

Parameter: {"": "Object;centerX@,centerY,width>,height>,downX,downY,lastX,lastY,downIndex,values',_liblib3$_index,vspace,color<,textColor,dragging<,changed@,block",
  clone$1: function(_, $parent) {
    var p = $.Parameter$($parent);
    p.centerX = this.centerX;
    p.centerY = this.centerY;
    p.width = this.width;
    p.height = this.height;
    p.values = this.values;
    p._liblib3$_index = $.$mod$n($.max(this._liblib3$_index, 0), p.values.length);
    p.color = this.color;
    p.textColor = this.textColor;
    return p;
  },
  set$index: function(_, i) {
    this._liblib3$_index = $.$mod$n($.max(i, 0), this.values.length);
  },
  $index: function(_, i) {
    var t1, t2, t3;
    if (i !== (i | 0))
      return this.$$index$bailout(1, i);
    t1 = this.values;
    t2 = t1.length;
    t3 = C.JSInt_methods.$mod(i, t2);
    if (t3 >>> 0 !== t3 || t3 >= t2)
      throw $.ioore(t3);
    return t1[t3];
  },
  $$index$bailout: function(state0, i) {
    var t1, t2;
    t1 = this.values;
    t2 = $.$mod$n(i, t1.length);
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  $indexSet: function(_, i, value) {
    var t1;
    if (typeof i !== "number")
      return this.$$indexSet$bailout(1, i, value);
    if (i >= 0 && i < this.values.length) {
      t1 = this.values;
      if (i >>> 0 !== i || i >= t1.length)
        throw $.ioore(i);
      t1[i] = value;
    }
  },
  $$indexSet$bailout: function(state0, i, value) {
    var t1 = $.getInterceptor$n(i);
    if (t1.$ge(i, 0) && t1.$lt(i, this.values.length)) {
      t1 = this.values;
      if (i >>> 0 !== i || i >= t1.length)
        throw $.ioore(i);
      t1[i] = value;
    }
  },
  get$value: function(_) {
    var t1, t2;
    t1 = this._liblib3$_index;
    if (t1 >= 0 && t1 < this.values.length) {
      t2 = this.values;
      if (t1 >>> 0 !== t1 || t1 >= t2.length)
        throw $.ioore(t1);
      return t2[t1];
    } else
      return;
  },
  _throttleIndex$1: function(i) {
    i = C.JSNumber_methods.$mod(i, this.values.length);
    if (i - C.JSNumber_methods.toInt$0(Math.floor(i)) < 0.15)
      i = C.JSNumber_methods.toInt$0(Math.floor(i));
    else if (C.JSNumber_methods.toInt$0(Math.ceil(i)) - i < 0.15)
      i = C.JSNumber_methods.toInt$0(Math.ceil(i));
    return i;
  },
  _getDragIndexY$0: function() {
    return this._throttleIndex$1(this.downIndex - $.$div$n($.$sub$n(this.lastY, this.downY), this.vspace));
  },
  _drawVerticalArrows$1: function(ctx) {
    var t1, cx, t2, cy, h, dy, y0, y1, x0, x1;
    t1 = this.block;
    cx = $.$add$ns($.$sub$n($.$add$ns(this.centerX, t1.x), 18), this.width / 2);
    t2 = this.centerY;
    t1 = t1.y;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    cy = t2 + t1;
    h = this.height;
    dy = $.$sub$n(this.lastY, this.downY);
    t1 = h / 2;
    if (typeof dy !== "number")
      throw $.iae(dy);
    y0 = cy + t1 + dy;
    y1 = cy - t1 + dy;
    t1 = $.getInterceptor$n(cx);
    x0 = $.$add$ns(t1.$sub(cx, 9.5), 4);
    x1 = $.$sub$n(t1.$add(cx, 9.5), 4);
    t1 = $.getInterceptor$x(ctx);
    t1.set$fillStyle(ctx, "white");
    t1.set$strokeStyle(ctx, "white");
    t1.beginPath$0(ctx);
    t2 = y0 + 2;
    t1.moveTo$2(ctx, x0, t2);
    t1.lineTo$2(ctx, cx, y0 + 15);
    t1.lineTo$2(ctx, x1, t2);
    t1.closePath$0(ctx);
    t2 = y1 - 2;
    t1.moveTo$2(ctx, x0, t2);
    t1.lineTo$2(ctx, cx, y1 - 15);
    t1.lineTo$2(ctx, x1, t2);
    t1.closePath$0(ctx);
    t1.fill$0(ctx);
    t1.beginPath$0(ctx);
    t1.set$lineWidth(ctx, 3);
    t1.moveTo$2(ctx, cx, y1 - 5);
    t1.lineTo$2(ctx, cx, y0 + 5);
    t1.stroke$0(ctx);
  },
  getDisplayWidth$1: function(ctx) {
    var t1, t2;
    t1 = $.getInterceptor$x(ctx);
    t1.save$0(ctx);
    t1.set$font(ctx, "400 10pt sans-serif");
    t2 = t1.measureText$1(ctx, $.toString$0(this.get$value(this))).width;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t1.restore$0(ctx);
    return 14 + t2;
  },
  draw$1: function(ctx) {
    var t1, t2, t3, x, y, w, h, t4, ty, i, t5;
    t1 = $.getInterceptor$x(ctx);
    t1.set$font(ctx, "400 10pt sans-serif");
    t1.set$textAlign(ctx, "center");
    t1.set$textBaseline(ctx, "middle");
    t2 = t1.measureText$1(ctx, $.toString$0(this.get$value(this))).width;
    if (t2 == null)
      throw t2.$add();
    this.width = t2 + 14;
    t2 = this.centerX;
    if (typeof t2 !== "number")
      return this.draw$1$bailout(1, ctx, t1, t2);
    t3 = this.block;
    x = t2 + t3.x - 18;
    t2 = this.centerY;
    t3 = t3.y;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    y = t2 + t3;
    w = this.width;
    h = this.height;
    if (this.dragging)
      this._drawVerticalArrows$1(ctx);
    t1.beginPath$0(ctx);
    t2 = h / 2;
    $.roundRect(ctx, x, y - t2, w, h, t2);
    t1.set$fillStyle(ctx, this.color);
    t1.set$strokeStyle(ctx, this.textColor);
    t1.set$lineWidth(ctx, 1);
    t1.fill$0(ctx);
    t1.stroke$0(ctx);
    t1.save$0(ctx);
    t1.clip$0(ctx);
    t1.set$fillStyle(ctx, this.textColor);
    if (this.dragging) {
      t2 = this.downIndex;
      t3 = this.lastY;
      if (typeof t3 !== "number")
        return this.draw$1$bailout(2, ctx, t1, t2, x, w, t3, y);
      t4 = this.downY;
      if (typeof t4 !== "number")
        return this.draw$1$bailout(3, ctx, t1, t2, x, w, t3, y, t4);
      t4 = this._throttleIndex$1(t2 - (t3 - t4) / this.vspace);
      t2 = t4;
    } else
      t2 = this._liblib3$_index;
    ty = y - t2 * this.vspace;
    for (t2 = x + w / 2, i = -2; t3 = this.values, t4 = t3.length, i < t4 + 1; ++i) {
      t5 = C.JSInt_methods.$mod(i, t4);
      if (t5 < 0 || t5 >= t4)
        throw $.ioore(t5);
      t1.fillText$3(ctx, $.toString$0(t3[t5]), t2, ty + i * this.vspace);
    }
    t1.restore$0(ctx);
  },
  draw$1$bailout: function(state0, ctx, t1, t2, x, w, t3, y, t4) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$x(ctx);
        t1.set$font(ctx, "400 10pt sans-serif");
        t1.set$textAlign(ctx, "center");
        t1.set$textBaseline(ctx, "middle");
        t2 = t1.measureText$1(ctx, $.toString$0(this.get$value(this))).width;
        if (t2 == null)
          throw t2.$add();
        this.width = t2 + 14;
        t2 = this.centerX;
      case 1:
        state0 = 0;
        t3 = this.block;
        x = $.$sub$n($.$add$ns(t2, t3.x), 18);
        t2 = this.centerY;
        t3 = t3.y;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        y = t2 + t3;
        w = this.width;
        h = this.height;
        if (this.dragging)
          this._drawVerticalArrows$1(ctx);
        t1.beginPath$0(ctx);
        t2 = h / 2;
        $.roundRect(ctx, x, y - t2, w, h, t2);
        t1.set$fillStyle(ctx, this.color);
        t1.set$strokeStyle(ctx, this.textColor);
        t1.set$lineWidth(ctx, 1);
        t1.fill$0(ctx);
        t1.stroke$0(ctx);
        t1.save$0(ctx);
        t1.clip$0(ctx);
        t1.set$fillStyle(ctx, this.textColor);
      default:
        var h, ty, i, t5, t6;
        if (state0 === 3 || state0 === 2 || state0 === 0 && this.dragging)
          switch (state0) {
            case 0:
              t2 = this.downIndex;
              t3 = this.lastY;
            case 2:
              state0 = 0;
              t4 = this.downY;
            case 3:
              state0 = 0;
              t4 = this._throttleIndex$1(t2 - $.$div$n($.$sub$n(t3, t4), this.vspace));
              t2 = t4;
          }
        else
          t2 = this._liblib3$_index;
        ty = y - t2 * this.vspace;
        for (t2 = w / 2, t3 = $.getInterceptor$ns(x), i = -2; t4 = this.values, t5 = t4.length, i < t5 + 1; ++i) {
          t6 = C.JSInt_methods.$mod(i, t5);
          if (t6 < 0 || t6 >= t5)
            throw $.ioore(t6);
          t1.fillText$3(ctx, $.toString$0(t4[t6]), t3.$add(x, t2), ty + i * this.vspace);
        }
        t1.restore$0(ctx);
    }
  },
  containsTouch$1: function(c) {
    var t1, t2, t3, t4, cx, t5, t6, t7;
    t1 = this.centerX;
    if (typeof t1 !== "number")
      return this.containsTouch$1$bailout(1, c, t1);
    t2 = this.block;
    t3 = t2.x;
    t4 = this.width / 2;
    cx = t1 + t3 - 18 + t4;
    t1 = t2.y;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    if (t2.get$isInProgram()) {
      t5 = c.get$touchX();
      if (typeof t5 !== "number")
        return this.containsTouch$1$bailout(2, c, t5, cx, t2);
      if (t5 >= cx - t4) {
        t4 = c.get$touchY();
        if (typeof t4 !== "number")
          return this.containsTouch$1$bailout(3, c, t4, 0, t2);
        if (t4 >= t1) {
          t6 = t2.inMenu;
          t7 = t2._width;
          if (typeof t7 !== "number")
            return this.containsTouch$1$bailout(6, c, t5, 0, t2, t3, t6, t7);
          if (t6)
            t6 = t7 * 0.68;
          else
            t6 = t7;
          t1 = t5 <= t3 + t6 && t4 <= t1 + t2._height;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  containsTouch$1$bailout: function(state0, c, t1, cx, t2, t3, t4, t5) {
    switch (state0) {
      case 0:
        t1 = this.centerX;
      case 1:
        state0 = 0;
        t2 = this.block;
        cx = $.$add$ns($.$sub$n($.$add$ns(t1, t2.x), 18), this.width / 2);
        t1 = t2.y;
        if (typeof t1 !== "number")
          throw $.iae(t1);
      default:
        if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && t2.get$isInProgram())
          switch (state0) {
            case 0:
              t1 = c.get$touchX();
            case 2:
              state0 = 0;
            default:
              if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && $.$ge$n(t1, $.$sub$n(cx, this.width / 2)))
                switch (state0) {
                  case 0:
                    t1 = c.get$touchY();
                  case 3:
                    state0 = 0;
                    t3 = t2.y;
                  case 4:
                    state0 = 0;
                  default:
                    if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && $.$ge$n(t1, t3))
                      switch (state0) {
                        case 0:
                          t1 = c.get$touchX();
                        case 5:
                          state0 = 0;
                          t3 = t2.x;
                          t4 = t2.inMenu;
                          t5 = t2._width;
                        case 6:
                          state0 = 0;
                          t4 = t4 ? $.$mul$n(t5, 0.68) : t5;
                          if (typeof t4 !== "number")
                            throw $.iae(t4);
                        default:
                          if (state0 === 8 || state0 === 7 || state0 === 0 && $.$le$n(t1, t3 + t4))
                            switch (state0) {
                              case 0:
                                t1 = c.get$touchY();
                              case 7:
                                state0 = 0;
                                t3 = t2.y;
                              case 8:
                                state0 = 0;
                                t2 = $.$le$n(t1, $.$add$ns(t3, t2._height));
                                t1 = t2;
                            }
                          else
                            t1 = false;
                      }
                    else
                      t1 = false;
                }
              else
                t1 = false;
          }
        else
          t1 = false;
        return t1;
    }
  },
  touchUp$1: function(c) {
    this._liblib3$_index = $.$mod$n($.max(C.JSNumber_methods.toInt$0(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this.dragging ? this._getDragIndexY$0() : this._liblib3$_index))), 0), this.values.length);
    if (this._liblib3$_index !== this.downIndex)
      this.changed = true;
    this.downIndex = this._liblib3$_index;
    this.dragging = false;
    this.block.workspace.draw$0();
  },
  touchDown$1: function(c) {
    this.downX = c.get$touchX();
    this.downY = c.get$touchY();
    this.lastX = c.get$touchX();
    this.lastY = c.get$touchY();
    this.downIndex = this._liblib3$_index;
    this.dragging = true;
    this.block.workspace.draw$0();
    return true;
  },
  touchDrag$1: function(c) {
    var t1, oldIndex, newIndex;
    t1 = this.dragging ? this._getDragIndexY$0() : this._liblib3$_index;
    oldIndex = C.JSNumber_methods.$mod(t1, this.values.length);
    this.lastX = c.get$touchX();
    this.lastY = c.get$touchY();
    t1 = this.dragging ? this._getDragIndexY$0() : this._liblib3$_index;
    newIndex = C.JSNumber_methods.$mod(t1, this.values.length);
    if (oldIndex !== newIndex && newIndex === C.JSNumber_methods.toInt$0(Math.floor(newIndex))) {
      this._liblib3$_index = $.$mod$n($.max(C.JSNumber_methods.toInt$0(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this.dragging ? this._getDragIndexY$0() : this._liblib3$_index))), 0), this.values.length);
      this.block.parameterChanged$1(this);
      $.Sounds_playSound("click");
    }
    this.block.workspace.draw$0();
  },
  touchSlide$1: function(c) {
  },
  Parameter$1: function(block) {
    var t1, t2, t3;
    t1 = this.block;
    t2 = t1.inMenu;
    t3 = t1._width;
    this.centerX = $.$sub$n(t2 ? $.$mul$n(t3, 0.68) : t3, 22);
    this.centerY = t1._height / 2;
    this.width = 28;
    this.height = 20;
    this.vspace = this.height * 0.85;
    this.textColor = t1.color;
  },
  static: {
Parameter$: function(block) {
  var t1 = new $.Parameter(null, null, null, null, null, null, 0, 0, 0, [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, "?"], 0, null, "white", "blue", false, false, block);
  t1.Parameter$1(block);
  return t1;
}}

},

RepeatBlock: {"": "BeginBlock;end,begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  clone$0: function(_) {
    var block = $.RepeatBlock$(this.workspace);
    this.copyTo$1(block);
    return block;
  },
  _endStep$1: function(program) {
    return this;
  },
  parameterChanged$1: function(param) {
    if ($.$eq(param.get$value(param), "near-water?") || $.$eq(param.get$value(param), "see-bug?"))
      this.text = "repeat\nuntil";
    else
      this.text = "repeat";
  },
  step$1: function(_, program) {
    var t1, p, v;
    t1 = $.get$value$x(this.param);
    if (typeof t1 === "number" && Math.floor(t1) === t1) {
      p = $.intTypeCast($.get$value$x(this.param));
      v = "repeat-counter-" + $.S(this.id);
      t1 = program.variables;
      if (!t1.containsKey$1(v) || this.param.get$changed()) {
        t1.$indexSet(t1, v, p);
        this.param.set$changed(false);
      } else
        p = $.intTypeCast(t1.$index(t1, v));
      if (p == null)
        throw p.$le();
      if (p <= 0) {
        t1.remove$1(t1, v);
        return this.end.next;
      } else {
        t1.$indexSet(t1, v, p - 1);
        return this.next;
      }
    } else if ($.$eq($.get$value$x(this.param), "forever"))
      return this.next;
    else if ($.$eq($.get$value$x(this.param), "near-water?") || $.$eq($.get$value$x(this.param), "see-bug?"))
      return program.getSensorValue$1($.get$value$x(this.param)) ? this.end.next : this.next;
    else
      return this.next;
  },
  RepeatBlock$1: function(workspace) {
    var t1, t2, t3;
    this.param = $.Parameter$(this);
    t1 = this.param;
    t2 = this.inMenu;
    t3 = this._width;
    t1.set$centerX($.$sub$n(t2 ? $.$mul$n(t3, 0.68) : t3, 7));
    $.set$values$x(this.param, ["forever", 2, 3, 4, 5, "near-water?", "see-bug?"]);
    t1 = new $.EndBlock(null, null, null, workspace, null, 0, 0, 0, 0, null, null, "", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
    t1.Block$2(workspace, "");
    t1.color = "#c92";
    t1.begin = this;
    t1._height = 18;
    this.end = t1;
    this._addClause$1(this.end);
  },
  static: {
RepeatBlock$: function(workspace) {
  var t1 = new $.RepeatBlock(null, null, null, null, workspace, null, 0, 0, 0, 0, null, null, "repeat", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
  t1.Block$2(workspace, "repeat");
  t1.color = "#c92";
  t1.begin = null;
  t1.begin = t1;
  t1.RepeatBlock$1(workspace);
  return t1;
}}

},

StartBlock: {"": "BeginBlock;_play,_pause,_liblib3$_target,end,begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  getProgramHeight$0: function() {
    var t1, t2;
    t1 = this.end;
    t2 = t1.y;
    t1.get$height;
    return $.$sub$n($.$add$ns(t2, t1._height), this.y);
  },
  animate$0: function() {
    var refresh = $.Block.prototype.animate$0.call(this);
    if (this._play.animate$0())
      return true;
    if (this._pause.animate$0())
      return true;
    return refresh;
  },
  get$isInProgram: function() {
    return true;
  },
  draw$1: function(ctx) {
    var t1, t2;
    $.BeginBlock.prototype.draw$1.call(this, ctx);
    this._play.x = this.x + 65;
    t1 = this._play;
    t2 = this.y;
    if (typeof t2 !== "number")
      return this.draw$1$bailout3(1, ctx, t1, t2);
    t1.y = t2 + this._height / 2 - 15;
    this._pause.x = this.x + 65;
    t2 = this._pause;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.draw$1$bailout3(2, ctx, t1, t2);
    t2.y = t1 + this._height / 2 - 15;
    t1 = this.workspace;
    this._play.visible = !t1.get$running();
    this._pause.visible = t1.get$running();
    this._play.draw$1(ctx);
    this._pause.draw$1(ctx);
  },
  draw$1$bailout3: function(state0, ctx, t1, t2) {
    switch (state0) {
      case 0:
        $.BeginBlock.prototype.draw$1.call(this, ctx);
        this._play.x = this.x + 65;
        t1 = this._play;
        t2 = this.y;
      case 1:
        state0 = 0;
        t1.y = $.$sub$n($.$add$ns(t2, this._height / 2), 15);
        this._pause.x = this.x + 65;
        t2 = this._pause;
        t1 = this.y;
      case 2:
        state0 = 0;
        t2.y = $.$sub$n($.$add$ns(t1, this._height / 2), 15);
        t1 = this.workspace;
        this._play.visible = !t1.get$running();
        this._pause.visible = t1.get$running();
        this._play.draw$1(ctx);
        this._pause.draw$1(ctx);
    }
  },
  isOutOfBounds$0: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.workspace;
    t2 = $.getInterceptor$x(t1);
    if (!$.$lt$n(this.y, $.$sub$n($.$sub$n($.$sub$n(t2.get$height(t1), 180), this.getProgramHeight$0()), 100)))
      if (!$.$gt$n($.$add$ns(this.y, this.getProgramHeight$0()), t2.get$height(t1))) {
        t3 = this.x;
        if (!(t3 < 0)) {
          t4 = this.inMenu;
          t5 = this._width;
          t4 = t4 ? $.$mul$n(t5, 0.68) : t5;
          if (typeof t4 !== "number")
            throw $.iae(t4);
          t1 = t2.get$width(t1);
          if (typeof t1 !== "number")
            throw $.iae(t1);
          t1 = t3 + t4 > t1;
        } else
          t1 = true;
      } else
        t1 = true;
    else
      t1 = true;
    return t1;
  },
  touchDown$1: function(c) {
    var t1;
    this.dragging = false;
    this._liblib3$_target = null;
    if (this._play.containsTouch$1(c)) {
      this._liblib3$_target = this._play;
      t1 = this._play;
      t1.touchDown$1;
      t1.down = true;
      t1.over = true;
      t1.visible;
    } else if (this._pause.containsTouch$1(c)) {
      this._liblib3$_target = this._pause;
      t1 = this._pause;
      t1.touchDown$1;
      t1.down = true;
      t1.over = true;
      t1.visible;
    }
    this._lastX = c.get$touchX();
    this._lastY = c.get$touchY();
    this.workspace.draw$0();
    return true;
  },
  touchDrag$1: function(c) {
    var t1 = this._liblib3$_target;
    if (t1 == null)
      this.moveChain$2($.$sub$n(c.get$touchX(), this._lastX), $.$sub$n(c.get$touchY(), this._lastY));
    else
      t1.touchDrag$1(c);
    this._lastX = c.get$touchX();
    this._lastY = c.get$touchY();
    this.workspace.draw$0();
  },
  touchUp$1: function(c) {
    var t1, t2;
    this.dragging = false;
    t1 = this._liblib3$_target;
    if (t1 != null)
      t1.touchUp$1(c);
    else if (this.isOutOfBounds$0()) {
      t1 = this.workspace;
      t2 = $.getInterceptor$x(t1);
      this._targetX = $.$div$n(t2.get$width(t1), 2) - 300;
      this.end._targetY = $.$add$ns($.$sub$n(t2.get$height(t1), 180), this._height);
    }
    this._liblib3$_target = null;
    this.workspace.draw$0();
  },
  StartBlock$1: function(workspace) {
    var t1, t2;
    t1 = this.workspace;
    t2 = $.getInterceptor$x(t1);
    this.x = $.$div$n(t2.get$width(t1), 2) - 300;
    this.y = $.$sub$n(t2.get$height(t1), 180);
    this.color = "green";
    this.end = $.EndProgramBlock$(workspace, this);
    this.end.y = $.$add$ns($.$add$ns($.$add$ns(this.y, this._height), 10), 20);
    this._addClause$1(this.end);
    workspace.addBlock$1(this.end);
    this.inserted = true;
    this._width = 105;
    this._play = $.Button$(this.x + 65, $.$sub$n($.$add$ns(this.y, this._height / 2), 15), "images/toolbar/play.png", new $.StartBlock_closure(workspace));
    this._pause = $.Button$(this.x + 65, $.$sub$n($.$add$ns(this.y, this._height / 2), 15), "images/toolbar/pause.png", new $.StartBlock_closure0(workspace));
    this._pause.visible = false;
  },
  $isStartBlock: true,
  static: {
StartBlock$: function(workspace) {
  var t1 = new $.StartBlock(null, null, null, null, null, null, null, workspace, null, 0, 0, 0, 0, null, null, "start", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
  t1.Block$2(workspace, "start");
  t1.color = "#c92";
  t1.begin = null;
  t1.begin = t1;
  t1.StartBlock$1(workspace);
  return t1;
}}

},

StartBlock_closure: {"": "Closure;workspace_0",
  call$0: function() {
    var t1 = this.workspace_0;
    t1.pond.playProgram$1(t1);
  },
  "+call:0:0": 0
},

StartBlock_closure0: {"": "Closure;workspace_1",
  call$0: function() {
    var t1 = this.workspace_1;
    t1.pond.pauseProgram$1(t1);
  },
  "+call:0:0": 0
},

EndProgramBlock: {"": "EndBlock;begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  step$1: function(_, program) {
    return $.AUTO_REPEAT ? this.begin : null;
  },
  touchDown$1: function(c) {
    return false;
  },
  EndProgramBlock$2: function(workspace, begin) {
    this._width = 105;
    this.inserted = true;
  },
  $isEndProgramBlock: true,
  static: {
EndProgramBlock$: function(workspace, begin) {
  var t1 = new $.EndProgramBlock(null, null, null, workspace, null, 0, 0, 0, 0, null, null, "", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
  t1.Block$2(workspace, "");
  t1.color = "#c92";
  t1.begin = begin;
  t1._height = 18;
  t1.EndProgramBlock$2(workspace, begin);
  return t1;
}}

},

StatusInfo: {"": "Object;x*,y*,w?,h?,fly,gems,captured?,workspace<,fly_count",
  animate$0: function() {
    var t1 = this.captured;
    if (t1 != null)
      return t1.animate$0();
    else
      return false;
  },
  captureGem$1: function(g) {
    var t1, t2, t3, t4, t5, t6, t7, $arguments, gem;
    t1 = $.ImageElement_ImageElement(null, null, null);
    t2 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t2.segments = [];
    t3 = $.ImageElement_ImageElement(null, null, null);
    t4 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
    t4.$builtinTypeInfo = [$.JSString, null];
    t1 = new $.Gem(null, null, null, t1, false, 0, 0, 1, 0, 1, false, t2, t3, t4, 0, 0);
    $.get$Turtle_rand();
    t2 = Math.random() * 365 >>> 0;
    t1.heading = t1.heading - -t2 / 180 * 3.141592653589793;
    t1.copy$1(g);
    t1._init$1(g.get$color());
    t1.shadowed = g.get$shadowed();
    this.captured = t1;
    t1 = this.captured;
    t2 = this.workspace;
    t3 = $.getInterceptor$x(g);
    t4 = t3.get$x(g);
    if (typeof t4 !== "number")
      return this.captureGem$1$bailout(1, g, t3, t4, t1, t2);
    t5 = t3.get$y(g);
    if (typeof t5 !== "number")
      return this.captureGem$1$bailout(2, g, t3, t4, t1, t2, t5);
    t6 = t2.iform.xform;
    t7 = t6[0];
    if (typeof t7 !== "number")
      return this.captureGem$1$bailout(3, g, t3, t4, t1, t2, t5, t6, t7);
    t7 = t4 * t7;
    t4 = t6[1];
    if (typeof t4 !== "number")
      return this.captureGem$1$bailout(4, g, t3, t4, t1, t2, t5, t6, t7);
    t6 = t6[2];
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t1.x = t7 + t5 * t4 + t6;
    t6 = this.captured;
    t4 = t3.get$x(g);
    if (typeof t4 !== "number")
      return this.captureGem$1$bailout(5, g, t3, t4, 0, t2, 0, t6);
    t3 = t3.get$y(g);
    if (typeof t3 !== "number")
      return this.captureGem$1$bailout(6, 0, t3, t4, 0, t2, 0, t6);
    t2 = t2.iform.xform;
    t5 = t2[3];
    if (typeof t5 !== "number")
      return this.captureGem$1$bailout(7, 0, t3, t4, t5, t2, 0, t6);
    t5 = t4 * t5;
    t4 = t2[4];
    if (typeof t4 !== "number")
      return this.captureGem$1$bailout(8, 0, t3, t4, t5, t2, 0, t6);
    t2 = t2[5];
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t6.y = t5 + t3 * t4 + t2;
    t1 = this.gems;
    $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();) {
      gem = t1._liblib0$_current;
      if ($.$eq(gem.get$color(), this.captured.color)) {
        t2 = $.getInterceptor$x(gem);
        this.captured.flyTo$3(t2.get$x(gem), t2.get$y(gem), new $.StatusInfo_captureGem_closure(this, gem));
      }
    }
  },
  captureGem$1$bailout: function(state0, g, t3, t4, t1, t2, t5, t6, t7) {
    switch (state0) {
      case 0:
        t1 = $.ImageElement_ImageElement(null, null, null);
        t2 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
        t2.segments = [];
        t3 = $.ImageElement_ImageElement(null, null, null);
        t4 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
        t4.$builtinTypeInfo = [$.JSString, null];
        t1 = new $.Gem(null, null, null, t1, false, 0, 0, 1, 0, 1, false, t2, t3, t4, 0, 0);
        $.get$Turtle_rand();
        t2 = Math.random() * 365 >>> 0;
        t1.heading = t1.heading - -t2 / 180 * 3.141592653589793;
        t1.copy$1(g);
        t1._init$1(g.get$color());
        t1.shadowed = g.get$shadowed();
        this.captured = t1;
        t1 = this.captured;
        t2 = this.workspace;
        t3 = $.getInterceptor$x(g);
        t4 = t3.get$x(g);
      case 1:
        state0 = 0;
        t5 = t3.get$y(g);
      case 2:
        state0 = 0;
        t6 = t2.iform.xform;
        t7 = t6[0];
      case 3:
        state0 = 0;
        t7 = $.$mul$n(t4, t7);
        t4 = t6[1];
      case 4:
        state0 = 0;
        t4 = $.$add$ns(t7, $.$mul$n(t5, t4));
        t6 = t6[2];
        if (typeof t6 !== "number")
          throw $.iae(t6);
        t1.x = $.$add$ns(t4, t6);
        t6 = this.captured;
        t4 = t3.get$x(g);
      case 5:
        state0 = 0;
        t3 = t3.get$y(g);
      case 6:
        state0 = 0;
        t2 = t2.iform.xform;
        t1 = t2[3];
      case 7:
        state0 = 0;
        t1 = $.$mul$n(t4, t1);
        t4 = t2[4];
      case 8:
        var $arguments, gem;
        state0 = 0;
        t4 = $.$add$ns(t1, $.$mul$n(t3, t4));
        t2 = t2[5];
        if (typeof t2 !== "number")
          throw $.iae(t2);
        t6.y = $.$add$ns(t4, t2);
        t1 = this.gems;
        $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
        t2 = $arguments == null ? null : $arguments[0];
        t1 = new $.ListIterator(t1, t1.length, 0, null);
        t1.$builtinTypeInfo = [t2];
        for (; t1.moveNext$0();) {
          gem = t1._liblib0$_current;
          if ($.$eq(gem.get$color(), this.captured.color)) {
            t2 = $.getInterceptor$x(gem);
            this.captured.flyTo$3(t2.get$x(gem), t2.get$y(gem), new $.StatusInfo_captureGem_closure(this, gem));
          }
        }
    }
  },
  draw$1: function(ctx) {
    var t1, t2, t3, ix, iy, $arguments, gem, t4, iw, ih;
    t1 = $.getInterceptor$x(ctx);
    t1.save$0(ctx);
    t1.set$fillStyle(ctx, "#3e5d64");
    t1.set$strokeStyle(ctx, "#223333");
    t1.set$lineWidth(ctx, 3);
    t1.beginPath$0(ctx);
    t1.moveTo$2(ctx, this.x, this.y + this.h);
    t2 = this.x;
    t3 = this.y;
    t1.bezierCurveTo$6(ctx, t2 - 15, t3 - this.h / 2, t2 + 40, t3 + 25, t2 + this.w + 6, t3);
    t1.lineTo$2(ctx, this.x + this.w + 6, this.y + this.h);
    t1.fill$0(ctx);
    t1.stroke$0(ctx);
    ix = this.x + 18;
    t3 = this.y;
    t2 = this.h;
    iy = t3 + t2 - C.JSInt_methods.$tdiv(t2, 3);
    t2 = this.gems;
    $arguments = $.substitute(t2.$asJSArray, $.getRuntimeTypeInfo(t2));
    t3 = $arguments == null ? null : $arguments[0];
    t2 = new $.ListIterator(t2, t2.length, 0, null);
    t2.$builtinTypeInfo = [t3];
    for (; t2.moveNext$0();) {
      gem = t2._liblib0$_current;
      t3 = $.getInterceptor$x(gem);
      t4 = t3.get$width(gem);
      if (typeof t4 !== "number")
        return this.draw$1$bailout(1, ctx, iy, t1, ix, t2, t3, t4, gem);
      ix += C.JSNumber_methods.$tdiv(t4, 2);
      t3.set$x(gem, ix);
      t3.set$y(gem, iy);
      gem.draw$1(ctx);
      t3 = t3.get$width(gem);
      if (typeof t3 !== "number")
        return this.draw$1$bailout(2, ctx, iy, t1, ix, t2, t3);
      ix += C.JSNumber_methods.$tdiv(t3, 2) + 10;
    }
    ix = this.x + 40;
    iy = this.y + 20;
    t2 = this.fly;
    t3 = $.getInterceptor$x(t2);
    iw = t3.get$width(t2);
    ih = t3.get$height(t2);
    t1.drawImage$3(ctx, t2, ix, iy);
    t1.set$fillStyle(ctx, "rgba(255, 255, 255, 0.7)");
    t1.set$font(ctx, "300 20px sans-serif");
    t1.set$textAlign(ctx, "left");
    t1.set$textBaseline(ctx, "bottom");
    t2 = "x  " + this.fly_count;
    if (typeof iw !== "number")
      throw $.iae(iw);
    if (typeof ih !== "number")
      throw $.iae(ih);
    t1.fillText$3(ctx, t2, ix + iw + 15, iy + ih);
    t2 = this.captured;
    if (t2 != null)
      t2.draw$1(ctx);
    t1.restore$0(ctx);
  },
  draw$1$bailout: function(state0, ctx, iy, t1, ix, t2, t3, t4, gem) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$x(ctx);
        t1.save$0(ctx);
        t1.set$fillStyle(ctx, "#3e5d64");
        t1.set$strokeStyle(ctx, "#223333");
        t1.set$lineWidth(ctx, 3);
        t1.beginPath$0(ctx);
        t1.moveTo$2(ctx, this.x, this.y + this.h);
        t2 = this.x;
        t3 = this.y;
        t1.bezierCurveTo$6(ctx, t2 - 15, t3 - this.h / 2, t2 + 40, t3 + 25, t2 + this.w + 6, t3);
        t1.lineTo$2(ctx, this.x + this.w + 6, this.y + this.h);
        t1.fill$0(ctx);
        t1.stroke$0(ctx);
        ix = this.x + 18;
        t3 = this.y;
        t2 = this.h;
        iy = t3 + t2 - C.JSInt_methods.$tdiv(t2, 3);
        t2 = this.gems;
        $arguments = $.substitute(t2.$asJSArray, $.getRuntimeTypeInfo(t2));
        t3 = $arguments == null ? null : $arguments[0];
        t2 = new $.ListIterator(t2, t2.length, 0, null);
        t2.$builtinTypeInfo = [t3];
      default:
        var $arguments, iw, ih;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!t2.moveNext$0())
                  break L0;
                gem = t2._liblib0$_current;
                t3 = $.getInterceptor$x(gem);
                t4 = t3.get$width(gem);
              case 1:
                state0 = 0;
                t4 = $.$tdiv$n(t4, 2);
                if (typeof t4 !== "number")
                  throw $.iae(t4);
                ix += t4;
                t3.set$x(gem, ix);
                t3.set$y(gem, iy);
                gem.draw$1(ctx);
                t3 = t3.get$width(gem);
              case 2:
                state0 = 0;
                t3 = $.$add$ns($.$tdiv$n(t3, 2), 10);
                if (typeof t3 !== "number")
                  throw $.iae(t3);
                ix += t3;
            }
        ix = this.x + 40;
        iy = this.y + 20;
        t2 = this.fly;
        t3 = $.getInterceptor$x(t2);
        iw = t3.get$width(t2);
        ih = t3.get$height(t2);
        t1.drawImage$3(ctx, t2, ix, iy);
        t1.set$fillStyle(ctx, "rgba(255, 255, 255, 0.7)");
        t1.set$font(ctx, "300 20px sans-serif");
        t1.set$textAlign(ctx, "left");
        t1.set$textBaseline(ctx, "bottom");
        t2 = "x  " + this.fly_count;
        if (typeof iw !== "number")
          throw $.iae(iw);
        if (typeof ih !== "number")
          throw $.iae(ih);
        t1.fillText$3(ctx, t2, ix + iw + 15, iy + ih);
        t2 = this.captured;
        if (t2 != null)
          t2.draw$1(ctx);
        t1.restore$0(ctx);
    }
  },
  StatusInfo$5: function(workspace, x, y, w, h) {
    var t1, t2, color, t3, t4, t5, t6, gem;
    $.set$src$x(this.fly, "images/dragonfly.png");
    for (t1 = $.get$Gem_colors(), t2 = new $.ListIterator(t1, 4, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = this.gems; t2.moveNext$0();) {
      color = t2._liblib0$_current;
      t3 = $.ImageElement_ImageElement(null, null, null);
      t4 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
      t4.segments = [];
      t5 = $.ImageElement_ImageElement(null, null, null);
      t6 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
      t6.$builtinTypeInfo = [$.JSString, null];
      gem = new $.Gem(null, null, null, t3, false, 0, 0, 1, 0, 1, false, t4, t5, t6, 0, 0);
      $.get$Turtle_rand();
      t3 = Math.random() * 365 >>> 0;
      gem.heading = gem.heading - -t3 / 180 * 3.141592653589793;
      gem._init$1(color);
      gem.size = 0.4;
      gem.shadowed = true;
      t1.push(gem);
    }
  },
  static: {
StatusInfo$: function(workspace, x, y, w, h) {
  var t1, t2;
  t1 = $.ImageElement_ImageElement(null, null, null);
  t2 = $.List_List(null, $.Gem);
  $.setRuntimeTypeInfo(t2, [$.Gem]);
  t2 = new $.StatusInfo(x, y, w, h, t1, t2, null, workspace, 0);
  t2.StatusInfo$5(workspace, x, y, w, h);
  return t2;
}}

},

StatusInfo_captureGem_closure: {"": "Closure;this_0,gem_1",
  call$0: function() {
    this.gem_1.set$shadowed(false);
    var t1 = this.this_0;
    t1.get$workspace().draw$0();
    t1.set$captured(null);
  },
  "+call:0:0": 0
},

WaitBlock: {"": "BeginBlock;timeout,end,begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  clone$0: function(_) {
    var block = $.WaitBlock$(this.workspace);
    this.copyTo$1(block);
    block.text = this.text;
    return block;
  },
  step$1: function(_, program) {
    var t1, v, t;
    t1 = this.timeout;
    if (t1 == null)
      if (program.getSensorValue$1("fly"))
        return this.next;
      else
        return this;
    else {
      v = $.get$value$x(t1.param);
      t = typeof v === "number" && Math.floor(v) === v ? v * 20 : $.get$Turtle_rand().nextInt$1(6000);
      t1 = program.variables;
      if (!t1.containsKey$1("timeout"))
        t1.$indexSet(t1, "timeout", t);
      if (program.getSensorValue$1($.get$value$x(this.param))) {
        t1.remove$1(t1, "timeout");
        return this.next;
      } else if ($.$le$n(t1.$index(t1, "timeout"), 0)) {
        t1.remove$1(t1, "timeout");
        t1.$indexSet(t1, "do-timeout" + $.S(this.timeout.id), true);
        return this.timeout;
      } else {
        t1.$indexSet(t1, "timeout", $.$sub$n(t1.$index(t1, "timeout"), 1));
        return this;
      }
    }
  },
  WaitBlock$1: function(workspace) {
    var t1;
    if ($.SHOW_WAIT_TIMEOUT) {
      this.timeout = $.TimeoutBlock$(workspace, this);
      this._addClause$1(this.timeout);
    }
    t1 = new $.EndBlock(null, null, null, workspace, null, 0, 0, 0, 0, null, null, "", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
    t1.Block$2(workspace, "");
    t1.color = "#c92";
    t1.begin = this;
    t1._height = 18;
    this.end = t1;
    this._addClause$1(this.end);
  },
  static: {
WaitBlock$: function(workspace) {
  var t1 = new $.WaitBlock(null, null, null, null, null, workspace, null, 0, 0, 0, 0, null, null, "wait for\nfly", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
  t1.Block$2(workspace, "wait for\nfly");
  t1.color = "#c92";
  t1.begin = null;
  t1.begin = t1;
  t1.WaitBlock$1(workspace);
  return t1;
}}

},

TimeoutBlock: {"": "ControlBlock;begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  step$1: function(_, program) {
    var v, t1;
    v = "do-timeout" + $.S(this.id);
    t1 = program.variables;
    if (t1.containsKey$1(v)) {
      t1.remove$1(t1, v);
      return this.next;
    } else
      return this.begin.end;
  },
  TimeoutBlock$2: function(workspace, begin) {
    var t1, t2, t3;
    this.param = $.Parameter$(this);
    $.set$values$x(this.param, [10, 50, 100, 150, 200, "random"]);
    t1 = this.param;
    t2 = this.inMenu;
    t3 = this._width;
    t1.set$centerX($.$sub$n(t2 ? $.$mul$n(t3, 0.68) : t3, 12));
    $.set$index$x(this.param, 5);
  },
  static: {
TimeoutBlock$: function(workspace, begin) {
  var t1 = new $.TimeoutBlock(null, null, null, workspace, null, 0, 0, 0, 0, null, null, "timeout", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
  t1.Block$2(workspace, "timeout");
  t1.color = "#c92";
  t1.begin = begin;
  t1.TimeoutBlock$2(workspace, begin);
  return t1;
}}

},

CodeWorkspace: {"": "TouchLayer;pond<,width>,height>,blocks,menu,status,start>,name>,color<,bug<,running<,ctx,touchables,touch_bindings,xform,iform",
  stopProgram$0: function() {
    this.pond.stopProgram$1(this);
  },
  removeAllBlocks$0: function() {
    var block, t1, t2, t3, b;
    this.pond.stopProgram$1(this);
    block = this.start.next;
    t1 = this.touchables;
    t2 = this.blocks;
    while (true) {
      if (block != null) {
        t3 = this.start.end;
        t3 = block == null ? t3 != null : block !== t3;
      } else
        t3 = false;
      if (!t3)
        break;
      b = block.next;
      block.prev = null;
      block.next = null;
      C.JSArray_methods.remove$1(t2, block);
      C.JSArray_methods.remove$1(t1, block);
      block.get$hasParam;
      t3 = block.param;
      if (t3 != null)
        C.JSArray_methods.remove$1(t1, t3);
      block = b;
    }
    t1 = this.start;
    t1.next = t1.end;
    t1 = this.start;
    t1.end.prev = t1;
  },
  preview$1: function(block) {
    var t1, pvalue;
    if ($.SHOW_PREVIEW) {
      t1 = block.param;
      pvalue = t1 != null ? $.get$value$x(t1) : null;
      t1 = this.pond;
      t1.pauseProgram$1(this);
      t1.previewBlock$3(this.name, block.text, pvalue);
    }
  },
  addBlock$1: function(block) {
    var t1, t2;
    this.blocks.push(block);
    t1 = this.touchables;
    t1.push(block);
    block.get$hasParam;
    t2 = block.param;
    if (t2 != null)
      t1.push(t2);
  },
  removeBlock$1: function(block) {
    var t1, t2;
    C.JSArray_methods.remove$1(this.blocks, block);
    t1 = this.touchables;
    C.JSArray_methods.remove$1(t1, block);
    block.get$hasParam;
    t2 = block.param;
    if (t2 != null)
      C.JSArray_methods.remove$1(t1, t2);
  },
  moveToTop$1: function(block) {
    var t1, t2, t3;
    t1 = this.blocks;
    C.JSArray_methods.remove$1(t1, block);
    t2 = this.touchables;
    C.JSArray_methods.remove$1(t2, block);
    block.get$hasParam;
    t3 = block.param;
    if (t3 != null)
      C.JSArray_methods.remove$1(t2, t3);
    t1.push(block);
    t2.push(block);
    block.get$hasParam;
    t1 = block.param;
    if (t1 != null)
      t2.push(t1);
  },
  isOffscreen$1: function(block) {
    var t1, t2, t3;
    t1 = block.x;
    t2 = block.inMenu;
    t3 = block._width;
    t2 = t2 ? $.$mul$n(t3, 0.68) : t3;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3 = this.width;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return t1 + t2 > t3 || block.x < 0 || $.$gt$n($.$add$ns(block.y, block._height), this.height) || $.$lt$n(block.y, 0);
  },
  isOverMenu$1: function(block) {
    var t1 = this.menu;
    t1.overlaps$1;
    return $.$ge$n($.$add$ns(block.y, block._height / 2), t1.y);
  },
  snapTogether$1: function(target) {
    var b, t1;
    b = this.findInsertionPoint$1(target);
    if (b != null) {
      b.insertBlock$1(target);
      t1 = this.start;
      t1.pulse$0;
      t1._play.pulse$0();
      t1 = this.menu;
      t1.pulsePlayButton$0;
      t1.play.pulse$0();
      return true;
    } else
      return false;
  },
  snapToEnd$1: function(target) {
    var t1;
    this.start.end.prev.insertBlock$1(target);
    t1 = this.start;
    t1.pulse$0;
    t1._play.pulse$0();
    t1 = this.menu;
    t1.pulsePlayButton$0;
    t1.play.pulse$0();
  },
  findInsertionPoint$1: function(target) {
    var block, result, t1, t2;
    block = this.start;
    for (result = null; block != null;) {
      if (block.overlaps$1(target) && target.checkSyntax$1(block))
        result = block;
      block = block.next;
    }
    if (result == null && !target.get$inserted())
      return this.start.end.prev;
    else {
      t1 = $.get$y$x(target);
      if (typeof t1 !== "number")
        return this.findInsertionPoint$1$bailout(1, result, t1);
      t2 = this.start.end.y;
      if (typeof t2 !== "number")
        return this.findInsertionPoint$1$bailout(2, result, t1, t2);
      if (t1 > t2)
        return;
      else
        return result;
    }
  },
  findInsertionPoint$1$bailout: function(state0, result, t1, t2) {
    switch (state0) {
      case 0:
        block = this.start;
        for (result = null; block != null;) {
          if (block.overlaps$1(target) && target.checkSyntax$1(block))
            result = block;
          block = block.next;
        }
      default:
        var block;
        if (state0 === 0 && result == null && !target.get$inserted())
          return this.start.end.prev;
        else
          switch (state0) {
            case 0:
              t1 = $.get$y$x(target);
            case 1:
              state0 = 0;
              t2 = this.start.end.y;
            case 2:
              state0 = 0;
              if ($.$gt$n(t1, t2))
                return;
              else
                return result;
          }
    }
  },
  animate$0: function() {
    var r, refresh, t1, $arguments, t2, t3, target, b;
    r = this.pond.isProgramRunning$1(this.name);
    refresh = r !== this.running && true;
    this.running = r;
    t1 = this.menu;
    t1.animate$0;
    t1.play.animate$0();
    t1 = this.blocks;
    $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t3 = new $.ListIterator(t1, t1.length, 0, null);
    t3.$builtinTypeInfo = [t2];
    for (; t3.moveNext$0();)
      $.set$candidate$x(t3._liblib0$_current, null);
    $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t3 = new $.ListIterator(t1, t1.length, 0, null);
    t3.$builtinTypeInfo = [t2];
    for (; t3.moveNext$0();) {
      target = t3._liblib0$_current;
      if (target.get$dragging()) {
        b = this.findInsertionPoint$1(target);
        if (b != null)
          b.candidate = target;
      }
    }
    $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();)
      if (t1._liblib0$_current.animate$0() === true)
        refresh = true;
    t1 = this.status;
    return t1 != null && t1.animate$0() ? true : refresh;
  },
  traceExecution$2: function(ctx, frog) {
    var t1, t2, t3, t4, t5, t6, t7, t8, tx;
    t1 = $.getInterceptor$x(frog);
    if (t1.get$label(frog) != null) {
      t2 = $.getInterceptor$x(ctx);
      t2.save$0(ctx);
      t3 = this.xform.xform;
      t2.transform$6(ctx, t3[0], t3[3], t3[1], t3[4], t3[2], t3[5]);
      t3 = t1.get$x(frog);
      if (typeof t3 !== "number")
        return this.traceExecution$2$bailout(1, ctx, frog, t3, t1, t2);
      t4 = t1.get$y(frog);
      if (typeof t4 !== "number")
        return this.traceExecution$2$bailout(2, ctx, frog, t3, t1, t2, t4);
      t5 = this.iform.xform;
      t6 = t5[0];
      if (typeof t6 !== "number")
        return this.traceExecution$2$bailout(3, ctx, frog, t3, t1, t2, t4, t5, t6);
      t6 = t3 * t6;
      t7 = t5[1];
      if (typeof t7 !== "number")
        return this.traceExecution$2$bailout(4, ctx, frog, t7, t1, t2, t4, t5, t6);
      t8 = t5[2];
      if (typeof t8 !== "number")
        throw $.iae(t8);
      tx = t6 + t4 * t7 + t8;
      t8 = t5[3];
      if (typeof t8 !== "number")
        return this.traceExecution$2$bailout(7, ctx, frog, t4, t1, t2, t5, t3, t8, tx);
      t8 = t3 * t8;
      t3 = t5[4];
      if (typeof t3 !== "number")
        return this.traceExecution$2$bailout(8, ctx, frog, t4, t1, t2, t5, t3, t8, tx);
      t5 = t5[5];
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t2.set$textBaseline(ctx, "top");
      t2.set$textAlign(ctx, "center");
      t2.set$fillStyle(ctx, "white");
      t2.set$font(ctx, "200 16px sans-serif");
      t2.fillText$3(ctx, t1.get$label(frog), tx, t8 + t4 * t3 + t5 + 52);
      t2.restore$0(ctx);
    }
    this.bug.target = frog.get$program().curr;
  },
  traceExecution$2$bailout: function(state0, ctx, frog, t3, t1, t2, t4, t5, t6, tx) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$x(frog);
      default:
        var ty;
        if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && t1.get$label(frog) != null)
          switch (state0) {
            case 0:
              t2 = $.getInterceptor$x(ctx);
              t2.save$0(ctx);
              t3 = this.xform.xform;
              t2.transform$6(ctx, t3[0], t3[3], t3[1], t3[4], t3[2], t3[5]);
              t3 = t1.get$x(frog);
            case 1:
              state0 = 0;
              t4 = t1.get$y(frog);
            case 2:
              state0 = 0;
              t5 = this.iform.xform;
              t6 = t5[0];
            case 3:
              state0 = 0;
              t6 = $.$mul$n(t3, t6);
              t3 = t5[1];
            case 4:
              state0 = 0;
              t3 = $.$add$ns(t6, $.$mul$n(t4, t3));
              t5 = t5[2];
              if (typeof t5 !== "number")
                throw $.iae(t5);
              tx = $.$add$ns(t3, t5);
              t5 = t1.get$x(frog);
            case 5:
              state0 = 0;
              t3 = t1.get$y(frog);
            case 6:
              state0 = 0;
              t4 = this.iform.xform;
              t6 = t4[3];
            case 7:
              state0 = 0;
              t6 = $.$mul$n(t5, t6);
              t5 = t4[4];
            case 8:
              state0 = 0;
              t5 = $.$add$ns(t6, $.$mul$n(t3, t5));
              t4 = t4[5];
              if (typeof t4 !== "number")
                throw $.iae(t4);
              ty = $.$add$ns(t5, t4);
              t2.set$textBaseline(ctx, "top");
              t2.set$textAlign(ctx, "center");
              t2.set$fillStyle(ctx, "white");
              t2.set$font(ctx, "200 16px sans-serif");
              t2.fillText$3(ctx, t1.get$label(frog), tx, $.$add$ns(ty, 52));
              t2.restore$0(ctx);
          }
        this.bug.target = frog.get$program().curr;
    }
  },
  drawBug$1: function(ctx) {
    var t1, t2;
    t1 = $.getInterceptor$x(ctx);
    t1.save$0(ctx);
    t2 = this.xform.xform;
    t1.transform$6(ctx, t2[0], t2[3], t2[1], t2[4], t2[2], t2[5]);
    this.bug.draw$1(ctx);
    t1.restore$0(ctx);
  },
  captureGem$1: function(g) {
    var t1 = this.status;
    if (t1 != null)
      t1.captureGem$1(g);
  },
  captureFly$0: function() {
    var t1 = this.status;
    if (t1 != null) {
      t1.fly_count = t1.fly_count + 1;
      this.draw$0();
    }
  },
  draw$0: function() {
    var t1, $arguments, t2, t3;
    $.save$0$x(this.ctx);
    t1 = this.xform.xform;
    $.transform$6$x(this.ctx, t1[0], t1[3], t1[1], t1[4], t1[2], t1[5]);
    $.clearRect$4$x(this.ctx, 0, 0, this.width, this.height);
    this.menu.draw$1(this.ctx);
    t1 = this.status;
    if (t1 != null)
      t1.draw$1(this.ctx);
    t1 = this.blocks;
    $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t2 = t1.moveNext$0(), t3 = this.ctx, t2;)
      t1._liblib0$_current.draw$1(t3);
    $.restore$0$x(t3);
  },
  _initMenu$0: function() {
    var t1, t2, block;
    t1 = this.menu;
    t2 = $.Block$(this, "hop");
    t1.addBlock$1;
    t1.blocks.push(t2);
    t2 = this.menu;
    t1 = $.Block$(this, "chirp");
    t2.addBlock$1;
    t2.blocks.push(t1);
    t1 = this.menu;
    t2 = $.Block$(this, "eat");
    t1.addBlock$1;
    t1.blocks.push(t2);
    if ($.SHOW_TURN_BLOCK) {
      block = $.Block$(this, "turn");
      block.param = $.Parameter$(block);
      $.set$values$x(block.param, [-90, -75, -60, -45, -30, -15, "random", 15, 30, 45, 60, 75, 90]);
      $.set$index$x(block.param, 6);
      t1 = this.menu;
      t1.addBlock$1;
      t1.blocks.push(block);
    } else {
      t1 = this.menu;
      t2 = $.Block$(this, "left");
      t1.addBlock$1;
      t1.blocks.push(t2);
      t2 = this.menu;
      t1 = $.Block$(this, "right");
      t2.addBlock$1;
      t2.blocks.push(t1);
    }
    t1 = this.menu;
    t2 = $.Block$(this, "spin");
    t1.addBlock$1;
    t1.blocks.push(t2);
    block = $.Block$(this, "hatch");
    block.color = "#b67196";
    t2 = this.menu;
    t2.addBlock$1;
    t2.blocks.push(block);
    if ($.SHOW_DIE_BLOCK) {
      block = $.Block$(this, "die");
      block.color = "#b67196";
      t1 = this.menu;
      t1.addBlock$1;
      t1.blocks.push(block);
    }
    t1 = this.menu;
    t2 = $.IfBlock$(this);
    t1.addBlock$1;
    t1.blocks.push(t2);
    t2 = this.menu;
    t1 = $.RepeatBlock$(this);
    t2.addBlock$1;
    t2.blocks.push(t1);
    if ($.SHOW_WAIT_BLOCK) {
      t1 = this.menu;
      t2 = $.WaitBlock$(this);
      t1.addBlock$1;
      t1.blocks.push(t2);
    }
  },
  CodeWorkspace$5: function(pond, width, height, $name, color) {
    this.ctx = $.getContext$1$x(document.querySelector("#" + this.name), "2d");
    this.menu = $.Menu$(this, 0, $.$sub$n(this.height, 74), this.width, 74);
    this._initMenu$0();
    this.touchables.push(this.menu);
    if ($.SHOW_STATUS)
      this.status = $.StatusInfo$(this, $.$sub$n(this.width, 150), $.$sub$n(this.height, 100), 150, 100);
    this.start = $.StartBlock$(this);
    this.addBlock$1(this.start);
    this.bug = $.TraceBug$(this.start);
    this.draw$0();
  },
  static: {
CodeWorkspace$: function(pond, width, height, $name, color) {
  var t1, t2, t3;
  t1 = $.List_List(null, $.Block);
  $.setRuntimeTypeInfo(t1, [$.Block]);
  t2 = $.List_List(null, $.Touchable);
  $.setRuntimeTypeInfo(t2, [$.Touchable]);
  t3 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t3, [$.JSInt, $.Touchable]);
  t3 = new $.CodeWorkspace(pond, width, height, t1, null, null, null, $name, color, null, false, null, t2, t3, new $.Matrix2D([1, 0, 0, 0, 1, 0, 0, 0, 1]), new $.Matrix2D([1, 0, 0, 0, 1, 0, 0, 0, 1]));
  t3.CodeWorkspace$5(pond, width, height, $name, color);
  return t3;
}}

},

Fly: {"": "Turtle;_turn@,perch,pond<,x,y,size,heading,opacity,dead,tween,img,variables,_width,_height",
  hatch$0: function() {
    var clone = $.Fly$(this.pond);
    clone.copy$1(this);
    return clone;
  },
  forward$1: function(distance) {
    var t1, t2;
    $.Turtle.prototype.forward$1.call(this, distance);
    if ($.$lt$n(this.x, -30))
      this.x = $.$add$ns(this.x, $.get$width$x(this.pond));
    if ($.$lt$n(this.y, -30))
      this.y = $.$add$ns(this.y, $.get$height$x(this.pond));
    t1 = this.pond;
    t2 = $.getInterceptor$x(t1);
    if ($.$gt$n(this.x, $.$add$ns(t2.get$width(t1), 30)))
      this.x = $.$sub$n(this.x, t2.get$width(t1));
    if ($.$gt$n(this.y, $.$add$ns(t2.get$height(t1), 30)))
      this.y = $.$sub$n(this.y, t2.get$height(t1));
  },
  animate$0: function() {
    var t1 = this.perch;
    if (t1 <= 0) {
      this.forward$1(4);
      t1 = this.get$_turn();
      this.heading = this.heading - t1 / 180 * 3.141592653589793;
      $.get$Turtle_rand();
      if (Math.random() * 100 >>> 0 > 98) {
        $.get$Turtle_rand();
        this.set$_turn(Math.random() * 6 - 3);
      } else {
        $.get$Turtle_rand();
        if (Math.random() * 1000 >>> 0 > 998 && !this.pond.inWater$2(this.x, this.y)) {
          $.get$Turtle_rand();
          this.perch = Math.random() * 100 >>> 0;
        }
      }
    } else
      this.perch = t1 - 1;
    return true;
  },
  _drawLocal$1: function(ctx) {
    var t1, t2, iw, ih;
    if (this.dead)
      return;
    t1 = this.img;
    t2 = $.getInterceptor$x(t1);
    iw = $.$mul$n(t2.get$width(t1), 0.7);
    ih = $.$mul$n(t2.get$height(t1), 0.7);
    $.drawImageScaled$5$x(ctx, t1, -iw / 2, -ih / 2, iw, ih);
  },
  Fly$1: function(pond) {
    var t1, t2;
    $.set$src$x(this.img, "images/dragonfly.png");
    t1 = this.pond;
    t2 = $.getInterceptor$x(t1);
    this.x = $.get$Turtle_rand().nextInt$1(t2.get$width(t1));
    this.y = $.get$Turtle_rand().nextInt$1(t2.get$height(t1));
  },
  static: {
Fly$: function(pond) {
  var t1, t2, t3;
  t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
  t1.segments = [];
  t2 = $.ImageElement_ImageElement(null, null, null);
  t3 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t3, [$.JSString, null]);
  t3 = new $.Fly(3, 0, pond, 0, 0, 1, 0, 1, false, t1, t2, t3, 0, 0);
  t2 = $.get$Turtle_rand().nextInt$1(365);
  t3.heading = t3.heading - -t2 / 180 * 3.141592653589793;
  t3.Fly$1(pond);
  return t3;
}}

},

Frog: {"": "Turtle;pond<,_sound@,_tongue@,_vision?,label*,ghost<,program<,prey@,_saveX,_saveY,_saveH,_lastX,_lastY,_refresh,x,y,size,heading,opacity,dead,tween,img,variables,_width,_height",
  hatch$0: function() {
    var t1, t2, t3, clone;
    t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    t2 = $.ImageElement_ImageElement(null, null, null);
    t3 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
    $.setRuntimeTypeInfo(t3, [$.JSString, null]);
    clone = new $.Frog(this.pond, -1, 0, -1, null, null, null, null, null, null, null, 0, 0, false, 0, 0, 1, 0, 1, false, t1, t2, t3, 0, 0);
    t3 = $.get$Turtle_rand().nextInt$1(365);
    clone.heading = clone.heading - -t3 / 180 * 3.141592653589793;
    $.set$src$x(clone.img, "images/bluefrog.png");
    clone.copy$1(this);
    clone.program = $.Program$copy(this.program, clone);
    return clone;
  },
  get$tongueX: function() {
    var t1, t2;
    t1 = this.x;
    t2 = this.heading;
    return $.$add$ns(t1, Math.sin(t2) * this._tongue * $.$mul$n($.get$height$x(this.img), this.size) * 1.8);
  },
  get$tongueY: function() {
    var t1, t2;
    t1 = this.y;
    t2 = this.heading;
    return $.$sub$n(t1, Math.cos(t2) * this._tongue * $.$mul$n($.get$height$x(this.img), this.size) * 1.8);
  },
  get$radius: function() {
    return $.Turtle.prototype.get$radius.call(this) * 0.75;
  },
  reset$0: function(_) {
    this.opacity = 1;
    this.ghost = null;
    this._sound = -1;
    this._vision = -1;
    this._tongue = 0;
    this.label = null;
  },
  animate$0: function() {
    var refresh, t1;
    refresh = this._refresh;
    this._refresh = false;
    t1 = this.tween;
    if (t1.isTweening$0()) {
      t1.animate$0();
      refresh = true;
    }
    return this.program.animate$0() ? true : refresh;
  },
  push$1: function(distance) {
    var t1, t2, t3, frog, angle, t4, t5;
    if (typeof distance !== "number")
      return this.push$1$bailout(1, distance);
    for (t1 = this.pond, t2 = t1.getFrogsHere$1(this), t3 = t2._computeElements$0(), t3 = new $.HashSetIterator(t2, t3, 0, null), $.setRuntimeTypeInfo(t3, [$.getRuntimeTypeArgument(t2, "HashSet", 0)]); t3.moveNext$0();) {
      frog = t3._liblib2$_current;
      angle = this.angleBetween$1(frog);
      if (Math.abs(angle) < 90) {
        angle = angle / -180 * 3.141592653589793 + this.heading;
        t2 = Math.sin(angle);
        t4 = Math.cos(angle);
        t5 = $.getInterceptor$x(frog);
        t5.set$x(frog, $.$add$ns(t5.get$x(frog), distance * t2));
        t5.set$y(frog, $.$sub$n(t5.get$y(frog), distance * t4));
        if (t1.inWater$2(t5.get$x(frog), t5.get$y(frog))) {
          t2 = $.get$Sounds_sounds();
          if (t2.$index(t2, "splash") != null) {
            t2 = $.get$Sounds_sounds();
            $.set$volume$x(t2.$index(t2, "splash"), 0.6);
            t2 = $.get$Sounds_sounds();
            $.play$0$x(t2.$index(t2, "splash"));
          }
          frog.die$0();
        }
      }
    }
  },
  push$1$bailout: function(state0, distance) {
    var t1, t2, t3, frog, angle, dx, dy, t4;
    for (t1 = this.pond, t2 = t1.getFrogsHere$1(this), t3 = t2._computeElements$0(), t3 = new $.HashSetIterator(t2, t3, 0, null), $.setRuntimeTypeInfo(t3, [$.getRuntimeTypeArgument(t2, "HashSet", 0)]), t2 = $.getInterceptor$n(distance); t3.moveNext$0();) {
      frog = t3._liblib2$_current;
      angle = this.angleBetween$1(frog);
      if (Math.abs(angle) < 90) {
        angle = angle / -180 * 3.141592653589793 + this.heading;
        dx = t2.$mul(distance, Math.sin(angle));
        dy = t2.$mul(distance, Math.cos(angle));
        t4 = $.getInterceptor$x(frog);
        t4.set$x(frog, $.$add$ns(t4.get$x(frog), dx));
        t4.set$y(frog, $.$sub$n(t4.get$y(frog), dy));
        if (t1.inWater$2(t4.get$x(frog), t4.get$y(frog))) {
          t4 = $.get$Sounds_sounds();
          if (t4.$index(t4, "splash") != null) {
            t4 = $.get$Sounds_sounds();
            $.set$volume$x(t4.$index(t4, "splash"), 0.6);
            t4 = $.get$Sounds_sounds();
            $.play$0$x(t4.$index(t4, "splash"));
          }
          frog.die$0();
        }
      }
    }
  },
  pulse$0: function() {
    var t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.$function = 1;
    this.tween.duration = 10;
    this.tween.repeat = 3;
    this.tween.ondelta = new $.Frog_pulse_closure(this);
    this.tween.addControlPoint$2(1, 0);
    this.tween.addControlPoint$2(0, 0.5);
    this.tween.addControlPoint$2(1, 1);
  },
  pathBlocked$0: function() {
    this.forward$1($.Turtle.prototype.get$radius.call(this) * 0.75 * 4);
    var t1 = this.pond.getFrogsHere$1(this)._liblib2$_length;
    this.forward$1(-($.Turtle.prototype.get$radius.call(this) * 0.75 * 4));
    return t1 !== 0;
  },
  nearWater$0: function() {
    this.forward$1($.Turtle.prototype.get$radius.call(this) * 0.75 * 4);
    var wet = this.pond.inWater$2(this.x, this.y) && true;
    this.forward$1(-($.Turtle.prototype.get$radius.call(this) * 0.75 * 4));
    return wet;
  },
  seeBug$0: function() {
    this.forward$1($.Turtle.prototype.get$radius.call(this) * 0.75 * 4);
    var bug = this.pond.getTurtleHere$2(this, C.Type_QA5);
    this.forward$1(-($.Turtle.prototype.get$radius.call(this) * 0.75 * 4));
    return bug != null;
  },
  captureGem$0: function() {
    var t1, gem;
    t1 = this.pond;
    gem = t1.getGemHere$1(this);
    if (gem != null)
      t1.captureGem$2(this, gem);
  },
  nearFly$0: function() {
    var t1, t2, t3, fly, t4, t5, t6, t7, t8, t9, d;
    for (t1 = this.pond.get$flies(), t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = this.img, t3 = $.getInterceptor$x(t1); t2.moveNext$0();) {
      fly = t2._liblib0$_current;
      if (Math.abs(this.angleBetween$1(fly)) < 10) {
        t4 = $.getInterceptor$x(fly);
        t5 = t4.get$x(fly);
        t4 = t4.get$y(fly);
        t6 = this.x;
        t7 = this.y;
        t8 = $.getInterceptor$n(t6);
        t9 = $.getInterceptor$n(t7);
        t4 = $.$add$ns($.$mul$n(t8.$sub(t6, t5), t8.$sub(t6, t5)), $.$mul$n(t9.$sub(t7, t4), t9.$sub(t7, t4)));
        if (typeof t4 !== "number")
          $.throwExpression(new $.ArgumentError(t4));
        d = Math.sqrt(t4);
        if (d > $.$mul$n(t3.get$height(t1), this.size) / 4 && d < $.$mul$n(t3.get$height(t1), this.size) * 1.5)
          return true;
      }
    }
    return false;
  },
  isBlocked$0: function() {
    this.forward$1($.Turtle.prototype.get$radius.call(this) * 0.75 * 4);
    var t1 = this.pond.getTurtleHere$2(this, C.Type_tCm);
    this.forward$1(-($.Turtle.prototype.get$radius.call(this) * 0.75 * 4));
    return t1 != null;
  },
  eatFly$0: function() {
    var t1, fly;
    t1 = this.prey;
    if (t1 == null) {
      t1 = this.pond;
      fly = t1.getFlyHere$2(this.get$tongueX(), this.get$tongueY());
      if (fly != null && !fly.get$dead()) {
        this.prey = fly.hatch$0();
        t1.captureFly$2(this, fly);
      }
    } else {
      t1.x = this.get$tongueX();
      this.prey.y = this.get$tongueY();
    }
  },
  draw$1: function(ctx) {
    var t1 = this.prey;
    if (t1 != null)
      t1.draw$1(ctx);
    $.Turtle.prototype.draw$1.call(this, ctx);
    t1 = this.ghost;
    if (t1 != null)
      t1.draw$1(ctx);
  },
  _drawLocal$1: function(ctx) {
    var t1, t2, theta, iw, ih;
    t1 = this._sound;
    if (t1 > 0) {
      t2 = $.getInterceptor$x(ctx);
      t2.set$strokeStyle(ctx, "rgba(255, 255, 255, " + $.S(1 - t1 / 175) + ")");
      t2.set$lineWidth(ctx, 4);
      t2.beginPath$0(ctx);
      t2.arc$6(ctx, 0, 0, this._sound, 0, 6.283185307179586, true);
      t2.stroke$0(ctx);
    }
    t1 = this._vision;
    if (t1 > 0) {
      theta = t1 / 180 * 3.141592653589793;
      t1 = $.$mul$n($.get$height$x(this.img), this.size);
      t2 = $.getInterceptor$x(ctx);
      t2.beginPath$0(ctx);
      t2.moveTo$2(ctx, 0, 0);
      t2.arc$6(ctx, 0, 0, t1 * 1.5, -1.5707963267948966 - theta, -1.5707963267948966 + theta, false);
      t2.closePath$0(ctx);
      t2.set$fillStyle(ctx, "rgba(255, 255, 255, 0.1)");
      t2.fill$0(ctx);
    }
    if (this._tongue > 0) {
      t1 = $.getInterceptor$x(ctx);
      t1.set$strokeStyle(ctx, "#922");
      t1.set$lineWidth(ctx, 5);
      t1.beginPath$0(ctx);
      t1.moveTo$2(ctx, 0, 0);
      t1.lineTo$2(ctx, 0, this._tongue * $.$mul$n($.get$height$x(this.img), this.size) * -1.6);
      t1.stroke$0(ctx);
    }
    t1 = this.img;
    t2 = $.getInterceptor$x(t1);
    iw = $.$mul$n(t2.get$width(t1), this.size);
    ih = $.$mul$n(t2.get$height(t1), this.size);
    $.drawImageScaled$5$x(ctx, t1, -iw / 2, -ih / 2, iw, ih);
  },
  containsTouch$1: function(c) {
    var t1, t2, t3, t4;
    t1 = c.get$touchX();
    if (typeof t1 !== "number")
      return this.containsTouch$1$bailout(1, c, t1);
    t2 = c.get$touchY();
    if (typeof t2 !== "number")
      return this.containsTouch$1$bailout(2, 0, t1, t2);
    t3 = this.x;
    if (typeof t3 !== "number")
      return this.containsTouch$1$bailout(3, 0, t1, t2, t3);
    t4 = this.y;
    if (typeof t4 !== "number")
      return this.containsTouch$1$bailout(4, 0, t1, t2, t3, t4);
    t1 = t3 - t1;
    t2 = t4 - t2;
    return Math.sqrt(t1 * t1 + t2 * t2) < this.get$radius() + 0;
  },
  containsTouch$1$bailout: function(state0, c, t1, t2, t3, t4) {
    switch (state0) {
      case 0:
        t1 = c.get$touchX();
      case 1:
        state0 = 0;
        t2 = c.get$touchY();
      case 2:
        state0 = 0;
        t3 = this.x;
      case 3:
        state0 = 0;
        t4 = this.y;
      case 4:
        var t5, t6;
        state0 = 0;
        t5 = $.getInterceptor$n(t3);
        t6 = $.getInterceptor$n(t4);
        t2 = $.$add$ns($.$mul$n(t5.$sub(t3, t1), t5.$sub(t3, t1)), $.$mul$n(t6.$sub(t4, t2), t6.$sub(t4, t2)));
        if (typeof t2 !== "number")
          $.throwExpression(new $.ArgumentError(t2));
        return Math.sqrt(t2) < this.get$radius() + 0;
    }
  },
  touchDown$1: function(c) {
    this._lastX = c.get$touchX();
    this._lastY = c.get$touchY();
    return true;
  },
  touchUp$1: function(c) {
  },
  touchDrag$1: function(c) {
  },
  touchSlide$1: function(c) {
  }
},

Frog_pulse_closure: {"": "Closure;this_0",
  call$1: function(value) {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.get$opacity();
    if (typeof value !== "number")
      throw $.iae(value);
    t2 += value;
    t1.set$opacity(t2);
    return t2;
  },
  "+call:1:0": 0
},

Gem: {"": "Turtle;color<,deltaX>,deltaY>,shadow,shadowed@,x,y,size,heading,opacity,dead,tween,img,variables,_width,_height",
  _init$1: function(color) {
    this.color = color;
    this.heading = 0;
    $.set$src$x(this.img, "images/gems/" + $.S(color) + ".png");
    $.set$src$x(this.shadow, "images/gems/" + $.S(color) + "_shadow.png");
    this.spin$0();
  },
  animate$0: function() {
    var t1 = this.tween;
    if (t1.isTweening$0()) {
      t1.animate$0();
      return true;
    } else
      return false;
  },
  spin$0: function() {
    var t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.$function = 1;
    this.tween.delay = 0;
    this.tween.duration = 25;
    this.tween.onstart = new $.Gem_spin_closure();
    this.tween.onend = new $.Gem_spin_closure0(this);
    this.tween.addControlPoint$2(0, 0);
    this.tween.addControlPoint$2(1, 1);
    this.tween.ondelta = new $.Gem_spin_closure1(this);
  },
  get$spin: function() {
    return new $.BoundClosure$0(this, "spin$0", null);
  },
  flyTo$3: function(tx, ty, onDone) {
    var t1, t2;
    t1 = $.toDouble$0$n(tx);
    t2 = this.x;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    this.deltaX = t1 - t2;
    t2 = $.toDouble$0$n(ty);
    t1 = this.y;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this.deltaY = t2 - t1;
    t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.$function = 1;
    this.tween.delay = 0;
    this.tween.duration = 25;
    this.tween.onstart = new $.Gem_flyTo_closure();
    this.tween.onend = new $.Gem_flyTo_closure0(this, onDone);
    this.tween.addControlPoint$2(0, 0);
    this.tween.addControlPoint$2(1, 1);
    this.tween.ondelta = new $.Gem_flyTo_closure1(this);
  },
  _drawLocal$1: function(ctx) {
    var t1, t2, t3, t4;
    t1 = this.shadowed;
    t2 = $.getInterceptor$x(ctx);
    t3 = this.img;
    t4 = this.size;
    if (t1) {
      t1 = $.getInterceptor$x(t3);
      t2.drawImageScaled$5(ctx, this.shadow, -$.$mul$n(t1.get$width(t3), t4) / 2, -$.$mul$n(t1.get$height(t3), this.size) / 2, $.$mul$n(t1.get$width(t3), this.size), $.$mul$n(t1.get$height(t3), this.size));
    } else {
      t1 = $.getInterceptor$x(t3);
      t2.drawImageScaled$5(ctx, t3, -$.$mul$n(t1.get$width(t3), t4) / 2, -$.$mul$n(t1.get$height(t3), this.size) / 2, $.$mul$n(t1.get$width(t3), this.size), $.$mul$n(t1.get$height(t3), this.size));
    }
  },
  static: {
"": "Gem_colors",
}

},

Gem_spin_closure: {"": "Closure;",
  call$0: function() {
  },
  "+call:0:0": 0
},

Gem_spin_closure0: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2, t3;
    t1 = $.Duration$(0, 0, 0, 5000 + $.get$Turtle_rand().nextInt$1(5000), 0, 0);
    t2 = this.this_0.get$spin();
    t2 = new $._ZoneTimer($.get$_Zone__current(), t2, null);
    t3 = t2._zone;
    t3._openCallbacks = t3._openCallbacks + 1;
    t2._timer = $._createTimer(t1, t2.get$_run());
  },
  "+call:0:0": 0
},

Gem_spin_closure1: {"": "Closure;this_1",
  call$1: function(value) {
    var t1 = this.this_1;
    if (typeof value !== "number")
      throw $.iae(value);
    t1.set$heading(t1.get$heading() - 720 * value / 180 * 3.141592653589793);
  },
  "+call:1:0": 0
},

Gem_flyTo_closure: {"": "Closure;",
  call$0: function() {
    $.Sounds_playSound("chimes");
  },
  "+call:0:0": 0
},

Gem_flyTo_closure0: {"": "Closure;this_0,onDone_1",
  call$0: function() {
    this.this_0.set$dead(true);
    this.onDone_1.call$0();
  },
  "+call:0:0": 0
},

Gem_flyTo_closure1: {"": "Closure;this_2",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.this_2;
    t2 = $.getInterceptor$x(t1);
    t3 = $.getInterceptor$n(value);
    t2.set$x(t1, $.$add$ns(t2.get$x(t1), t3.$mul(value, t2.get$deltaX(t1))));
    t2.set$y(t1, $.$add$ns(t2.get$y(t1), t3.$mul(value, t2.get$deltaY(t1))));
    if (typeof value !== "number")
      throw $.iae(value);
    t1.set$heading(t1.get$heading() - 1440 * value / 180 * 3.141592653589793);
    t3 = t2.get$size(t1);
    if (t3 == null)
      throw t3.$sub();
    t2.set$size(t1, t3 - value * 0.25);
  },
  "+call:1:0": 0
},

LilyPad: {"": "Turtle;pond<,_lastX,_lastY,refresh@,x,y,size,heading,opacity,dead,tween,img,variables,_width,_height",
  animate$0: function() {
    return this.refresh;
  },
  _drawLocal$1: function(ctx) {
    var t1, t2, iw, ih;
    t1 = this.img;
    t2 = $.getInterceptor$x(t1);
    iw = $.$mul$n(t2.get$width(t1), this.size);
    ih = $.$mul$n(t2.get$height(t1), this.size);
    $.drawImageScaled$5$x(ctx, t1, -iw / 2, -ih / 2, iw, ih);
  },
  move$2: function(dx, dy) {
    var t1, frogs;
    if (typeof dx !== "number")
      return this.move$2$bailout1(1, dx, dy);
    if (typeof dy !== "number")
      return this.move$2$bailout1(1, dx, dy);
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.move$2$bailout1(2, dx, dy, t1);
    this.x = t1 + dx;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.move$2$bailout1(3, dx, dy, t1);
    this.y = t1 + dy;
    frogs = this.pond.getFrogsHere$1(this);
    frogs.forEach$1(frogs, new $.LilyPad_move_closure(dx, dy));
  },
  move$2$bailout1: function(state0, dx, dy, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.x;
      case 2:
        state0 = 0;
        this.x = $.$add$ns(t1, dx);
        t1 = this.y;
      case 3:
        var frogs;
        state0 = 0;
        this.y = $.$add$ns(t1, dy);
        frogs = this.pond.getFrogsHere$1(this);
        frogs.forEach$1(frogs, new $.LilyPad_move_closure(dx, dy));
    }
  },
  containsTouch$1: function(c) {
    var t1, t2, t3, t4, dist, t5;
    t1 = c.get$touchX();
    if (typeof t1 !== "number")
      return this.containsTouch$1$bailout(1, c, t1);
    t2 = c.get$touchY();
    if (typeof t2 !== "number")
      return this.containsTouch$1$bailout(2, 0, t1, t2);
    t3 = this.x;
    if (typeof t3 !== "number")
      return this.containsTouch$1$bailout(3, 0, t1, t2, t3);
    t4 = this.y;
    if (typeof t4 !== "number")
      return this.containsTouch$1$bailout(4, 0, t1, t2, t3, t4);
    t1 = t3 - t1;
    t2 = t4 - t2;
    dist = Math.sqrt(t1 * t1 + t2 * t2);
    t1 = this.img;
    t2 = $.getInterceptor$x(t1);
    t3 = t2.get$width(t1);
    if (t3 !== (t3 | 0))
      return this.containsTouch$1$bailout(5, 0, t1, t2, t3, 0, dist);
    t4 = this.size;
    if (t4 == null)
      return this.containsTouch$1$bailout(6, 0, t1, t2, t3, t4, dist);
    t3 *= t4;
    t5 = t2.get$height(t1);
    if (t5 !== (t5 | 0))
      return this.containsTouch$1$bailout(7, 0, t1, t2, t5, t3, dist);
    t4 = t5 * t4;
    return dist < (t3 < t4 ? t3 / 2 : t4 / 2);
  },
  containsTouch$1$bailout: function(state0, c, t1, t2, t3, t4, dist, t5) {
    switch (state0) {
      case 0:
        t1 = c.get$touchX();
      case 1:
        state0 = 0;
        t2 = c.get$touchY();
      case 2:
        state0 = 0;
        t3 = this.x;
      case 3:
        state0 = 0;
        t4 = this.y;
      case 4:
        state0 = 0;
        t5 = $.getInterceptor$n(t3);
        t6 = $.getInterceptor$n(t4);
        t2 = $.$add$ns($.$mul$n(t5.$sub(t3, t1), t5.$sub(t3, t1)), $.$mul$n(t6.$sub(t4, t2), t6.$sub(t4, t2)));
        if (typeof t2 !== "number")
          $.throwExpression(new $.ArgumentError(t2));
        dist = Math.sqrt(t2);
        t1 = this.img;
        t2 = $.getInterceptor$x(t1);
        t3 = t2.get$width(t1);
      case 5:
        state0 = 0;
        t4 = this.size;
      case 6:
        state0 = 0;
        t4 = $.$mul$n(t3, t4);
        t3 = t2.get$height(t1);
      case 7:
        state0 = 0;
        t5 = this.size;
      case 8:
        state0 = 0;
        t5 = t4 < $.$mul$n(t3, t5);
        t3 = this.size;
      case 9:
        state0 = 0;
      default:
        var t6;
        if (state0 === 10 || state0 === 0 && t5)
          switch (state0) {
            case 0:
              t1 = t2.get$width(t1);
            case 10:
              state0 = 0;
              t3 = $.$mul$n(t1, t3) / 2;
              t1 = t3;
          }
        else
          switch (state0) {
            case 0:
              t1 = t2.get$height(t1);
            case 11:
              state0 = 0;
              t3 = $.$mul$n(t1, t3) / 2;
              t1 = t3;
          }
        return dist < t1;
    }
  },
  touchDown$1: function(c) {
    this._lastX = c.get$touchX();
    this._lastY = c.get$touchY();
    return $.DRAG_LILYPADS;
  },
  touchUp$1: function(c) {
  },
  touchDrag$1: function(c) {
    this.move$2($.$sub$n(c.get$touchX(), this._lastX), $.$sub$n(c.get$touchY(), this._lastY));
    this._lastX = c.get$touchX();
    this._lastY = c.get$touchY();
    this.refresh = true;
  },
  touchSlide$1: function(c) {
  }
},

LilyPad_move_closure: {"": "Closure;dx_0,dy_1",
  call$1: function(frog) {
    return frog.move$2(this.dx_0, this.dy_1);
  },
  "+call:1:0": 0
},

Matrix2D: {"": "Object;xform",
  invert$0: function() {
    var i, m, det, invDet, t1;
    i = new $.Matrix2D([1, 0, 0, 0, 1, 0, 0, 0, 1]);
    m = this.xform;
    det = this.get$determinant();
    if ($.$eq(det, 0))
      return i;
    if (typeof det !== "number")
      throw $.iae(det);
    invDet = 1 / det;
    t1 = i.xform;
    t1[0] = invDet * ($.$mul$n(m[4], m[8]) - $.$mul$n(m[7], m[5]));
    t1[3] = invDet * ($.$mul$n(m[6], m[5]) - $.$mul$n(m[3], m[8]));
    t1[6] = invDet * ($.$mul$n(m[3], m[7]) - $.$mul$n(m[6], m[4]));
    t1[1] = invDet * ($.$mul$n(m[7], m[2]) - $.$mul$n(m[1], m[8]));
    t1[4] = invDet * ($.$mul$n(m[0], m[8]) - $.$mul$n(m[6], m[2]));
    t1[7] = invDet * ($.$mul$n(m[6], m[1]) - $.$mul$n(m[0], m[7]));
    t1[2] = invDet * ($.$mul$n(m[1], m[5]) - $.$mul$n(m[4], m[2]));
    t1[5] = invDet * ($.$mul$n(m[3], m[2]) - $.$mul$n(m[0], m[5]));
    t1[8] = invDet * ($.$mul$n(m[0], m[4]) - $.$mul$n(m[3], m[1]));
    return i;
  },
  get$determinant: function() {
    var t1 = this.xform;
    return $.$mul$n(t1[0], $.$mul$n(t1[4], t1[8]) - $.$mul$n(t1[7], t1[5])) - $.$mul$n(t1[3], $.$mul$n(t1[1], t1[8]) - $.$mul$n(t1[7], t1[2])) + $.$mul$n(t1[6], $.$mul$n(t1[1], t1[5]) - $.$mul$n(t1[4], t1[2]));
  },
  setTransform$6: function(_, m11, m12, m21, m22, dx, dy) {
    var t1 = this.xform;
    t1[0] = m11;
    t1[1] = m21;
    t1[2] = dx;
    t1[3] = m12;
    t1[4] = m22;
    t1[5] = dy;
    t1[6] = 0;
    t1[7] = 0;
    t1[8] = 1;
  },
  transformContact$1: function(c) {
    var t1, tx, ty;
    t1 = this.xform;
    tx = $.$add$ns($.$add$ns($.$mul$n(c.get$touchX(), t1[0]), $.$mul$n(c.get$touchY(), t1[1])), t1[2]);
    ty = $.$add$ns($.$add$ns($.$mul$n(c.get$touchX(), t1[3]), $.$mul$n(c.get$touchY(), t1[4])), t1[5]);
    c.set$touchX(tx);
    c.set$touchY(ty);
  },
  transformX$2: function(x, y) {
    var t1 = this.xform;
    return $.$add$ns($.$add$ns($.$mul$n(x, t1[0]), $.$mul$n(y, t1[1])), t1[2]);
  },
  transformY$2: function(x, y) {
    var t1 = this.xform;
    return $.$add$ns($.$add$ns($.$mul$n(x, t1[3]), $.$mul$n(y, t1[4])), t1[5]);
  }
},

FrogPond: {"": "TouchLayer;canvas,layer0,layer1,layer2<,tmanager,workspaces<,width>,height>,turtles,gems,flies<,frogs,pads,lattice,play_state,_countdown@,pond<,touchables,touch_bindings,xform,iform",
  addRandomFrog$1: function(workspace) {
    var i, t1, max, x, y, t2, t3, frog, t4, t5, milliseconds;
    for (i = 0; i < 20; ++i) {
      $.get$Turtle_rand();
      t1 = this.width;
      if (t1 !== (t1 | 0))
        return this.addRandomFrog$1$bailout(1, workspace, t1, i);
      max = t1 - 200;
      if (max < 0)
        $.throwExpression(new $.ArgumentError("negative max: " + max));
      if (max > 4294967295)
        max = 4294967295;
      x = (Math.random() * max >>> 0) + 100;
      $.get$Turtle_rand();
      t1 = this.height;
      if (t1 !== (t1 | 0))
        return this.addRandomFrog$1$bailout(2, workspace, t1, i, x);
      max = t1 - 300;
      if (max < 0)
        $.throwExpression(new $.ArgumentError("negative max: " + max));
      if (max > 4294967295)
        max = 4294967295;
      y = (Math.random() * max >>> 0) + 150;
      if (!this.inWater$2(x, y)) {
        t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
        t1.segments = [];
        t2 = $.ImageElement_ImageElement(null, null, null);
        t3 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
        t3.$builtinTypeInfo = [$.JSString, null];
        frog = new $.Frog(this, -1, 0, -1, null, null, null, null, null, null, null, 0, 0, false, 0, 0, 1, 0, 1, false, t1, t2, t3, 0, 0);
        $.get$Turtle_rand();
        t1 = Math.random() * 365 >>> 0;
        frog.heading = frog.heading - -t1 / 180 * 3.141592653589793;
        t1 = frog.img;
        t2 = $.getInterceptor$x(t1);
        t2.set$src(t1, "images/bluefrog.png");
        t3 = frog.variables;
        t3.$indexSet(t3, "workspace", workspace.name);
        frog.x = x;
        frog.y = y;
        t3 = workspace.start;
        t4 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
        t4.$builtinTypeInfo = [$.JSString, null];
        t5 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
        t5.segments = [];
        frog.program = new $.Program(frog, t3, null, false, t4, t5);
        t2.set$src(t1, "images/" + workspace.color + "frog.png");
        this.frogs.push(frog);
        this.turtles.push(frog);
        this.touchables.push(frog);
        return;
      }
    }
    t1 = new $._ZoneTimer($.get$_Zone__current(), new $.FrogPond_addRandomFrog_closure(this, workspace), null);
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    t2 = t1.get$_run();
    milliseconds = C.JSNumber_methods.$tdiv(C.Duration_2000000._duration, 1000);
    t1._timer = $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, t2);
  },
  addRandomFrog$1$bailout: function(state0, workspace, t1, i, x) {
    switch (state0) {
      case 0:
        i = 0;
      default:
        var max, y, t2, t3, frog, t4, t5, milliseconds;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < 20))
                  break L0;
                $.get$Turtle_rand();
                t1 = this.width;
              case 1:
                state0 = 0;
                max = $.$sub$n(t1, 200);
                if (max < 0)
                  $.throwExpression(new $.ArgumentError("negative max: " + $.S(max)));
                if (max > 4294967295)
                  max = 4294967295;
                x = (Math.random() * max >>> 0) + 100;
                $.get$Turtle_rand();
                t1 = this.height;
              case 2:
                state0 = 0;
                max = $.$sub$n(t1, 300);
                if (max < 0)
                  $.throwExpression(new $.ArgumentError("negative max: " + $.S(max)));
                if (max > 4294967295)
                  max = 4294967295;
                y = (Math.random() * max >>> 0) + 150;
                if (!this.inWater$2(x, y)) {
                  t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
                  t1.segments = [];
                  t2 = $.ImageElement_ImageElement(null, null, null);
                  t3 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
                  t3.$builtinTypeInfo = [$.JSString, null];
                  frog = new $.Frog(this, -1, 0, -1, null, null, null, null, null, null, null, 0, 0, false, 0, 0, 1, 0, 1, false, t1, t2, t3, 0, 0);
                  $.get$Turtle_rand();
                  t1 = Math.random() * 365 >>> 0;
                  frog.heading = frog.heading - -t1 / 180 * 3.141592653589793;
                  t1 = frog.img;
                  t2 = $.getInterceptor$x(t1);
                  t2.set$src(t1, "images/bluefrog.png");
                  t3 = frog.variables;
                  t3.$indexSet(t3, "workspace", workspace.name);
                  frog.x = x;
                  frog.y = y;
                  t3 = workspace.start;
                  t4 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
                  t4.$builtinTypeInfo = [$.JSString, null];
                  t5 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
                  t5.segments = [];
                  frog.program = new $.Program(frog, t3, null, false, t4, t5);
                  t2.set$src(t1, "images/" + workspace.color + "frog.png");
                  this.frogs.push(frog);
                  this.turtles.push(frog);
                  this.touchables.push(frog);
                  return;
                }
                ++i;
            }
        t1 = new $._ZoneTimer($.get$_Zone__current(), new $.FrogPond_addRandomFrog_closure(this, workspace), null);
        t2 = t1._zone;
        t2._openCallbacks = t2._openCallbacks + 1;
        t2 = t1.get$_run();
        milliseconds = C.JSNumber_methods.$tdiv(C.Duration_2000000._duration, 1000);
        t1._timer = $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, t2);
    }
  },
  addHomeFrog$1: function(workspace) {
    var t1, t2, t3, frog, t4, fx, fy, t5;
    t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    t2 = $.ImageElement_ImageElement(null, null, null);
    t3 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
    $.setRuntimeTypeInfo(t3, [$.JSString, null]);
    frog = new $.Frog(this, -1, 0, -1, null, null, null, null, null, null, null, 0, 0, false, 0, 0, 1, 0, 1, false, t1, t2, t3, 0, 0);
    t3 = $.get$Turtle_rand().nextInt$1(365);
    frog.heading = frog.heading - -t3 / 180 * 3.141592653589793;
    t3 = frog.img;
    t2 = $.getInterceptor$x(t3);
    t2.set$src(t3, "images/bluefrog.png");
    t1 = $.getInterceptor$x(workspace);
    t4 = frog.variables;
    t4.$indexSet(t4, "workspace", t1.get$name(workspace));
    fx = $.$div$n(t1.get$width(workspace), 2);
    fy = $.$sub$n(t1.get$height(workspace), 290);
    frog.x = workspace.objectToWorldX$2(fx, fy);
    frog.y = workspace.objectToWorldY$2(fx, fy);
    frog.heading = workspace.objectToWorldTheta$1(0);
    t1 = t1.get$start(workspace);
    t4 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
    $.setRuntimeTypeInfo(t4, [$.JSString, null]);
    t5 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t5.segments = [];
    frog.program = new $.Program(frog, t1, null, false, t4, t5);
    t2.set$src(t3, "images/" + $.S(workspace.get$color()) + "frog.png");
    this.addFrog$1(frog);
    return frog;
  },
  addFrog$1: function(frog) {
    this.frogs.push(frog);
    this.turtles.push(frog);
    this.touchables.push(frog);
  },
  getFrogCount$1: function(workspaceName) {
    var t1, $arguments, t2, count;
    if (workspaceName == null)
      return this.frogs.length;
    else {
      t1 = this.frogs;
      $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
      t2 = $arguments == null ? null : $arguments[0];
      t1 = new $.ListIterator(t1, t1.length, 0, null);
      t1.$builtinTypeInfo = [t2];
      count = 0;
      for (; t1.moveNext$0();)
        if ($.$eq($.$index$asx(t1._liblib0$_current, "workspace"), workspaceName))
          ++count;
      return count;
    }
  },
  getFocalFrog$1: function(workspace) {
    var t1, $arguments, t2, frog;
    t1 = this.frogs;
    $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();) {
      frog = t1._liblib0$_current;
      if ($.$eq($.$index$asx(frog, "workspace"), workspace))
        return frog;
    }
    return;
  },
  removeDeadFrogs$0: function() {
    var t1, i, t2, t3, count, t4;
    for (t1 = this.frogs, i = t1.length - 1, t2 = this.turtles, t3 = this.touchables, count = 0; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t4 = t1[i];
      if (t4.get$dead()) {
        C.JSArray_methods.remove$1(t1, t4);
        C.JSArray_methods.remove$1(t2, t4);
        C.JSArray_methods.remove$1(t3, t4);
        ++count;
      }
    }
    return count > 0;
  },
  getFrogsHere$1: function(turtle) {
    var aset, t1, t2, f;
    aset = new $.HashSet(0, null, null, null, null);
    $.setRuntimeTypeInfo(aset, [$.Frog]);
    for (t1 = this.frogs, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      f = t2._liblib0$_current;
      if (!$.$eq(f, turtle) && f.overlapsTurtle$1(turtle))
        aset.add$1(aset, f);
    }
    return aset;
  },
  getFrogHere$2: function(x, y) {
    var t1, $arguments, t2, frog;
    t1 = this.frogs;
    $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();) {
      frog = t1._liblib0$_current;
      if (frog.overlapsPoint$2(x, y))
        return frog;
    }
    return;
  },
  previewBlock$3: function(workspace, cmd, param) {
    var t1, t2, frog;
    for (t1 = this.frogs, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      frog = t2._liblib0$_current;
      if ($.$eq($.$index$asx(frog, "workspace"), workspace))
        frog.get$program().doCommand$3(cmd, param, true);
    }
  },
  playProgram$1: function(workspace) {
    var t1, t2, t3, frog;
    t1 = workspace.name;
    if (this.getFrogCount$1(t1) === 0)
      this.addHomeFrog$1(workspace);
    for (t2 = this.frogs, t3 = new $.ListIterator(t2, t2.length, 0, null), $.setRuntimeTypeInfo(t3, [$.getRuntimeTypeArgument(t2, "JSArray", 0)]); t3.moveNext$0();) {
      frog = t3._liblib0$_current;
      if ($.$eq($.$index$asx(frog, "workspace"), t1)) {
        t2 = frog.get$program();
        t2.play$0;
        if (t2.curr == null) {
          t2.curr = t2.start;
          t2.running = false;
        }
        t2.running = true;
      }
    }
  },
  pauseProgram$1: function(workspace) {
    var t1, t2, frog, t3;
    this.play_state = 1;
    for (t1 = this.frogs, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = workspace.name; t2.moveNext$0();) {
      frog = t2._liblib0$_current;
      if ($.$eq($.$index$asx(frog, "workspace"), t1)) {
        t3 = frog.get$program();
        t3.pause$0;
        t3.running = false;
      }
    }
  },
  stopProgram$1: function(workspace) {
    var t1, t2, frog, t3;
    for (t1 = this.frogs, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = workspace.name; t2.moveNext$0();) {
      frog = t2._liblib0$_current;
      if ($.$eq($.$index$asx(frog, "workspace"), t1)) {
        t3 = frog.get$program();
        t3.restart$0;
        t3.curr = t3.start;
        t3.running = false;
      }
    }
  },
  restartProgram$1: function(workspace) {
    var t1, $arguments, t2, frog;
    t1 = this.frogs;
    $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    t2 = $.getInterceptor$x(workspace);
    for (; t1.moveNext$0();) {
      frog = t1._liblib0$_current;
      if ($.$eq($.$index$asx(frog, "workspace"), t2.get$name(workspace)))
        frog.die$0();
    }
    this.addHomeFrog$1(workspace).pulse$0();
  },
  fastForwardProgram$1: function(workspace) {
    var t1 = this.play_state;
    if (t1 <= 0)
      this.play_state = 1;
    else if (t1 < 64)
      this.play_state = t1 * 2;
    else
      this.play_state = 1;
    this.drawForeground$0();
  },
  isProgramRunning$1: function(workspaceName) {
    var t1, t2, running, frog;
    for (t1 = this.frogs, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]), running = false; t2.moveNext$0();) {
      frog = t2._liblib0$_current;
      if ($.$eq($.$index$asx(frog, "workspace"), workspaceName)) {
        t1 = frog.get$program();
        t1.get$isRunning;
        if (t1.running && t1.curr != null)
          running = true;
      }
    }
    return running;
  },
  addLilyPad$3: function(lx, ly, ls) {
    var t1, t2, t3, pad;
    t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    t2 = $.ImageElement_ImageElement(null, null, null);
    t3 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
    $.setRuntimeTypeInfo(t3, [$.JSString, null]);
    pad = new $.LilyPad(this, null, null, false, 0, 0, 1, 0, 1, false, t1, t2, t3, 0, 0);
    t3 = $.get$Turtle_rand().nextInt$1(365);
    pad.heading = pad.heading - -t3 / 180 * 3.141592653589793;
    $.set$src$x(pad.img, "images/lilypad.png");
    pad.x = lx;
    pad.y = ly;
    pad.size = ls;
    pad.refresh = true;
    this.pads.push(pad);
    this.turtles.push(pad);
    this.touchables.push(pad);
  },
  addFly$0: function() {
    var t1, fly;
    t1 = this.flies;
    if (t1.length < $.MAX_FLIES) {
      fly = $.Fly$(this);
      t1.push(fly);
      this.turtles.push(fly);
    }
  },
  addBeetle$0: function() {
    var t1, beetle;
    t1 = this.flies;
    if (t1.length < $.MAX_BEETLES) {
      beetle = $.Beetle$(this);
      t1.push(beetle);
      this.turtles.push(beetle);
    }
  },
  removeDeadFlies$0: function() {
    var t1, i, t2, t3;
    for (t1 = this.flies, i = t1.length - 1, t2 = this.turtles; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t3 = t1[i];
      if (t3.dead) {
        C.JSArray_methods.remove$1(t2, t3);
        C.JSArray_methods.removeAt$1(t1, i);
      }
    }
  },
  getTurtlesHere$2: function(target, type) {
    var aset, t1, t2, t;
    aset = new $.HashSet(0, null, null, null, null);
    $.setRuntimeTypeInfo(aset, [$.Turtle]);
    for (t1 = this.turtles, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      t = t2._liblib0$_current;
      t1 = $.getInterceptor(t);
      if (!t1.$eq(t, target)) {
        t1 = t1.get$runtimeType(t);
        t1 = t1.$eq(t1, type) && !t.get$dead() && t.overlapsTurtle$1(target);
      } else
        t1 = false;
      if (t1)
        aset.add$1(aset, t);
    }
    return aset;
  },
  getTurtleHere$2: function(target, type) {
    var aset = this.getTurtlesHere$2(target, type);
    if (aset._liblib2$_length === 0)
      return;
    else
      return aset.get$first(aset);
  },
  getFlyHere$2: function(x, y) {
    var t1, t2, fly;
    for (t1 = this.flies, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      fly = t2._liblib0$_current;
      if (fly.overlapsPoint$3(x, y, 30))
        return fly;
    }
    return;
  },
  captureFly$2: function(frog, fly) {
    var t1, t2, workspace;
    for (t1 = this.workspaces, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = frog.variables; t2.moveNext$0();) {
      workspace = t2._liblib0$_current;
      if ($.$eq($.get$name$x(workspace), t1.$index(t1, "workspace"))) {
        workspace.captureFly$0();
        fly.erase$1(this.layer2);
        fly.die$0();
        this.addBeetle$0();
      }
    }
  },
  addGem$0: function() {
    var i, t1, max, x, y, t2, t3, t4, gem, r, milliseconds;
    for (i = 0; i < 25; ++i) {
      $.get$Turtle_rand();
      t1 = this.width;
      if (t1 !== (t1 | 0))
        return this.addGem$0$bailout(1, i, t1);
      max = t1 - 100;
      if (max < 0)
        $.throwExpression(new $.ArgumentError("negative max: " + max));
      if (max > 4294967295)
        max = 4294967295;
      x = (Math.random() * max >>> 0) + 50;
      $.get$Turtle_rand();
      t1 = this.height;
      if (t1 !== (t1 | 0))
        return this.addGem$0$bailout(2, i, t1, x);
      max = t1 - 200;
      if (max < 0)
        $.throwExpression(new $.ArgumentError("negative max: " + max));
      if (max > 4294967295)
        max = 4294967295;
      y = (Math.random() * max >>> 0) + 100;
      if (!this.inWater$2(x, y) && this.getFrogHere$2(x, y) == null) {
        t1 = $.ImageElement_ImageElement(null, null, null);
        t2 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
        t2.segments = [];
        t3 = $.ImageElement_ImageElement(null, null, null);
        t4 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
        t4.$builtinTypeInfo = [$.JSString, null];
        gem = new $.Gem(null, null, null, t1, false, 0, 0, 1, 0, 1, false, t2, t3, t4, 0, 0);
        $.get$Turtle_rand();
        t1 = Math.random() * 365 >>> 0;
        gem.heading = gem.heading - -t1 / 180 * 3.141592653589793;
        $.get$Turtle_rand();
        $.get$Gem_colors();
        r = Math.random() * 4 >>> 0;
        t1 = $.get$Gem_colors();
        if (r < 0 || r >= 4)
          throw $.ioore(r);
        gem._init$1(t1[r]);
        gem.x = x;
        gem.y = y;
        gem.size = 0.75;
        this.gems.push(gem);
        this.turtles.push(gem);
        return;
      }
    }
    t1 = this.get$addGem();
    t1 = new $._ZoneTimer($.get$_Zone__current(), t1, null);
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    t2 = t1.get$_run();
    milliseconds = C.JSNumber_methods.$tdiv(C.Duration_4000000._duration, 1000);
    t1._timer = $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, t2);
  },
  addGem$0$bailout: function(state0, i, t1, x) {
    switch (state0) {
      case 0:
        i = 0;
      default:
        var max, y, t2, t3, t4, gem, r, milliseconds;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < 25))
                  break L0;
                $.get$Turtle_rand();
                t1 = this.width;
              case 1:
                state0 = 0;
                max = $.$sub$n(t1, 100);
                if (max < 0)
                  $.throwExpression(new $.ArgumentError("negative max: " + $.S(max)));
                if (max > 4294967295)
                  max = 4294967295;
                x = (Math.random() * max >>> 0) + 50;
                $.get$Turtle_rand();
                t1 = this.height;
              case 2:
                state0 = 0;
                max = $.$sub$n(t1, 200);
                if (max < 0)
                  $.throwExpression(new $.ArgumentError("negative max: " + $.S(max)));
                if (max > 4294967295)
                  max = 4294967295;
                y = (Math.random() * max >>> 0) + 100;
                if (!this.inWater$2(x, y) && this.getFrogHere$2(x, y) == null) {
                  t1 = $.ImageElement_ImageElement(null, null, null);
                  t2 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
                  t2.segments = [];
                  t3 = $.ImageElement_ImageElement(null, null, null);
                  t4 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
                  t4.$builtinTypeInfo = [$.JSString, null];
                  gem = new $.Gem(null, null, null, t1, false, 0, 0, 1, 0, 1, false, t2, t3, t4, 0, 0);
                  $.get$Turtle_rand();
                  t1 = Math.random() * 365 >>> 0;
                  gem.heading = gem.heading - -t1 / 180 * 3.141592653589793;
                  $.get$Turtle_rand();
                  $.get$Gem_colors();
                  r = Math.random() * 4 >>> 0;
                  t1 = $.get$Gem_colors();
                  if (r < 0 || r >= 4)
                    throw $.ioore(r);
                  gem._init$1(t1[r]);
                  gem.x = x;
                  gem.y = y;
                  gem.size = 0.75;
                  this.gems.push(gem);
                  this.turtles.push(gem);
                  return;
                }
                ++i;
            }
        t1 = this.get$addGem();
        t1 = new $._ZoneTimer($.get$_Zone__current(), t1, null);
        t2 = t1._zone;
        t2._openCallbacks = t2._openCallbacks + 1;
        t2 = t1.get$_run();
        milliseconds = C.JSNumber_methods.$tdiv(C.Duration_4000000._duration, 1000);
        t1._timer = $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, t2);
    }
  },
  get$addGem: function() {
    return new $.BoundClosure$0(this, "addGem$0", null);
  },
  removeDeadGems$0: function() {
    var t1, i, t2;
    for (t1 = this.gems, i = t1.length - 1, t2 = this.turtles; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      if (t1[i].dead) {
        C.JSArray_methods.removeAt$1(t1, i);
        if (i >= t1.length)
          throw $.ioore(i);
        C.JSArray_methods.remove$1(t2, t1[i]);
      }
    }
  },
  getGemHere$1: function(frog) {
    var t1, t2, gem;
    for (t1 = this.gems, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      gem = t2._liblib0$_current;
      if (gem.overlapsTurtle$1(frog) && !gem.get$dead())
        return gem;
    }
    return;
  },
  captureGem$2: function(frog, gem) {
    var t1, t2, t3, workspace, t4, t5, milliseconds;
    for (t1 = this.workspaces, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = C.Duration_3000000._duration, t3 = frog.variables; t2.moveNext$0();) {
      workspace = t2._liblib0$_current;
      if ($.$eq($.get$name$x(workspace), t3.$index(t3, "workspace"))) {
        workspace.captureGem$1(gem);
        gem.die$0();
        t4 = new $._ZoneTimer($.get$_Zone__current(), new $.FrogPond_captureGem_closure(this), null);
        t5 = t4._zone;
        t5._openCallbacks = t5._openCallbacks + 1;
        t5 = t4.get$_run();
        milliseconds = C.JSNumber_methods.$tdiv(t1, 1000);
        t4._timer = $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, t5);
      }
    }
  },
  tick$1: function(timer) {
    var t1, t2, refresh, pad, i, workspace;
    for (t1 = this.flies, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]), refresh = false; t2.moveNext$0();)
      if (t2._liblib0$_current.animate$0() === true)
        refresh = true;
    if (refresh) {
      $.IterableMixinWorkaround_forEach(t1, new $.FrogPond_tick_closure(this));
      $.IterableMixinWorkaround_forEach(t1, new $.FrogPond_tick_closure0(this));
    }
    for (t1 = this.pads, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]), refresh = false; t2.moveNext$0();) {
      pad = t2._liblib0$_current;
      if (pad.get$refresh()) {
        pad.set$refresh(false);
        refresh = true;
      }
    }
    if (refresh)
      this.drawPond$0();
    for (refresh = false, i = 0; i < this.play_state; ++i)
      if (this.animate$0())
        refresh = true;
    if (refresh)
      this.drawForeground$0();
    for (t1 = this.workspaces, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      workspace = t2._liblib0$_current;
      if (this.getFrogCount$1($.get$name$x(workspace)) === 0)
        this.restartProgram$1(workspace);
      if (workspace.animate$0() === true)
        workspace.draw$0();
    }
  },
  get$tick: function() {
    return new $.BoundClosure$1(this, "tick$1", null);
  },
  animate$0: function() {
    var t1, $arguments, t2, refresh, i;
    this.removeDeadFlies$0();
    this.removeDeadGems$0();
    this.removeDeadFrogs$0();
    t1 = this.gems;
    $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    refresh = false;
    for (; t1.moveNext$0();)
      if (t1._liblib0$_current.animate$0() === true)
        refresh = true;
    for (t1 = this.frogs, i = 0; i < t1.length; ++i)
      if (t1[i].animate$0() === true)
        refresh = true;
    t1 = this.workspaces;
    $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();)
      if (t1._liblib0$_current.get$bug().animate$0())
        refresh = true;
    return refresh;
  },
  inWater$2: function(x, y) {
    var t1, $arguments, t2;
    t1 = this.pads;
    $arguments = $.substitute(t1.$asJSArray, $.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();)
      if (t1._liblib0$_current.overlapsPoint$2(x, y))
        return false;
    return true;
  },
  onGridPoint$3: function(x, y, r) {
    var t1, t2, point, t3, t4, t5;
    if (typeof x !== "number")
      return this.onGridPoint$3$bailout(1, x, y, r);
    if (typeof y !== "number")
      return this.onGridPoint$3$bailout(1, x, y, r);
    for (t1 = this.lattice, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      point = t2._liblib0$_current;
      t1 = $.getInterceptor$asx(point);
      t3 = t1.$index(point, 0);
      t1 = t1.$index(point, 1);
      t4 = $.getInterceptor$n(t3);
      t5 = $.getInterceptor$n(t1);
      t1 = $.$add$ns($.$mul$n(t4.$sub(t3, x), t4.$sub(t3, x)), $.$mul$n(t5.$sub(t1, y), t5.$sub(t1, y)));
      if (typeof t1 !== "number")
        $.throwExpression(new $.ArgumentError(t1));
      if (Math.sqrt(t1) <= r)
        return true;
    }
    return false;
  },
  onGridPoint$3$bailout: function(state0, x, y, r) {
    var t1, t2, point, t3, t4, t5;
    for (t1 = this.lattice, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      point = t2._liblib0$_current;
      t1 = $.getInterceptor$asx(point);
      t3 = t1.$index(point, 0);
      t1 = t1.$index(point, 1);
      t4 = $.getInterceptor$n(t3);
      t5 = $.getInterceptor$n(t1);
      t1 = $.$add$ns($.$mul$n(t4.$sub(t3, x), t4.$sub(t3, x)), $.$mul$n(t5.$sub(t1, y), t5.$sub(t1, y)));
      if (typeof t1 !== "number")
        $.throwExpression(new $.ArgumentError(t1));
      if (Math.sqrt(t1) <= r)
        return true;
    }
    return false;
  },
  drawPond$0: function() {
    var t1, t2, t3;
    $.clearRect$4$x(this.layer0, 0, 0, this.width, this.height);
    for (t1 = this.pads, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]); t1 = t2.moveNext$0(), t3 = this.layer0, t1;)
      t2._liblib0$_current.draw$1(t3);
    this.drawGrid$1(t3);
  },
  drawGrid$1: function(ctx) {
    var t1, VSPACE, t2, sy, j, sx, sy0, i, t3;
    t1 = this.lattice;
    C.JSArray_methods.set$length(t1, 0);
    VSPACE = 150 * Math.sin(1.0471975511965976);
    t2 = $.getInterceptor$x(ctx);
    t2.save$0(ctx);
    t2.set$globalAlpha(ctx, 0.05);
    t2.set$fillStyle(ctx, "white");
    t2.set$strokeStyle(ctx, "white");
    t2.set$lineWidth(ctx, 4);
    for (sy = 20, j = 0; j < 9; ++j, sy = sy0) {
      sx = C.JSInt_methods.$mod(j, 2) === 0 ? 136 : 211;
      for (sy0 = sy + VSPACE, i = 0; i < 12; ++i) {
        if (!this.inWater$2(sx, sy)) {
          t2.beginPath$0(ctx);
          t2.arc$6(ctx, sx, sy, 10, 0, 6.283185307179586, true);
          t1.push([sx, sy]);
          t2.beginPath$0(ctx);
          t3 = sx + 150;
          if (!this.inWater$2(t3, sy)) {
            t2.moveTo$2(ctx, sx, sy);
            t2.lineTo$2(ctx, t3, sy);
          }
          t3 = sx + 75;
          if (!this.inWater$2(t3, sy0)) {
            t2.moveTo$2(ctx, sx, sy);
            t2.lineTo$2(ctx, t3, sy0);
          }
          t3 = sx - 75;
          if (!this.inWater$2(t3, sy0)) {
            t2.moveTo$2(ctx, sx, sy);
            t2.lineTo$2(ctx, t3, sy0);
          }
          t2.stroke$0(ctx);
        }
        sx += 150;
      }
    }
    t2.restore$0(ctx);
  },
  drawForeground$0: function() {
    var ctx, t1, t2, workspace, target;
    ctx = this.layer1;
    t1 = $.getInterceptor$x(ctx);
    t1.clearRect$4(ctx, 0, 0, this.width, this.height);
    $.IterableMixinWorkaround_forEach(this.gems, new $.FrogPond_drawForeground_closure(ctx));
    $.IterableMixinWorkaround_forEach(this.frogs, new $.FrogPond_drawForeground_closure0(ctx));
    if (this.play_state > 1) {
      t1.set$font(ctx, "20px sans-serif");
      t1.set$textAlign(ctx, "center");
      t1.set$textBaseline(ctx, "top");
      t1.set$fillStyle(ctx, "white");
      t1.fillText$3(ctx, "Speedup: x" + this.play_state, $.$div$n(this.width, 2), 15);
    }
    for (t1 = this.workspaces, t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      workspace = t2._liblib0$_current;
      target = this.getFocalFrog$1($.get$name$x(workspace));
      if (target != null) {
        t1 = target.get$ghost();
        if (t1 != null && $.get$label$x(t1) != null)
          workspace.traceExecution$2(ctx, t1);
        else
          workspace.traceExecution$2(ctx, target);
        workspace.drawBug$1(ctx);
      }
    }
  },
  FrogPond$0: function() {
    var t1, i, t2, t3, t4, workspace, t5, t6, lilypad;
    this.canvas = document.querySelector("#pond");
    this.layer0 = $.getContext$1$x(this.canvas, "2d");
    this.canvas = document.querySelector("#frogs");
    this.layer1 = $.getContext$1$x(this.canvas, "2d");
    this.canvas = document.querySelector("#flies");
    this.layer2 = $.getContext$1$x(this.canvas, "2d");
    this.width = $.get$width$x(this.canvas);
    this.height = $.get$height$x(this.canvas);
    t1 = this.tmanager;
    t1.registerEvents$1(document.documentElement);
    t1 = t1.layers;
    t1.push(this);
    for (i = 0; i < $.MAX_GEMS; ++i)
      this.addGem$0();
    for (i = 0; i < $.MAX_FLIES; ++i)
      this.addFly$0();
    for (i = 0; i < $.MAX_BEETLES; ++i)
      this.addBeetle$0();
    if ($.isFlagSet("evolution")) {
      this.addLilyPad$3($.$div$n(this.width, 2), $.$div$n(this.height, 2), 1);
      this.addLilyPad$3(200, 200, 0.7);
      this.addLilyPad$3(900, 210, 0.7);
      this.addLilyPad$3(840, 550, 0.6);
    } else {
      this.addLilyPad$3(300, $.$div$n(this.height, 2), 0.6);
      this.addLilyPad$3(370, 100, 0.6);
      this.addLilyPad$3(1620, $.$div$n(this.height, 2), 0.6);
      this.addLilyPad$3(550, 790, 0.8);
      this.addLilyPad$3(630, 370, 0.9);
      this.addLilyPad$3(940, 650, 0.8);
      this.addLilyPad$3(1000, 250, 0.8);
      this.addLilyPad$3(1300, $.$div$n(this.height, 2), 0.8);
      this.addLilyPad$3(1400, 130, 0.6);
      this.addLilyPad$3(1300, $.$sub$n(this.height, 130), 0.6);
      this.addLilyPad$3(900, $.$sub$n(this.height, 130), 0.6);
    }
    t2 = $.isFlagSet("evolution");
    t3 = this.height;
    t4 = this.width;
    if (t2) {
      $.MAX_FROGS = 100;
      workspace = $.CodeWorkspace$(this, t4, t3, "workspace1", "green");
      this.workspaces.push(workspace);
      t1.push(workspace);
      for (i = 0; i < 4; ++i)
        this.addRandomFrog$1(workspace);
    } else {
      workspace = $.CodeWorkspace$(this, t3, t4, "workspace1", "blue");
      t2 = Math.cos(-1.5707963267948966);
      t3 = Math.sin(-1.5707963267948966);
      t4 = Math.sin(-1.5707963267948966);
      t5 = workspace.xform;
      t5.setTransform$6(t5, t2, t3, -t4, Math.cos(-1.5707963267948966), 0, this.height);
      workspace.iform = t5.invert$0();
      t5 = this.workspaces;
      t5.push(workspace);
      t1.push(workspace);
      this.addHomeFrog$1(workspace);
      workspace = $.CodeWorkspace$(this, this.height, this.width, "workspace2", "green");
      t2 = Math.cos(1.5707963267948966);
      t3 = Math.sin(1.5707963267948966);
      t4 = Math.sin(1.5707963267948966);
      t6 = workspace.xform;
      t6.setTransform$6(t6, t2, t3, -t4, Math.cos(1.5707963267948966), this.width, 0);
      workspace.iform = t6.invert$0();
      t5.push(workspace);
      t1.push(workspace);
      this.addHomeFrog$1(workspace);
    }
    t1 = this.get$tick();
    t1 = new $._PeriodicZoneTimer($.get$_Zone__current(), t1, null);
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    t1._timer = $._createPeriodicTimer(C.Duration_40000, t1.get$_run());
    lilypad = $.ImageElement_ImageElement(null, null, null);
    t1 = $.getInterceptor$x(lilypad);
    t1.set$src(lilypad, "images/lilypad.png");
    t1 = t1.get$onLoad(lilypad);
    t2 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.FrogPond_closure(this), t1._useCapture);
    $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    if ($.isFlagSet("timeout")) {
      $.Primitives_printString("initiating master restart timer");
      t1 = new $._PeriodicZoneTimer($.get$_Zone__current(), new $.FrogPond_closure0(this), null);
      t2 = t1._zone;
      t2._openCallbacks = t2._openCallbacks + 1;
      t1._timer = $._createPeriodicTimer(C.Duration_10000000, t1.get$_run());
      t1 = document.documentElement;
      t1.get$onMouseDown;
      C.EventStreamProvider_mousedown.forElement$2$useCapture;
      t1 = new $._ElementEventStreamImpl(t1, C.EventStreamProvider_mousedown._eventType, false);
      $.setRuntimeTypeInfo(t1, [null]);
      t2 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.FrogPond_closure1(this), t1._useCapture);
      $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t2._tryResume$0();
      t2 = document.documentElement;
      t2.get$onTouchStart;
      C.EventStreamProvider_touchstart.forElement$2$useCapture;
      t2 = new $._ElementEventStreamImpl(t2, C.EventStreamProvider_touchstart._eventType, false);
      $.setRuntimeTypeInfo(t2, [null]);
      t1 = new $._EventStreamSubscription(0, t2._target, t2._eventType, new $.FrogPond_closure2(this), t2._useCapture);
      $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
      t1._tryResume$0();
    }
  },
  static: {
FrogPond$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
  t1 = $.List_List(null, $.TouchLayer);
  $.setRuntimeTypeInfo(t1, [$.TouchLayer]);
  t2 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t2, [$.JSInt, $.TouchBinding]);
  t3 = $.List_List(null, $.CodeWorkspace);
  $.setRuntimeTypeInfo(t3, [$.CodeWorkspace]);
  t4 = $.List_List(null, $.Turtle);
  $.setRuntimeTypeInfo(t4, [$.Turtle]);
  t5 = $.List_List(null, $.Gem);
  $.setRuntimeTypeInfo(t5, [$.Gem]);
  t6 = $.List_List(null, $.Fly);
  $.setRuntimeTypeInfo(t6, [$.Fly]);
  t7 = $.List_List(null, $.Frog);
  $.setRuntimeTypeInfo(t7, [$.Frog]);
  t8 = $.List_List(null, $.LilyPad);
  $.setRuntimeTypeInfo(t8, [$.LilyPad]);
  t9 = $.List_List(null, null);
  t10 = $.ImageElement_ImageElement(null, null, null);
  t11 = $.List_List(null, $.Touchable);
  $.setRuntimeTypeInfo(t11, [$.Touchable]);
  t12 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t12, [$.JSInt, $.Touchable]);
  t12 = new $.FrogPond(null, null, null, null, new $.TouchManager(false, null, t1, t2), t3, null, null, t4, t5, t6, t7, t8, t9, 1, 0, t10, t11, t12, new $.Matrix2D([1, 0, 0, 0, 1, 0, 0, 0, 1]), new $.Matrix2D([1, 0, 0, 0, 1, 0, 0, 0, 1]));
  t12.FrogPond$0();
  return t12;
}}

},

FrogPond_closure: {"": "Closure;this_0",
  call$1: function(e) {
    var t1 = this.this_0;
    t1.drawPond$0();
    $.IterableMixinWorkaround_forEach(t1.get$workspaces(), new $.FrogPond__closure());
    t1.drawForeground$0();
  },
  "+call:1:0": 0
},

FrogPond__closure: {"": "Closure;",
  call$1: function(workspace) {
    return workspace.draw$0();
  },
  "+call:1:0": 0
},

FrogPond_closure0: {"": "Closure;this_1",
  call$1: function(timer) {
    var t1 = this.this_1;
    t1.set$_countdown(t1.get$_countdown() + 10);
    if (t1.get$_countdown() >= 80)
      $.reload$0$x(C.Window_methods.get$location(window));
  },
  "+call:1:0": 0
},

FrogPond_closure1: {"": "Closure;this_2",
  call$1: function(e) {
    this.this_2.set$_countdown(0);
    return 0;
  },
  "+call:1:0": 0
},

FrogPond_closure2: {"": "Closure;this_3",
  call$1: function(e) {
    this.this_3.set$_countdown(0);
    return 0;
  },
  "+call:1:0": 0
},

FrogPond_addRandomFrog_closure: {"": "Closure;this_0,workspace_1",
  call$0: function() {
    return this.this_0.addRandomFrog$1(this.workspace_1);
  },
  "+call:0:0": 0
},

FrogPond_captureGem_closure: {"": "Closure;this_0",
  call$0: function() {
    this.this_0.addGem$0();
  },
  "+call:0:0": 0
},

FrogPond_tick_closure: {"": "Closure;this_0",
  call$1: function(fly) {
    return fly.erase$1(this.this_0.get$layer2());
  },
  "+call:1:0": 0
},

FrogPond_tick_closure0: {"": "Closure;this_1",
  call$1: function(fly) {
    return fly.draw$1(this.this_1.get$layer2());
  },
  "+call:1:0": 0
},

FrogPond_drawForeground_closure: {"": "Closure;ctx_0",
  call$1: function(gem) {
    return gem.draw$1(this.ctx_0);
  },
  "+call:1:0": 0
},

FrogPond_drawForeground_closure0: {"": "Closure;ctx_1",
  call$1: function(frog) {
    return frog.draw$1(this.ctx_1);
  },
  "+call:1:0": 0
},

Program: {"": "Object;frog<,start>,curr,running<,variables<,tween",
  animate$0: function() {
    var t1 = this.tween;
    if (t1.isTweening$0()) {
      t1.animate$0();
      return true;
    } else {
      t1 = this.running;
      if (t1 && this.curr != null) {
        if (t1 && this.curr != null) {
          this.curr = $.step$1$x(this.curr, this);
          t1 = this.curr;
          if (t1 != null)
            t1.eval$1(this);
        }
        return true;
      } else {
        this.running = false;
        return false;
      }
    }
  },
  $index: function(_, key) {
    var t1 = this.variables;
    return t1.$index(t1, key);
  },
  $indexSet: function(_, key, value) {
    var t1 = this.variables;
    t1.$indexSet(t1, key, value);
  },
  play$0: function(_) {
    if (this.curr == null) {
      this.curr = this.start;
      this.running = false;
    }
    this.running = true;
  },
  getSensorValue$1: function(sensor) {
    var t1 = $.getInterceptor(sensor);
    if (t1.$eq(sensor, "fly"))
      return this.frog.nearFly$0();
    else if (t1.$eq(sensor, "near-water?"))
      return this.frog.nearWater$0();
    else if (t1.$eq(sensor, "see-bug?"))
      return this.frog.seeBug$0();
    else if (t1.$eq(sensor, "random?")) {
      $.get$Turtle_rand();
      return Math.random() < 0.5;
    } else if (t1.$eq(sensor, "blocked?"))
      return this.frog.isBlocked$0();
    else
      return false;
  },
  doCommand$3: function(cmd, param, preview) {
    var t1;
    if (typeof cmd !== "string")
      return this.doCommand$3$bailout(1, cmd, param, preview);
    t1 = this.frog;
    t1.reset$0(t1);
    if (cmd === "hop")
      this.doMove$3(cmd, param, preview);
    else if (cmd === "turn" || cmd === "left" || cmd === "right")
      this.doTurn$3(cmd, param, preview);
    else if (cmd === "chirp")
      this.doSound$3(cmd, param, preview);
    else if (cmd === "spin")
      this.doSpin$3(cmd, param, preview);
    else if (cmd === "eat")
      this.doEat$3(cmd, param, preview);
    else if (cmd === "hatch")
      this.doHatch$3(cmd, param, preview);
    else if (cmd === "die")
      this.doDie$3(cmd, param, preview);
    else if (C.JSString_methods.startsWith$1(cmd, "if"))
      this.doIf$3(cmd, param, preview);
    else if (C.JSString_methods.startsWith$1(cmd, "repeat"))
      this.doRepeat$3(cmd, param, preview);
    else if (C.JSString_methods.startsWith$1(cmd, "wait"))
      this.doWait$3(cmd, param, preview);
  },
  doCommand$3$bailout: function(state0, cmd, param, preview) {
    var t1 = this.frog;
    t1.reset$0(t1);
    t1 = $.getInterceptor(cmd);
    if (t1.$eq(cmd, "hop"))
      this.doMove$3(cmd, param, preview);
    else if (t1.$eq(cmd, "turn") || t1.$eq(cmd, "left") || t1.$eq(cmd, "right"))
      this.doTurn$3(cmd, param, preview);
    else if (t1.$eq(cmd, "chirp"))
      this.doSound$3(cmd, param, preview);
    else if (t1.$eq(cmd, "spin"))
      this.doSpin$3(cmd, param, preview);
    else if (t1.$eq(cmd, "eat"))
      this.doEat$3(cmd, param, preview);
    else if (t1.$eq(cmd, "hatch"))
      this.doHatch$3(cmd, param, preview);
    else if (t1.$eq(cmd, "die"))
      this.doDie$3(cmd, param, preview);
    else if (t1.startsWith$1(cmd, "if"))
      this.doIf$3(cmd, param, preview);
    else if (t1.startsWith$1(cmd, "repeat"))
      this.doRepeat$3(cmd, param, preview);
    else if (t1.startsWith$1(cmd, "wait"))
      this.doWait$3(cmd, param, preview);
  },
  doCommand$2: function(cmd, param) {
    return this.doCommand$3(cmd, param, false);
  },
  doPause$1: function(preview) {
    var t1 = this.frog;
    if (t1.pond.inWater$2(t1.x, t1.y)) {
      $.Sounds_playSound("splash");
      this.frog.dead = true;
      return;
    }
    if (!preview)
      this.frog.captureGem$0();
    t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.delay = 0;
    this.tween.duration = 20;
    this.tween.onstart = new $.Program_doPause_closure();
    this.tween.onend = new $.Program_doPause_closure0(this);
  },
  doMove$3: function(cmd, param, preview) {
    var t1, $length, bounce, s, t2;
    t1 = {};
    t1.target_0 = this.frog;
    if (preview) {
      t1.target_0 = this.frog.hatch$0();
      this.frog.ghost = t1.target_0;
      t1.target_0.set$opacity(0.3);
    }
    $length = $.Turtle.prototype.get$radius.call(this.frog) * 0.75 * 4;
    if (typeof param === "number")
      $length *= param;
    bounce = this.frog.pathBlocked$0() && $.FROGS_BLOCK;
    s = $.S(cmd);
    t2 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t2.segments = [];
    this.tween = t2;
    this.tween.$function = 1;
    this.tween.delay = 0;
    this.tween.duration = 12;
    this.tween.onstart = new $.Program_doMove_closure(t1, cmd, s);
    this.tween.onend = new $.Program_doMove_closure0(this, preview);
    this.tween.addControlPoint$2(0, 0);
    t2 = this.tween;
    if (bounce) {
      t2.addControlPoint$2($length * 0.5, 0.5);
      this.tween.addControlPoint$2(0, 1);
    } else
      t2.addControlPoint$2($length, 1);
    this.tween.ondelta = new $.Program_doMove_closure1(t1, preview);
  },
  doTurn$3: function(cmd, param, preview) {
    var t1, angle, t2;
    t1 = {};
    if (typeof param === "number")
      angle = param;
    else
      angle = $.$eq($.toString$0(param), "random") ? $.get$Turtle_rand().nextInt$1(180) - 90 : 60;
    if ($.$eq(cmd, "right")) {
      if (typeof angle !== "number")
        throw angle.$mul();
      angle *= -1;
    }
    t1.target_0 = this.frog;
    if (preview) {
      t1.target_0 = this.frog.hatch$0();
      t1.target_0.set$opacity(0.5);
      this.frog.ghost = t1.target_0;
    }
    t1.s_1 = $.S(cmd);
    if (param != null)
      t1.s_1 = $.S(cmd) + " " + $.S(param);
    t2 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t2.segments = [];
    this.tween = t2;
    this.tween.$function = 1;
    this.tween.delay = 0;
    this.tween.duration = 20;
    this.tween.onstart = new $.Program_doTurn_closure(t1);
    this.tween.addControlPoint$2(0, 0);
    this.tween.addControlPoint$2(angle, 1);
    this.tween.ondelta = new $.Program_doTurn_closure0(t1);
    this.tween.onend = new $.Program_doTurn_closure1(this, preview);
  },
  doSpin$3: function(cmd, param, preview) {
    var angle, s, t1;
    angle = 60 * $.get$Turtle_rand().nextInt$1(40);
    $.get$Turtle_rand();
    if (Math.random() < 0.5)
      angle *= -1;
    s = $.S(cmd);
    t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.$function = 1;
    this.tween.delay = 0;
    this.tween.duration = 30;
    this.tween.onstart = new $.Program_doSpin_closure(this, s);
    this.tween.addControlPoint$2(0, 0);
    this.tween.addControlPoint$2(angle, 1);
    this.tween.ondelta = new $.Program_doSpin_closure0(this);
    this.tween.onend = new $.Program_doSpin_closure1(this, preview);
  },
  doSound$3: function(cmd, param, preview) {
    var t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.$function = 1;
    this.tween.onstart = new $.Program_doSound_closure(this, cmd);
    this.tween.onend = new $.Program_doSound_closure0(this, preview);
    this.tween.addControlPoint$2(0, 0);
    this.tween.addControlPoint$2(175, 1);
    this.tween.duration = 25;
    this.tween.delay = 0;
    this.tween.ondelta = new $.Program_doSound_closure1(this);
  },
  doEat$3: function(cmd, param, preview) {
    var t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.$function = 1;
    this.tween.onstart = new $.Program_doEat_closure(this, cmd);
    this.tween.addControlPoint$2(0, 0);
    this.tween.addControlPoint$2(1, 0.4);
    this.tween.addControlPoint$2(0, 1);
    this.tween.duration = 20;
    this.tween.ondelta = new $.Program_doEat_closure0(this, preview);
    this.tween.onend = new $.Program_doEat_closure1(this, preview);
  },
  doRepeat$3: function(cmd, param, preview) {
    var t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.duration = 5;
    this.tween.onstart = new $.Program_doRepeat_closure(this, cmd, param);
    this.tween.onend = new $.Program_doRepeat_closure0(this, preview);
  },
  doIf$3: function(cmd, param, preview) {
    var t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.duration = 5;
    this.tween.onstart = new $.Program_doIf_closure(this, cmd, param);
    this.tween.onend = new $.Program_doIf_closure0(this, preview);
  },
  doWait$3: function(cmd, param, preview) {
    var t1;
    this.frog._vision = 10;
    this.frog.label = $.S(cmd) + " " + $.S(param);
    if (preview) {
      t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
      t1.segments = [];
      this.tween = t1;
      this.tween.duration = 40;
      this.tween.onend = new $.Program_doWait_closure(this);
    }
  },
  doDie$3: function(cmd, param, preview) {
    var t1 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.$function = 2;
    this.tween.delay = 0;
    this.tween.duration = 8;
    this.tween.repeat = 3;
    this.tween.addControlPoint$2(1, 0);
    this.tween.addControlPoint$2(0, 0.5);
    this.tween.addControlPoint$2(1, 1);
    this.tween.ondelta = new $.Program_doDie_closure(this);
    this.tween.onend = new $.Program_doDie_closure0(this, preview);
  },
  doHatch$3: function(cmd, param, preview) {
    var t1, t2, t3, newsize;
    t1 = {};
    t1.baby_0 = null;
    t2 = this.frog;
    t3 = t2.variables;
    if (t2.pond.getFrogCount$1(t3.$index(t3, "workspace")) < $.MAX_FROGS)
      t1.baby_0 = this.frog.hatch$0();
    t2 = t1.baby_0;
    if (t2 == null)
      return;
    if (preview) {
      t2.set$opacity(0.3);
      this.frog.ghost = t1.baby_0;
    } else {
      this.frog.pond.addFrog$1(t2);
      t2 = t1.baby_0.get$program();
      t2.pause$0;
      t2.running = false;
    }
    $.set$size$x(t1.baby_0, 0.05);
    t1.baby_0.set$heading(this.frog.heading);
    $.left$1$x(t1.baby_0, 60 + $.get$Turtle_rand().nextInt$1(5) * 60);
    t2 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t2.segments = [];
    this.tween = t2;
    this.tween.$function = 2;
    this.tween.delay = 0;
    this.tween.duration = 15;
    this.tween.onstart = new $.Program_doHatch_closure(this, cmd);
    this.tween.onend = new $.Program_doHatch_closure0(t1, this, preview);
    newsize = this.frog.size;
    if ($.FROG_SIZE_VARIATION) {
      $.get$Turtle_rand();
      t2 = Math.random();
      if (newsize == null)
        throw newsize.$add();
      newsize = $.min(2, $.max(0.1, newsize + (t2 * 0.2 - 0.1)));
    }
    this.tween.addControlPoint$2(0.05, 0);
    this.tween.addControlPoint$2(newsize, 1);
    this.tween.ondelta = new $.Program_doHatch_closure1(t1);
  },
  Program$copy$2: function(other, owner) {
    this.frog = owner;
    this.start = other.start;
    this.curr = other.curr;
    this.running = other.running;
  },
  static: {
Program$copy: function(other, owner) {
  var t1, t2;
  t1 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t1, [$.JSString, null]);
  t2 = new $.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
  t2.segments = [];
  t2 = new $.Program(null, null, null, false, t1, t2);
  t2.Program$copy$2(other, owner);
  return t2;
}}

},

Program_doPause_closure: {"": "Closure;",
  call$0: function() {
  },
  "+call:0:0": 0
},

Program_doPause_closure0: {"": "Closure;this_0",
  call$0: function() {
    $.reset$0$x(this.this_0.get$frog());
  },
  "+call:0:0": 0
},

Program_doMove_closure: {"": "Closure;box_0,cmd_1,s_2",
  call$0: function() {
    $.Sounds_playSound(this.cmd_1);
    $.set$label$x(this.box_0.target_0, this.s_2);
  },
  "+call:0:0": 0
},

Program_doMove_closure0: {"": "Closure;this_3,preview_4",
  call$0: function() {
    this.this_3.doPause$1(this.preview_4);
  },
  "+call:0:0": 0
},

Program_doMove_closure1: {"": "Closure;box_0,preview_5",
  call$1: function(value) {
    var t1, t2, beetle;
    t1 = this.box_0;
    t1.target_0.forward$1(value);
    t2 = t1.target_0;
    beetle = t2.get$pond().getTurtleHere$2(t2, C.Type_QA5);
    if (beetle != null)
      beetle.spook$0();
    if (!this.preview_5 && $.FROGS_PUSH)
      t1.target_0.push$1(value);
  },
  "+call:1:0": 0
},

Program_doTurn_closure: {"": "Closure;box_0",
  call$0: function() {
    var t1, t2;
    t1 = this.box_0;
    t2 = t1.target_0;
    t1 = t1.s_1;
    $.set$label$x(t2, t1);
    return t1;
  },
  "+call:0:0": 0
},

Program_doTurn_closure0: {"": "Closure;box_0",
  call$1: function(value) {
    return $.left$1$x(this.box_0.target_0, value);
  },
  "+call:1:0": 0
},

Program_doTurn_closure1: {"": "Closure;this_1,preview_2",
  call$0: function() {
    this.this_1.doPause$1(this.preview_2);
  },
  "+call:0:0": 0
},

Program_doSpin_closure: {"": "Closure;this_0,s_1",
  call$0: function() {
    var t1 = this.s_1;
    $.set$label$x(this.this_0.get$frog(), t1);
    return t1;
  },
  "+call:0:0": 0
},

Program_doSpin_closure0: {"": "Closure;this_2",
  call$1: function(value) {
    var t1 = this.this_2.get$frog();
    t1.set$heading(t1.get$heading() - $.$div$n(value, 180) * 3.141592653589793);
    return;
  },
  "+call:1:0": 0
},

Program_doSpin_closure1: {"": "Closure;this_3,preview_4",
  call$0: function() {
    this.this_3.doPause$1(this.preview_4);
  },
  "+call:0:0": 0
},

Program_doSound_closure: {"": "Closure;this_0,cmd_1",
  call$0: function() {
    var t1, t2;
    t1 = this.cmd_1;
    $.Sounds_playSound(t1);
    t2 = this.this_0;
    $.set$label$x(t2.get$frog(), t1);
    t2.get$frog().set$_sound(0.5);
  },
  "+call:0:0": 0
},

Program_doSound_closure0: {"": "Closure;this_2,preview_3",
  call$0: function() {
    var t1 = this.this_2;
    t1.get$frog().set$_sound(-1);
    t1.doPause$1(this.preview_3);
  },
  "+call:0:0": 0
},

Program_doSound_closure1: {"": "Closure;this_4",
  call$1: function(value) {
    var t1, t2;
    t1 = this.this_4.get$frog();
    t2 = t1.get$_sound();
    if (typeof value !== "number")
      throw $.iae(value);
    t2 += value;
    t1.set$_sound(t2);
    return t2;
  },
  "+call:1:0": 0
},

Program_doEat_closure: {"": "Closure;this_0,cmd_1",
  call$0: function() {
    var t1 = this.this_0;
    $.set$label$x(t1.get$frog(), this.cmd_1);
    t1.get$frog().set$_tongue(0);
  },
  "+call:0:0": 0
},

Program_doEat_closure0: {"": "Closure;this_2,preview_3",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.this_2;
    t2 = t1.get$frog();
    t3 = t2.get$_tongue();
    if (typeof value !== "number")
      throw $.iae(value);
    t2.set$_tongue(t3 + value);
    if (!this.preview_3)
      t1.get$frog().eatFly$0();
    if (t1.get$frog().get$_tongue() === 1)
      $.Sounds_playSound("swoosh");
  },
  "+call:1:0": 0
},

Program_doEat_closure1: {"": "Closure;this_4,preview_5",
  call$0: function() {
    var t1 = this.this_4;
    if (t1.get$frog().get$prey() != null) {
      $.Sounds_playSound("gulp");
      t1.get$frog().set$prey(null);
    }
    t1.doPause$1(this.preview_5);
  },
  "+call:0:0": 0
},

Program_doRepeat_closure: {"": "Closure;this_0,cmd_1,param_2",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0.get$frog();
    t2 = $.S(this.cmd_1) + " " + $.S(this.param_2);
    $.set$label$x(t1, t2);
    return t2;
  },
  "+call:0:0": 0
},

Program_doRepeat_closure0: {"": "Closure;this_3,preview_4",
  call$0: function() {
    this.this_3.doPause$1(this.preview_4);
  },
  "+call:0:0": 0
},

Program_doIf_closure: {"": "Closure;this_0,cmd_1,param_2",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0.get$frog();
    t2 = $.S(this.cmd_1) + " " + $.S(this.param_2);
    $.set$label$x(t1, t2);
    return t2;
  },
  "+call:0:0": 0
},

Program_doIf_closure0: {"": "Closure;this_3,preview_4",
  call$0: function() {
    this.this_3.doPause$1(this.preview_4);
  },
  "+call:0:0": 0
},

Program_doWait_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    $.set$label$x(t1.get$frog(), null);
    t1.get$frog().set$_vision(0);
  },
  "+call:0:0": 0
},

Program_doDie_closure: {"": "Closure;this_0",
  call$1: function(value) {
    var t1, t2;
    t1 = this.this_0.get$frog();
    t2 = t1.get$opacity();
    if (typeof value !== "number")
      throw $.iae(value);
    t2 += value;
    t1.set$opacity(t2);
    return t2;
  },
  "+call:1:0": 0
},

Program_doDie_closure0: {"": "Closure;this_1,preview_2",
  call$0: function() {
    if (!this.preview_2)
      this.this_1.get$frog().set$dead(true);
  },
  "+call:0:0": 0
},

Program_doHatch_closure: {"": "Closure;this_1,cmd_2",
  call$0: function() {
    var t1 = this.cmd_2;
    $.set$label$x(this.this_1.get$frog(), t1);
    return t1;
  },
  "+call:0:0": 0
},

Program_doHatch_closure0: {"": "Closure;box_0,this_3,preview_4",
  call$0: function() {
    this.this_3.doPause$1(this.preview_4);
    var t1 = this.box_0.baby_0.get$program();
    t1.play$0;
    if (t1.curr == null) {
      t1.curr = t1.start;
      t1.running = false;
    }
    t1.running = true;
  },
  "+call:0:0": 0
},

Program_doHatch_closure1: {"": "Closure;box_0",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0.baby_0;
    t2 = $.getInterceptor$x(t1);
    t3 = t2.get$size(t1);
    if (t3 == null)
      throw t3.$add();
    if (typeof value !== "number")
      throw $.iae(value);
    t3 += value;
    t2.set$size(t1, t3);
    return t3;
  },
  "+call:1:0": 0
},

TouchManager: {"": "Object;mdown,parent,layers,touch_bindings",
  findTouchTarget$1: function(tp) {
    var t1, i, t;
    for (t1 = this.layers, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t = t1[i].findTouchTarget$1(tp);
      if (t != null) {
        if (i >= t1.length)
          throw $.ioore(i);
        return new $.TouchBinding(t1[i], t);
      }
    }
    return;
  },
  registerEvents$1: function(element) {
    var t1, t2, t3;
    this.parent = element;
    if ($.$gt$n($.indexOf$1$asx($.get$search$x(C.Window_methods.get$location(window)), "debug=true"), 0)) {
      $.Primitives_printString("Enabling mouse events");
      element.get$onMouseDown;
      C.EventStreamProvider_mousedown.forElement$2$useCapture;
      t1 = new $._ElementEventStreamImpl(element, C.EventStreamProvider_mousedown._eventType, false);
      $.setRuntimeTypeInfo(t1, [null]);
      t2 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.TouchManager_registerEvents_closure(this), t1._useCapture);
      $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t2._tryResume$0();
      C.EventStreamProvider_mouseup.forElement$2$useCapture;
      t2 = new $._ElementEventStreamImpl(element, C.EventStreamProvider_mouseup._eventType, false);
      $.setRuntimeTypeInfo(t2, [null]);
      t1 = new $._EventStreamSubscription(0, t2._target, t2._eventType, new $.TouchManager_registerEvents_closure0(this), t2._useCapture);
      $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
      t1._tryResume$0();
      C.EventStreamProvider_mousemove.forElement$2$useCapture;
      t1 = new $._ElementEventStreamImpl(element, C.EventStreamProvider_mousemove._eventType, false);
      $.setRuntimeTypeInfo(t1, [null]);
      t2 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.TouchManager_registerEvents_closure1(this), t1._useCapture);
      $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t2._tryResume$0();
    }
    element.get$onTouchStart;
    C.EventStreamProvider_touchstart.forElement$2$useCapture;
    t1 = new $._ElementEventStreamImpl(element, C.EventStreamProvider_touchstart._eventType, false);
    $.setRuntimeTypeInfo(t1, [null]);
    t2 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.TouchManager_registerEvents_closure2(this), t1._useCapture);
    $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    C.EventStreamProvider_touchmove.forElement$2$useCapture;
    t2 = C.EventStreamProvider_touchmove._eventType;
    t1 = new $._ElementEventStreamImpl(element, t2, false);
    $.setRuntimeTypeInfo(t1, [null]);
    t3 = new $._EventStreamSubscription(0, t1._target, t1._eventType, new $.TouchManager_registerEvents_closure3(this), t1._useCapture);
    $.setRuntimeTypeInfo(t3, [$.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t3._tryResume$0();
    C.EventStreamProvider_touchend.forElement$2$useCapture;
    t3 = new $._ElementEventStreamImpl(element, C.EventStreamProvider_touchend._eventType, false);
    $.setRuntimeTypeInfo(t3, [null]);
    t1 = new $._EventStreamSubscription(0, t3._target, t3._eventType, new $.TouchManager_registerEvents_closure4(this), t3._useCapture);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t1._tryResume$0();
    t1 = document;
    C.EventStreamProvider_touchmove.forTarget$2$useCapture;
    t2 = new $._EventStream(t1, t2, false);
    $.setRuntimeTypeInfo(t2, [null]);
    t1 = new $._EventStreamSubscription(0, t2._target, t2._eventType, new $.TouchManager_registerEvents_closure5(), t2._useCapture);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
  },
  _mouseUp$1: function(evt) {
    var t1, target;
    t1 = this.touch_bindings;
    target = t1.$index(t1, -1);
    if (target != null)
      target.touchUp$1($.Contact$fromMouse(evt));
    t1.$indexSet(t1, -1, null);
    this.mdown = false;
  },
  _mouseDown$1: function(evt) {
    var t, target, t1;
    t = $.Contact$fromMouse(evt);
    target = this.findTouchTarget$1(t);
    if (target != null) {
      target.touchDown$1;
      target.layer.transformContact$1(t);
      if (target.touchable.touchDown$1(t) === true) {
        t1 = this.touch_bindings;
        t1.$indexSet(t1, -1, target);
      }
    }
    this.mdown = true;
  },
  _mouseMove$1: function(evt) {
    var t, t1, target;
    if (this.mdown) {
      t = $.Contact$fromMouse(evt);
      t1 = this.touch_bindings;
      target = t1.$index(t1, -1);
      if (target != null)
        target.touchDrag$1(t);
      else {
        target = this.findTouchTarget$1(t);
        if (target != null) {
          target.touchSlide$1;
          target.layer.transformContact$1(t);
          target.touchable.touchSlide$1(t);
        }
      }
    }
  },
  _touchDown$1: function(tframe) {
    var t1, t2, t, target;
    for (t1 = $.get$iterator$ax($.get$changedTouches$x(tframe)), t2 = this.touch_bindings; t1.moveNext$0();) {
      t = $.Contact$fromTouch(t1._current, this.parent);
      target = this.findTouchTarget$1(t);
      if (target != null) {
        target.touchDown$1;
        target.layer.transformContact$1(t);
        if (target.touchable.touchDown$1(t) === true)
          t2.$indexSet(t2, t.id, target);
      }
    }
  },
  _touchUp$1: function(tframe) {
    var t1, t2, t3, t, target;
    for (t1 = $.getInterceptor$x(tframe), t2 = $.get$iterator$ax(t1.get$changedTouches(tframe)), t3 = this.touch_bindings; t2.moveNext$0();) {
      t = $.Contact$fromTouch(t2._current, this.parent);
      target = t3.$index(t3, t.id);
      if (target != null) {
        target.touchUp$1(t);
        t3.$indexSet(t3, t.id, null);
      }
    }
    if (t1.get$touches(tframe).length === 0)
      t3.clear$0(t3);
  },
  _touchDrag$1: function(tframe) {
    var t1, t2, t, target;
    for (t1 = $.get$iterator$ax($.get$changedTouches$x(tframe)), t2 = this.touch_bindings; t1.moveNext$0();) {
      t = $.Contact$fromTouch(t1._current, this.parent);
      target = t2.$index(t2, t.id);
      if (target != null)
        target.touchDrag$1(t);
      else {
        target = this.findTouchTarget$1(t);
        if (target != null) {
          target.touchSlide$1;
          target.layer.transformContact$1(t);
          target.touchable.touchSlide$1(t);
        }
      }
    }
  }
},

TouchManager_registerEvents_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._mouseDown$1(e);
  },
  "+call:1:0": 0
},

TouchManager_registerEvents_closure0: {"": "Closure;this_1",
  call$1: function(e) {
    return this.this_1._mouseUp$1(e);
  },
  "+call:1:0": 0
},

TouchManager_registerEvents_closure1: {"": "Closure;this_2",
  call$1: function(e) {
    return this.this_2._mouseMove$1(e);
  },
  "+call:1:0": 0
},

TouchManager_registerEvents_closure2: {"": "Closure;this_3",
  call$1: function(e) {
    return this.this_3._touchDown$1(e);
  },
  "+call:1:0": 0
},

TouchManager_registerEvents_closure3: {"": "Closure;this_4",
  call$1: function(e) {
    return this.this_4._touchDrag$1(e);
  },
  "+call:1:0": 0
},

TouchManager_registerEvents_closure4: {"": "Closure;this_5",
  call$1: function(e) {
    return this.this_5._touchUp$1(e);
  },
  "+call:1:0": 0
},

TouchManager_registerEvents_closure5: {"": "Closure;",
  call$1: function(e) {
    return $.preventDefault$0$x(e);
  },
  "+call:1:0": 0
},

TouchLayer: {"": "Object;touchables,touch_bindings,xform,iform",
  findTouchTarget$1: function(tp) {
    var c, t1, i;
    c = $.Contact$copy(tp);
    this.iform.transformContact$1(c);
    for (t1 = this.touchables, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      if (t1[i].containsTouch$1(c)) {
        if (i >= t1.length)
          throw $.ioore(i);
        return t1[i];
      }
    }
    return;
  },
  transformContact$1: function(c) {
    this.iform.transformContact$1(c);
  },
  objectToWorldX$2: function(x, y) {
    return this.xform.transformX$2(x, y);
  },
  objectToWorldY$2: function(x, y) {
    return this.xform.transformY$2(x, y);
  },
  objectToWorldTheta$1: function(theta) {
    var t1 = this.xform.xform[3];
    if (typeof t1 !== "number")
      $.throwExpression(new $.ArgumentError(t1));
    return theta + Math.asin(t1);
  }
},

TouchBinding: {"": "Object;layer,touchable",
  touchDown$1: function(c) {
    this.layer.transformContact$1(c);
    return this.touchable.touchDown$1(c);
  },
  touchUp$1: function(c) {
    this.layer.transformContact$1(c);
    this.touchable.touchUp$1(c);
  },
  touchDrag$1: function(c) {
    this.layer.transformContact$1(c);
    this.touchable.touchDrag$1(c);
  },
  touchSlide$1: function(c) {
    this.layer.transformContact$1(c);
    this.touchable.touchSlide$1(c);
  }
},

Touchable: {"": "Object;"},

Contact: {"": "Object;id,tagId,touchX@,touchY@,tag,up,down,drag,finger",
  Contact$fromMouse$1: function(mouse) {
    var t1, t2;
    this.id = -1;
    t1 = $.getInterceptor$x(mouse);
    t2 = t1.get$offset(mouse);
    this.touchX = $.toDouble$0$n(t2.get$x(t2));
    t1 = t1.get$offset(mouse);
    this.touchY = $.toDouble$0$n(t1.get$y(t1));
    this.finger = true;
  },
  Contact$copy$1: function(c) {
    this.id = c.id;
    this.tagId = c.tagId;
    this.touchX = c.touchX;
    this.touchY = c.touchY;
    this.up = c.up;
    this.down = c.down;
    this.drag = c.drag;
    this.finger = c.finger;
  },
  Contact$fromTouch$2: function(touch, $parent) {
    var left, $top, box, t1, t2;
    left = window.pageXOffset;
    $top = window.pageYOffset;
    if ($parent != null) {
      box = $parent.getBoundingClientRect();
      t1 = $.getInterceptor$x(box);
      t2 = t1.get$left(box);
      if (left == null)
        throw left.$add();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      left += t2;
      t1 = t1.get$top(box);
      if ($top == null)
        throw $top.$add();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      $top += t1;
    }
    this.id = touch.identifier;
    t1 = $.toDouble$0$n(new $.Point(touch.pageX, touch.pageY).x);
    if (left == null)
      throw $.iae(left);
    this.touchX = t1 - left;
    t1 = $.toDouble$0$n(new $.Point(touch.pageX, touch.pageY).y);
    if ($top == null)
      throw $.iae($top);
    this.touchY = t1 - $top;
    this.finger = true;
  },
  static: {
Contact$fromMouse: function(mouse) {
  var t1 = new $.Contact(null, -1, 0, 0, false, false, false, false, false);
  t1.Contact$fromMouse$1(mouse);
  return t1;
},

Contact$fromTouch: function(touch, $parent) {
  var t1 = new $.Contact(null, -1, 0, 0, false, false, false, false, false);
  t1.Contact$fromTouch$2(touch, $parent);
  return t1;
},

Contact$copy: function(c) {
  var t1 = new $.Contact(null, -1, 0, 0, false, false, false, false, false);
  t1.Contact$copy$1(c);
  return t1;
}}

},

Turtle: {"": "Object;x*,y*,size*,heading@,opacity@,dead@,img>,variables<",
  copy$1: function(other) {
    var t1, t2, t3, t4, key;
    t1 = $.getInterceptor$x(other);
    this.x = t1.get$x(other);
    this.y = t1.get$y(other);
    this.size = t1.get$size(other);
    this.heading = other.get$heading();
    this.opacity = other.get$opacity();
    $.set$src$x(this.img, $.get$src$x(t1.get$img(other)));
    for (t2 = other.get$variables(), t3 = new $.LinkedHashMapKeyIterable(t2), $.setRuntimeTypeInfo(t3, [$.getRuntimeTypeArgument(t2, "LinkedHashMap", 0)]), t2 = t3._map, t4 = t2._modifications, t4 = new $.LinkedHashMapKeyIterator(t2, t4, null, null), $.setRuntimeTypeInfo(t4, [$.getRuntimeTypeArgument(t3, "LinkedHashMapKeyIterable", 0)]), t4._cell = t4._map._first, t3 = this.variables; t4.moveNext$0();) {
      key = t4._liblib2$_current;
      t3.$indexSet(t3, key, t1.$index(other, key));
    }
  },
  move$2: function(dx, dy) {
    var t1;
    if (typeof dx !== "number")
      return this.move$2$bailout(1, dx, dy);
    if (typeof dy !== "number")
      return this.move$2$bailout(1, dx, dy);
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.move$2$bailout(2, dx, dy, t1);
    this.x = t1 + dx;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.move$2$bailout(3, 0, dy, t1);
    this.y = t1 + dy;
  },
  move$2$bailout: function(state0, dx, dy, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.x;
      case 2:
        state0 = 0;
        this.x = $.$add$ns(t1, dx);
        t1 = this.y;
      case 3:
        state0 = 0;
        this.y = $.$add$ns(t1, dy);
    }
  },
  forward$1: function(distance) {
    var t1, t2;
    t1 = this.x;
    t2 = this.heading;
    t2 = Math.sin(t2);
    if (typeof distance !== "number")
      throw $.iae(distance);
    this.x = $.$add$ns(t1, t2 * distance);
    t2 = this.y;
    t1 = this.heading;
    this.y = $.$sub$n(t2, Math.cos(t1) * distance);
  },
  left$1: function(_, degrees) {
    this.heading = this.heading - $.$div$n(degrees, 180) * 3.141592653589793;
  },
  die$0: function() {
    this.dead = true;
  },
  overlapsPoint$3: function(tx, ty, tw) {
    var t1, t2;
    if (typeof tx !== "number")
      return this.overlapsPoint$3$bailout(1, tx, ty, tw);
    if (typeof ty !== "number")
      return this.overlapsPoint$3$bailout(1, tx, ty, tw);
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.overlapsPoint$3$bailout(2, tx, ty, tw, t1);
    t2 = this.y;
    if (typeof t2 !== "number")
      return this.overlapsPoint$3$bailout(3, tx, ty, tw, t1, t2);
    t1 -= tx;
    t2 -= ty;
    return Math.sqrt(t1 * t1 + t2 * t2) < this.get$radius() + tw / 2;
  },
  overlapsPoint$3$bailout: function(state0, tx, ty, tw, t1, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.x;
      case 2:
        state0 = 0;
        t2 = this.y;
      case 3:
        var t3, t4;
        state0 = 0;
        t3 = $.getInterceptor$n(t1);
        t4 = $.getInterceptor$n(t2);
        t2 = $.$add$ns($.$mul$n(t3.$sub(t1, tx), t3.$sub(t1, tx)), $.$mul$n(t4.$sub(t2, ty), t4.$sub(t2, ty)));
        if (typeof t2 !== "number")
          $.throwExpression(new $.ArgumentError(t2));
        return Math.sqrt(t2) < this.get$radius() + tw / 2;
    }
  },
  overlapsPoint$2: function(tx, ty) {
    return this.overlapsPoint$3(tx, ty, 0);
  },
  overlapsTurtle$1: function(other) {
    var t1, t2, t3, t4;
    t1 = $.getInterceptor$x(other);
    t2 = t1.get$x(other);
    if (typeof t2 !== "number")
      return this.overlapsTurtle$1$bailout(1, other, t1, t2);
    t1 = t1.get$y(other);
    if (typeof t1 !== "number")
      return this.overlapsTurtle$1$bailout(2, other, t1, t2);
    t3 = this.x;
    if (typeof t3 !== "number")
      return this.overlapsTurtle$1$bailout(3, other, t1, t2, t3);
    t4 = this.y;
    if (typeof t4 !== "number")
      return this.overlapsTurtle$1$bailout(4, other, t1, t2, t3, t4);
    t2 = t3 - t2;
    t1 = t4 - t1;
    return Math.sqrt(t2 * t2 + t1 * t1) < this.get$radius() + other.get$radius();
  },
  overlapsTurtle$1$bailout: function(state0, other, t1, t2, t3, t4) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$x(other);
        t2 = t1.get$x(other);
      case 1:
        state0 = 0;
        t1 = t1.get$y(other);
      case 2:
        state0 = 0;
        t3 = this.x;
      case 3:
        state0 = 0;
        t4 = this.y;
      case 4:
        var t5, t6;
        state0 = 0;
        t5 = $.getInterceptor$n(t3);
        t6 = $.getInterceptor$n(t4);
        t1 = $.$add$ns($.$mul$n(t5.$sub(t3, t2), t5.$sub(t3, t2)), $.$mul$n(t6.$sub(t4, t1), t6.$sub(t4, t1)));
        if (typeof t1 !== "number")
          $.throwExpression(new $.ArgumentError(t1));
        return Math.sqrt(t1) < this.get$radius() + other.get$radius();
    }
  },
  get$width: function(_) {
    var t1, t2;
    t1 = $.get$width$x(this.img);
    if (t1 !== (t1 | 0))
      return this.get$width$bailout(1, t1);
    t2 = this.size;
    if (t2 == null)
      return this.get$width$bailout(2, t1, t2);
    return t1 * t2;
  },
  get$width$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.get$width$x(this.img);
      case 1:
        state0 = 0;
        t2 = this.size;
      case 2:
        state0 = 0;
        return $.$mul$n(t1, t2);
    }
  },
  get$height: function(_) {
    var t1, t2;
    t1 = $.get$height$x(this.img);
    if (t1 !== (t1 | 0))
      return this.get$height$bailout(1, t1);
    t2 = this.size;
    if (t2 == null)
      return this.get$height$bailout(2, t1, t2);
    return t1 * t2;
  },
  get$height$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.get$height$x(this.img);
      case 1:
        state0 = 0;
        t2 = this.size;
      case 2:
        state0 = 0;
        return $.$mul$n(t1, t2);
    }
  },
  get$radius: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.img;
    t2 = $.getInterceptor$x(t1);
    t3 = $.$mul$n(t2.get$width(t1), this.size);
    t4 = $.$mul$n(t2.get$height(t1), this.size);
    t5 = this.size;
    return t3 < t4 ? $.$mul$n(t2.get$width(t1), t5) / 2 : $.$mul$n(t2.get$height(t1), t5) / 2;
  },
  angleBetween$1: function(b) {
    var t1, t2, t3, theta;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.angleBetween$1$bailout(1, b, t1);
    t2 = $.getInterceptor$x(b);
    t3 = t2.get$x(b);
    if (typeof t3 !== "number")
      return this.angleBetween$1$bailout(2, b, t1, t2, t3);
    t3 = t1 - t3;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.angleBetween$1$bailout(3, b, t1, t2, t3);
    t2 = t2.get$y(b);
    if (typeof t2 !== "number")
      return this.angleBetween$1$bailout(4, 0, t1, t2, t3);
    theta = -Math.atan2(t3, t1 - t2) / 3.141592653589793 * 180;
    if (theta < 0)
      theta += 360;
    return C.JSNumber_methods.$mod(this.heading / 3.141592653589793 * 180, 360) - theta;
  },
  angleBetween$1$bailout: function(state0, b, t1, t2, t3) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$x(b);
        t3 = t2.get$x(b);
      case 2:
        state0 = 0;
        t3 = $.$sub$n(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t2 = t2.get$y(b);
      case 4:
        var theta;
        state0 = 0;
        t2 = $.$sub$n(t1, t2);
        if (typeof t3 !== "number")
          $.throwExpression(new $.ArgumentError(t3));
        if (typeof t2 !== "number")
          $.throwExpression(new $.ArgumentError(t2));
        theta = -Math.atan2(t3, t2) / 3.141592653589793 * 180;
        if (theta < 0)
          theta += 360;
        return C.JSNumber_methods.$mod(this.heading / 3.141592653589793 * 180, 360) - theta;
    }
  },
  $index: function(_, key) {
    var t1 = this.variables;
    return t1.$index(t1, key);
  },
  $indexSet: function(_, key, value) {
    var t1 = this.variables;
    t1.$indexSet(t1, key, value);
  },
  draw$1: function(ctx) {
    var t1, t2;
    t1 = $.getInterceptor$x(ctx);
    t1.save$0(ctx);
    t2 = this.opacity;
    if (t2 < 1)
      t1.set$globalAlpha(ctx, t2);
    t1.translate$2(ctx, this.x, this.y);
    t1.rotate$1(ctx, this.heading);
    this._drawLocal$1(ctx);
    t1.set$globalAlpha(ctx, 1);
    t1.restore$0(ctx);
  },
  erase$1: function(ctx) {
    var t1, t2, t3, t4, w, h;
    t1 = this.img;
    t2 = $.getInterceptor$x(t1);
    t3 = t2.get$width(t1);
    if (t3 !== (t3 | 0))
      return this.erase$1$bailout(1, ctx, t1, t2, t3);
    t4 = this.size;
    if (t4 == null)
      return this.erase$1$bailout(2, ctx, t1, t2, t3, t4);
    w = t3 * t4 * 1.4;
    t1 = t2.get$height(t1);
    if (t1 !== (t1 | 0))
      return this.erase$1$bailout(3, ctx, t1, 0, 0, 0, w);
    h = t1 * t4 * 1.4;
    t4 = this.x;
    if (typeof t4 !== "number")
      return this.erase$1$bailout(5, ctx, 0, t4, 0, 0, w, h);
    t4 -= w / 2;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.erase$1$bailout(6, ctx, t1, t4, 0, 0, w, h);
    $.clearRect$4$x(ctx, t4, t1 - h / 2, w, h);
  },
  erase$1$bailout: function(state0, ctx, t1, t2, t3, t4, w, h) {
    switch (state0) {
      case 0:
        t1 = this.img;
        t2 = $.getInterceptor$x(t1);
        t3 = t2.get$width(t1);
      case 1:
        state0 = 0;
        t4 = this.size;
      case 2:
        state0 = 0;
        w = $.$mul$n(t3, t4) * 1.4;
        t1 = t2.get$height(t1);
      case 3:
        state0 = 0;
        t2 = this.size;
      case 4:
        state0 = 0;
        h = $.$mul$n(t1, t2) * 1.4;
        t2 = this.x;
      case 5:
        state0 = 0;
        t2 = $.$sub$n(t2, w / 2);
        t1 = this.y;
      case 6:
        state0 = 0;
        $.clearRect$4$x(ctx, t2, $.$sub$n(t1, h / 2), w, h);
    }
  }
},

Tween: {"": "Object;segments,delay,duration,count,$function,running<,repeat,ontick,ondelta,onend,onstart",
  ondelta$1: function(arg0) {
    return this.ondelta.call$1(arg0);
  },
  onend$0: function() {
    return this.onend.call$0();
  },
  onstart$0: function() {
    return this.onstart.call$0();
  },
  play$0: function(_) {
    this.count = 0;
    this.running = true;
    this.animate$0();
  },
  isTweening$0: function() {
    var t1 = this.repeat;
    if (t1 === -1)
      return true;
    else
      return this.count <= this.duration * t1 + this.delay;
  },
  addControlPoint$2: function(value, time) {
    var t1;
    this.segments.push(new $.ControlPoint(value, time));
    t1 = this.segments;
    $.IterableMixinWorkaround_sortList(t1, new $.Tween_addControlPoint_closure());
  },
  getValue$0: function() {
    var t, t1, len, prev, t2, next, curr, y, a;
    t = this.getTime$0();
    t1 = this.segments;
    len = t1.length;
    if (len === 0)
      return 0;
    if (len === 1)
      if (0 >= len)
        throw $.ioore(0);
    if (0 >= len)
      throw $.ioore(0);
    prev = t1[0];
    t2 = len - 1;
    if (t2 < 0)
      throw $.ioore(t2);
    next = t1[t2];
    for (t2 = new $.ListIterator(t1, t1.length, 0, null), $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0(); prev = curr) {
      curr = t2._liblib0$_current;
      if (curr.get$time() <= t)
        ;
      else {
        next = curr;
        break;
      }
    }
    t1 = prev.get$time();
    t2 = next.get$time();
    if (t1 >= t2)
      return $.get$value$x(next);
    y = this.getY$1($.min(1, $.max((t - t1) / (t2 - t1), 0)));
    a = $.get$value$x(prev);
    return $.$add$ns($.$mul$n(y, $.$sub$n($.get$value$x(next), a)), a);
  },
  getTime$0: function() {
    var t = (this.count - this.delay) / this.duration;
    if (t < 0)
      return 0;
    else if (t > 1 && this.repeat !== 1)
      return t - C.JSNumber_methods.toInt$0(Math.floor(t));
    else
      return t;
  },
  getY$1: function(time) {
    var x, t1, t2;
    switch (this.$function) {
      case 0:
        return time;
      case 1:
        x = $.$mul$n($.$mul$n(time, 3.141592653589793), 0.5);
        t1 = typeof x !== "number";
        if (t1)
          $.throwExpression(new $.ArgumentError(x));
        t2 = Math.sin(x);
        if (t1)
          $.throwExpression(new $.ArgumentError(x));
        return t2 * Math.sin(x);
      case 2:
        t1 = $.$mul$n(time, -5);
        if (typeof t1 !== "number")
          $.throwExpression(new $.ArgumentError(t1));
        return 1 - Math.exp(t1);
      default:
        return time;
    }
  },
  animate$0: function() {
    var a, b;
    if (!this.running)
      return;
    if (this.isTweening$0()) {
      if (this.delay === 0 && this.count === 0)
        if (this.onstart != null)
          this.onstart$0();
      a = this.getValue$0();
      if (typeof a !== "number")
        return this.animate$0$bailout(1, a);
      this.count = this.count + 1;
      b = this.getValue$0();
      if (typeof b !== "number")
        return this.animate$0$bailout(2, a, b);
      if (this.delay === this.count)
        if (this.onstart != null)
          this.onstart$0();
      if (this.isTweening$0() && this.count >= this.delay)
        if (this.ondelta != null)
          this.ondelta$1(b - a);
      if (!this.isTweening$0())
        if (this.onend != null)
          this.onend$0();
    }
  },
  animate$0$bailout: function(state0, a, b) {
    switch (state0) {
      case 0:
        if (!this.running)
          return;
      default:
        if (state0 === 2 || state0 === 1 || state0 === 0 && this.isTweening$0())
          switch (state0) {
            case 0:
              if (this.delay === 0 && this.count === 0)
                if (this.onstart != null)
                  this.onstart$0();
              a = this.getValue$0();
            case 1:
              state0 = 0;
              this.count = this.count + 1;
              b = this.getValue$0();
            case 2:
              state0 = 0;
              if (this.delay === this.count)
                if (this.onstart != null)
                  this.onstart$0();
              if (this.isTweening$0() && this.count >= this.delay)
                if (this.ondelta != null)
                  this.ondelta$1($.$sub$n(b, a));
              if (!this.isTweening$0())
                if (this.onend != null)
                  this.onend$0();
          }
    }
  }
},

Tween_addControlPoint_closure: {"": "Closure;",
  call$2: function(a, b) {
    return a.get$time() - b.get$time();
  },
  "+call:2:0": 0
},

ControlPoint: {"": "Object;value>,time<"}},
1],
["_foreign_helper", "dart:_foreign_helper", , {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = object[init.dispatchPropertyName];
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  if (record == null)
    return C.C_UnknownJavaScriptObject;
  Object.defineProperty(Object.getPrototypeOf(object), init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return $.getNativeInterceptor(object);
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return $.Primitives_objectToString(receiver);
  },
  get$runtimeType: function(receiver) {
    return new $.TypeImpl($.getRuntimeTypeString(receiver), null);
  }
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  get$runtimeType: function(receiver) {
    return C.Type_a9w;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  get$runtimeType: function(receiver) {
    return C.Type_woc;
  }
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  },
  get$runtimeType: function(_) {
    return C.Type_6TA;
  }
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("add"));
    receiver.push(value);
  },
  removeAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + index));
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("removeAt"));
    return receiver.splice(index, 1)[0];
  },
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("remove"));
    for (i = 0; i < receiver.length; ++i)
      if ($.$eq(receiver[i], element)) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = new $.ListIterator(collection, collection.length, 0, null), $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(collection, "JSArray", 0)]); t1.moveNext$0();)
      this.add$1(receiver, t1._liblib0$_current);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  indexOf$2: function(receiver, element, start) {
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  toString$0: function(receiver) {
    return $.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  get$iterator: function(receiver) {
    var t1 = new $.ListIterator(receiver, receiver.length, 0, null);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(receiver, "JSArray", 0)]);
    return t1;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException(new $.ArgumentError(newLength));
    if (newLength < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(newLength)));
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      $.throwExpression(new $.UnsupportedError("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    receiver[index] = value;
  },
  $isList: true,
  $asInterceptor: null,
  $asList: null,
  $isList: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (typeof b !== "number")
      throw $.wrapException(new $.ArgumentError(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (isNaN(receiver))
      throw $.wrapException(new $.UnsupportedError("NaN"));
    if (receiver == Infinity || receiver == -Infinity)
      throw $.wrapException(new $.UnsupportedError("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    return this.toInt$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.wrapException(new $.ArgumentError(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.wrapException(new $.ArgumentError(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $and: function(receiver, other) {
    return (receiver & other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver >= other;
  },
  $isnum: true
},

JSInt: {"": "int/JSNumber;",
  get$runtimeType: function(receiver) {
    return C.Type_8aB;
  },
  $isdouble: true,
  $isnum: true,
  $isint: true
},

JSDouble: {"": "double/JSNumber;",
  get$runtimeType: function(receiver) {
    return C.Type_cGl;
  },
  $isdouble: true,
  $isnum: true
},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number")
      throw $.wrapException(new $.ArgumentError(index));
    if (index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    if (index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    return receiver.charCodeAt(index);
  },
  matchAsPrefix$2: function(receiver, string, start) {
    var t1, t2, i, t3;
    if (typeof start !== "number")
      return this.matchAsPrefix$2$bailout(1, string, start, receiver);
    if (start < 0 || start > string.length)
      throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + string.length));
    t1 = receiver.length;
    t2 = string.length;
    if (start + t1 > t2)
      return;
    for (i = 0; i < t1; ++i) {
      t3 = start + i;
      if (t3 < 0)
        $.throwExpression(new $.RangeError("value " + $.S(t3)));
      if (t3 >= t2)
        $.throwExpression(new $.RangeError("value " + $.S(t3)));
      t3 = string.charCodeAt(t3);
      if (i >= t1)
        $.throwExpression(new $.RangeError("value " + i));
      if (t3 !== receiver.charCodeAt(i))
        return;
    }
    return new $.StringMatch(start, string, receiver);
  },
  matchAsPrefix$2$bailout: function(state0, string, start, receiver) {
    var t1, t2, t3, i, t4, t5;
    t1 = $.getInterceptor$n(start);
    if (t1.$lt(start, 0) || t1.$gt(start, string.length))
      throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + string.length));
    t2 = receiver.length;
    t3 = string.length;
    if ($.$gt$n(t1.$add(start, t2), t3))
      return;
    for (i = 0; i < t2; ++i) {
      t4 = t1.$add(start, i);
      if (typeof t4 !== "number")
        $.throwExpression(new $.ArgumentError(t4));
      t5 = $.getInterceptor$n(t4);
      if (t5.$lt(t4, 0))
        $.throwExpression(new $.RangeError("value " + $.S(t4)));
      if (t5.$ge(t4, t3))
        $.throwExpression(new $.RangeError("value " + $.S(t4)));
      t4 = string.charCodeAt(t4);
      if (i >= t2)
        $.throwExpression(new $.RangeError("value " + i));
      if (t4 !== receiver.charCodeAt(i))
        return;
    }
    return new $.StringMatch(start, string, receiver);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  split$1: function(receiver, pattern) {
    return receiver.split(pattern);
  },
  startsWith$2: function(receiver, pattern, index) {
    var endIndex;
    if (index < 0 || index > receiver.length)
      throw $.wrapException(new $.RangeError("value " + index + " not in range 0.." + receiver.length));
    if (typeof pattern === "string") {
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern == receiver.substring(index, endIndex);
    }
    return $.matchAsPrefix$2$s(pattern, receiver, index) != null;
  },
  startsWith$1: function($receiver, pattern) {
    return this.startsWith$2($receiver, pattern, 0);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (typeof startIndex !== "number")
      return this.substring$2$bailout(1, startIndex, endIndex, receiver);
    endIndex = receiver.length;
    if (endIndex == null)
      return this.substring$2$bailout(2, startIndex, endIndex, receiver);
    if (startIndex < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(startIndex)));
    if (startIndex > endIndex)
      throw $.wrapException(new $.RangeError("value " + $.S(startIndex)));
    if (endIndex > receiver.length)
      throw $.wrapException(new $.RangeError("value " + endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$2$bailout: function(state0, startIndex, endIndex, receiver) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (typeof startIndex !== "number")
          $.throwExpression(new $.ArgumentError(startIndex));
        endIndex = receiver.length;
      case 2:
        var t1;
        state0 = 0;
        if (typeof endIndex !== "number")
          $.throwExpression(new $.ArgumentError(endIndex));
        t1 = $.getInterceptor$n(startIndex);
        if (t1.$lt(startIndex, 0))
          throw $.wrapException(new $.RangeError("value " + $.S(startIndex)));
        if (t1.$gt(startIndex, endIndex))
          throw $.wrapException(new $.RangeError("value " + $.S(startIndex)));
        if (endIndex == null)
          throw endIndex.$gt();
        if (endIndex > receiver.length)
          throw $.wrapException(new $.RangeError("value " + endIndex));
        return receiver.substring(startIndex, endIndex);
    }
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  indexOf$2: function(receiver, pattern, start) {
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException(new $.ArgumentError(start));
    if (start < 0 || start > receiver.length)
      throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + receiver.length));
    return receiver.indexOf(pattern, start);
  },
  indexOf$1: function($receiver, pattern) {
    return this.indexOf$2($receiver, pattern, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    if (startIndex < 0 || startIndex > receiver.length)
      throw $.wrapException(new $.RangeError("value " + startIndex + " not in range 0.." + receiver.length));
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$runtimeType: function(receiver) {
    return C.Type_IYi;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    return receiver[index];
  },
  $isString: true
}}],
["_isolate_helper", "dart:_isolate_helper", , {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext;
  $globalState = $._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript = init.currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  if (typeof version == "function" && typeof os == "object" && "system" in os)
    return $.IsolateNatives_computeThisScriptD8();
  if (typeof version == "function" && typeof system == "function")
    return thisFilename();
  return;
},

IsolateNatives_computeThisScriptD8: function() {
  var stack, matches;
  stack = new Error().stack;
  if (stack == null) {
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
    if (stack == null)
      throw $.wrapException(new $.UnsupportedError("No stack trace"));
  }
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException(new $.UnsupportedError("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, replyTo, context, t2;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : $[functionName];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      t1 = $globalState.topEventLoop;
      t1.enqueue$3;
      t1.events._add$1(new $._IsolateEvent(context, new $.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg]));
        t1.postMessage$1;
        self.postMessage(t2);
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg]));
    t1.postMessage$1;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = new $._StackTrace(exception, null);
      throw $.wrapException(new $._ExceptionImplementation(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, replyTo) {
  var t1;
  $.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = $.ReceivePortImpl$();
  t1 = $._Isolate_port();
  t1.toSendPort$0;
  replyTo.send$2("spawned", new $._NativeJsSendPort(t1, $globalState.currentContext.id));
  topLevel.call$0();
},

IsolateNatives__spawnWorker: function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { $.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
},

_waitForPendingPorts: function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports, $.JSArray).then$1(new $._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new $._JsSerializer(0, new $._MessageTraverserVisitedMap());
    t1._visited = new $._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new $._JsCopier(new $._MessageTraverserVisitedMap());
    t1._visited = new $._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new $._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

CloseToken: {"": "Object;", $isCloseToken: true},

JsIsolateSink: {"": "EventSink;_isClosed,_port<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = $.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isIsolateSink && $.$eq(this._port, other.get$_port());
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asEventSink: function() {
    return [null];
  },
  $asIsolateSink: null,
  $isIsolateSink: true
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    var t1;
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new $._EventLoop($.ListQueue$(null, $._IsolateEvent), 0);
    t1 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
    $.setRuntimeTypeInfo(t1, [$.JSInt, $._IsolateContext]);
    this.isolates = t1;
    t1 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
    $.setRuntimeTypeInfo(t1, [$.JSInt, null]);
    this.managers = t1;
    if (this.isWorker === true) {
      this.mainManager = new $._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id,ports,isolateStatics<",
  eval$1: function(code) {
    var old, result, t1;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null) {
        t1 = old;
        t1._setGlobals$0;
        $ = t1.get$isolateStatics();
      }
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw $.wrapException(new $._ExceptionImplementation("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if ($.$eq(this.ports._liblib2$_length, 0)) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    t2 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
    $.setRuntimeTypeInfo(t2, [$.JSInt, $.ReceivePort]);
    this.ports = t2;
    this.isolateStatics = new Isolate();
  },
  static: {
_IsolateContext$: function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $.$eq($globalState.rootContext.ports._liblib2$_length, 0))
      throw $.wrapException(new $._ExceptionImplementation("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true) {
        t2 = t1.isolates;
        t2.get$isEmpty;
        t2 = t2._liblib2$_length;
        if (typeof t2 !== "number")
          return this.runIteration$0$bailout(1, t1, t2);
        t2 = t2 === 0 && t1.topEventLoop.activeTimerCount === 0;
      } else
        t2 = false;
      if (t2) {
        t1 = t1.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "close"]));
        t1.postMessage$1;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  runIteration$0$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        $event = this.dequeue$0();
      case 1:
        var $event;
        if (state0 === 1 || state0 === 0 && $event == null)
          switch (state0) {
            case 0:
              this.checkOpenReceivePortsFromCommandLine$0();
              t1 = $globalState;
            case 1:
              if (state0 === 1 || state0 === 0 && t1.isWorker === true)
                switch (state0) {
                  case 0:
                    t2 = t1.isolates;
                    t2.get$isEmpty;
                    t2 = t2._liblib2$_length;
                  case 1:
                    state0 = 0;
                    t2 = $.$eq(t2, 0) && t1.topEventLoop.activeTimerCount === 0;
                }
              else
                t2 = false;
              if (t2) {
                t1 = t1.mainManager;
                t2 = $._serializeMessage($.makeLiteralMap(["command", "close"]));
                t1.postMessage$1;
                self.postMessage(t2);
              }
              return false;
          }
        $event.process$0();
        return true;
    }
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = new $._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)]));
        t1.postMessage$1;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    if (!this.this_0.runIteration$0())
      return;
    t1 = new $._ZoneTimer($.get$_Zone__current(), this, null);
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    t1._timer = $._createTimer(C.Duration_0, t1.get$_run());
  },
  "+call:0:0": 0
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  },
  "+call:0:0": 0
},

_BaseSendPort: {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    var t1;
    if (replyTo != null) {
      t1 = $.getInterceptor(replyTo);
      t1 = (typeof replyTo !== "object" || replyTo === null || !t1.$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !t1.$is_WorkerSendPort) && true;
    } else
      t1 = false;
    if (t1)
      throw $.wrapException(new $._ExceptionImplementation("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var t1, t2, t3, completer, port;
    t1 = null;
    t2 = t1;
    t3 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    $.setRuntimeTypeInfo(t3, [t2]);
    completer = new $._AsyncCompleter(t3, false);
    $.setRuntimeTypeInfo(completer, [t1]);
    completer._Completer$0(t2);
    port = $.ReceivePortImpl$();
    this.send$2(message, new $._NativeJsSendPort(port, $globalState.currentContext.id));
    port._liblib4$_callback = new $._BaseSendPort_call_closure(completer, port);
    return completer.future;
  },
  "+call:1:0": 0,
  $isSendPort: true
},

_BaseSendPort_call_closure: {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1, t2;
    t1 = this.port_1;
    t1._liblib4$_callback = null;
    $globalState.currentContext.unregister$1(t1._id);
    t1 = $.getInterceptor(value);
    t2 = this.completer_0;
    if (typeof value === "object" && value !== null && !!t1.$isException)
      t2.completeError$1(value);
    else
      t2.complete$1(t2, value);
  },
  "+call:2:0": 0
},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = $.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_liblib4$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t2.get$_isolateId();
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    t3 = $globalState.topEventLoop;
    t4 = "receive " + $.S(msg);
    t3.enqueue$3;
    t3.events._add$1(new $._IsolateEvent(isolate, new $._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), t4));
  },
  "+call:0:0": 0
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_liblib4$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1.get$_receivePort()._liblib4$_callback$2(t2.msg_0, t2.reply_1);
    }
  },
  "+call:0:0": 0
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_closure(this, message, replyTo));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = $.getInterceptor(other);
    if (typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort)
      t1 = $.$eq(this._workerId, other._workerId) && $.$eq(this._isolateId, other._isolateId) && $.$eq(this._receivePortId, other._receivePortId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = $.$shl$n(this._workerId, 16);
    t2 = $.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.postMessage$1;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  },
  "+call:0:0": 0
},

ReceivePortImpl: {"": "Object;_id<,_liblib4$_callback<",
  _liblib4$_callback$2: function(arg0, arg1) {
    return this._liblib4$_callback.call$2(arg0, arg1);
  },
  ReceivePortImpl$0: function() {
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this._id, this);
  },
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  "+call:1:0": 0
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_closure(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1.$indexSet(t1, map, true);
    t1 = map.get$values(map);
    t1.forEach$1(t1, new $._PendingSendPortFinder_visitMap_closure(this));
  },
  visitSendPort$1: function(port) {
  },
  visitIsolateSink$1: function(sink) {
    this.visitSendPort$1(sink._port);
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new $._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new $._PendingSendPortFinder([], new $._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_PendingSendPortFinder_visitList_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  "+call:1:0": 0
},

_PendingSendPortFinder_visitMap_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  "+call:1:0": 0
},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    var t1 = $.getInterceptor(x);
    if (typeof x === "object" && x !== null && !!t1.$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (typeof x === "object" && x !== null && !!t1.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    var t1 = $.getInterceptor(x);
    if (typeof x === "object" && x !== null && !!t1.$is_NativeJsSendPort)
      return new $._NativeJsSendPort(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!t1.$is_WorkerSendPort)
      return new $._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var result = new $.JsIsolateSink(false, this.visitSendPort$1(sink._port));
    result._isClosed = sink._isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new $._NativeJsSendPort(receivePort, isolateId);
    } else
      return new $._WorkerSendPort(managerId, receivePortId, isolateId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    result = new $.JsIsolateSink(false, port);
    result._isClosed = t1.$index(list, 2);
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return C.C_CloseToken;
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;_visited",
  traverse$1: function(x) {
    var result, t1;
    if ($._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = $.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isCloseToken)
      return this.visitCloseToken$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.wrapException("Message serialization: Illegal value " + $.S(x) + " passed");
  },
  static: {
_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
}}

},

_Copier: {"": "_MessageTraverser;_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[init.dispatchPropertyName])))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2, copy;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    copy = new $.LinkedHashMap(0, null, null, null, null, null, 0);
    $.setRuntimeTypeInfo(copy, [null, null]);
    t1.copy_0 = copy;
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    $.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  "+call:2:0": 0
},

_Serializer: {"": "_MessageTraverser;_nextFreeRefId,_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id, keys;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = map.get$keys();
    keys = this._serializeList$1($.List_List$from(t1, true, $.getRuntimeTypeArgument(t1, "IterableBase", 0)));
    t1 = map.get$values(map);
    return ["map", id, keys, this._serializeList$1($.List_List$from(t1, true, $.getRuntimeTypeArgument(t1, "IterableBase", 0)))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[init.dispatchPropertyName])))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len, null);
    for (t2 = result.length, i = 0; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
},

_Deserializer: {"": "Object;_deserialized",
  deserialize$1: function(x) {
    if ($._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = $.HashMap_HashMap(null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = $.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.isJsIndexable(dartList, dartList[init.dispatchPropertyName]))
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw $.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = new $.LinkedHashMap(0, null, null, null, null, null, 0);
    $.setRuntimeTypeInfo(result, [null, null]);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.isJsIndexable(keys, keys[init.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(1, keys, t1, x, result);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.isJsIndexable(values, values[init.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(2, keys, 0, 0, result, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, keys, t1, x, result, values) {
    switch (state0) {
      case 0:
        result = new $.LinkedHashMap(0, null, null, null, null, null, 0);
        $.setRuntimeTypeInfo(result, [null, null]);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, len, i;
        state0 = 0;
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
        if (typeof len !== "number")
          throw $.iae(len);
        t2 = $.getInterceptor$asx(values);
        i = 0;
        for (; i < len; ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.wrapException("Unexpected serialized object");
  },
  static: {
_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
}}

},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle?",
  TimerImpl$periodic$2: function(milliseconds, callback) {
    var t1;
    if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setInterval($.convertDartClosureToJS(new $.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
    } else
      throw $.wrapException(new $.UnsupportedError("Periodic timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.enqueue$3;
      t1.events._add$1(new $._IsolateEvent(t2, new $.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(new $.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw $.wrapException(new $.UnsupportedError("Timer greater than 0."));
  },
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
},

TimerImpl$periodic: function(milliseconds, callback) {
  var t1 = new $.TimerImpl(false, false, null);
  t1.TimerImpl$periodic$2(milliseconds, callback);
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0.set$_handle(null);
    this.callback_1.call$0();
  },
  "+call:0:0": 0
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  },
  "+call:0:0": 0
},

TimerImpl$periodic_closure: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  },
  "+call:0:0": 0
}}],
["_js_helper", "dart:_js_helper", , {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = $.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException(new $.ArgumentError(value));
  return res;
},

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.$add$ns($.Primitives_mirrorFunctionCacheName, "_" + $.S(id));
  $.Primitives_mirrorInvokeCacheName = $.$add$ns($.Primitives_mirrorInvokeCacheName, "_" + $.S(id));
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_printString: function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(string);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback($.getInterceptor(object));
  if ($.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = $.getRuntimeTypeInfo(object);
  return $.S($name) + $.joinArguments(t1, 0);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, $arguments, t1, t2, i;
  a = [];
  $arguments = $.substitute(codePoints.$asJSArray, $.getRuntimeTypeInfo(codePoints));
  t1 = $arguments == null ? null : $arguments[0];
  t2 = new $.ListIterator(codePoints, codePoints.length, 0, null);
  t2.$builtinTypeInfo = [t1];
  for (; t2.moveNext$0();) {
    i = t2._liblib0$_current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw $.wrapException(new $.ArgumentError(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSNumber_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw $.wrapException(new $.ArgumentError(i));
  }
  return $.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new $.ListIterator(charCodes, charCodes.length, 0, null), $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(charCodes, "JSArray", 0)]); t1.moveNext$0();) {
    i = t1._liblib0$_current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw $.wrapException(new $.ArgumentError(i));
    if (i < 0)
      throw $.wrapException(new $.ArgumentError(i));
    if (i > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException(new $.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException(new $.ArgumentError(object));
  object[key] = value;
},

Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
  var t1, buffer, $arguments, allNamedArguments, t2, listOfNamedArguments, selectorName, jsFunction;
  t1 = {};
  t1.argumentCount_0 = 0;
  buffer = $.StringBuffer$("");
  $arguments = [];
  t1.argumentCount_0 = $.$add$ns(t1.argumentCount_0, positionalArguments.length);
  C.JSArray_methods.addAll$1($arguments, positionalArguments);
  if ("call$catchAll" in $function) {
    allNamedArguments = $function.call$catchAll();
    if (namedArguments != null) {
      namedArguments.get$isEmpty;
      t2 = !$.$eq(namedArguments._liblib2$_length, 0);
    } else
      t2 = false;
    if (t2)
      namedArguments.forEach$1(namedArguments, new $.Primitives_applyFunction_closure(allNamedArguments));
    listOfNamedArguments = Object.getOwnPropertyNames(allNamedArguments);
    t2 = $.getInterceptor$asx(listOfNamedArguments);
    t1.argumentCount_0 = $.$add$ns(t1.argumentCount_0, t2.get$length(listOfNamedArguments));
    t2.forEach$1(listOfNamedArguments, new $.Primitives_applyFunction_closure0(buffer, $arguments, allNamedArguments));
  } else {
    if (namedArguments != null) {
      namedArguments.get$isEmpty;
      t2 = !$.$eq(namedArguments._liblib2$_length, 0);
    } else
      t2 = false;
    if (t2)
      namedArguments.forEach$1(namedArguments, new $.Primitives_applyFunction_closure1(t1, buffer, $arguments));
  }
  selectorName = "call$" + $.S(t1.argumentCount_0) + $.S(buffer);
  jsFunction = $function[selectorName];
  if (jsFunction == null) {
    if (namedArguments == null)
      t1 = null;
    else {
      namedArguments.get$keys;
      t1 = new $.LinkedHashMapKeyIterable(namedArguments);
      $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(namedArguments, "LinkedHashMap", 0)]);
      t1 = $.List_List$from(t1, true, $.getRuntimeTypeArgument(t1, "IterableBase", 0));
    }
    return $function.noSuchMethod$1($function, new $.JSInvocationMirror(C.Symbol_call, selectorName, 0, $arguments, t1, null));
  }
  return jsFunction.apply($function, $arguments);
},

iae: function(argument) {
  throw $.wrapException(new $.ArgumentError(argument));
},

ioore: function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.iae(index);
  throw $.wrapException(new $.RangeError("value " + $.S(index)));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new $.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: $.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = $.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return $.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw $.wrapException(ex);
},

makeLiteralListConst: function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
},

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new $.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1($.JsNoSuchMethodError$($.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = $.S(message) + " (Error " + ieErrorCode + ")";
          return t1.call$1(new $.NullError(t2, null));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1($.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1($.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new $.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new $.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new $.StackOverflowError();
    return t1.call$1(new $.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new $.StackOverflowError();
  return ex;
},

makeLiteralMap: function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.get$iterator$ax(keyValuePairs);
  result = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(result, [null, null]);
  for (; iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_closure1(closure, arg1, arg2));
  else
    throw $.wrapException(new $._ExceptionImplementation("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($globalState.currentContext, $.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
},

intTypeCast: function(value) {
  if (typeof value === "number" && Math.floor(value) === value || value == null)
    return value;
  throw $.wrapException(new $.CastErrorImplementation("CastError: Casting value of type " + $.Primitives_objectTypeName(value) + " to incompatible type int"));
},

throwCyclicInit: function(staticName) {
  throw $.wrapException(new $.CyclicInitializationError("Cyclic initialization for static " + $.S(staticName)));
},

createRuntimeType: function($name) {
  return new $.TypeImpl($name, null);
},

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return $.substitute(target["$as" + $.S(substitutionName)], $.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = $.getRuntimeTypeArguments(target, substitutionName);
  return $arguments == null ? null : $arguments[index];
},

runtimeTypeToString: function(type) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return type[0].builtin$cls + $.joinArguments(type, 1);
  else if (typeof type == "function")
    return type.builtin$cls;
  else
    return;
},

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = $.runtimeTypeToString(argument);
    str = typeof str === "string" ? str : str;
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

getRuntimeTypeString: function(object) {
  var className = typeof object === "object" && object !== null && object.constructor === Array ? "List" : $.getInterceptor(object).constructor.builtin$cls;
  return className + $.joinArguments(object.$builtinTypeInfo, 0);
},

substitute: function(substitution, $arguments) {
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = $.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = $.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

computeSignature: function(signature, context, contextName) {
  return $.invokeOn(signature, context, $.getRuntimeTypeArguments(context, contextName));
},

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

typeNameInChrome: function(obj) {
  return obj.constructor.name;
},

typeNameInSafari: function(obj) {
  return $.constructorNameFallback(obj);
},

typeNameInOpera: function(obj) {
  return $.constructorNameFallback(obj);
},

typeNameInFirefox: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

typeNameInIE: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

getFunctionForTypeNameOf: function() {
  var getTagFunction = $.getBaseFunctionForTypeNameOf();
  if (typeof dartExperimentalFixupGetTag == "function")
    return $.applyExperimentalFixup(dartExperimentalFixupGetTag, getTagFunction);
  return getTagFunction;
},

getBaseFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox$closure;
  else if (userAgent.indexOf("Trident/") !== -1)
    return $.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari$closure;
  else
    return $.constructorNameFallback$closure;
},

applyExperimentalFixup: function(fixupJSFunction, originalGetTagDartFunction) {
  return new $.applyExperimentalFixup_newGetTagDartFunction(fixupJSFunction((function(invoke, closure){return function(arg){ return invoke(closure, arg); };})($.callDartFunctionWith1Arg$closure.call$2, originalGetTagDartFunction)));
},

callDartFunctionWith1Arg: function(fn, arg) {
  return fn.call$1(arg);
},

toStringForNativeObject: function(obj) {
  return "Instance of " + $.get$getTypeNameOf().call$1(obj);
},

hashCodeForNativeObject: function(object) {
  return $.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

defineNativeMethods: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
},

defineNativeMethodsNonleaf: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsExtended: function(tags, interceptorClass, subclassInterceptorClasses) {
  var classes, t1, i;
  if ($.interceptorToTag == null)
    $.interceptorToTag = [];
  classes = subclassInterceptorClasses;
  for (t1 = classes.length, i = 0; i < t1; ++i) {
    $.interceptorToTag.push(classes[i]);
    $.interceptorToTag.push(tags);
  }
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsCommon: function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
},

defineNativeMethodsFinish: function() {
},

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = $.interceptorsByTag;
  if (map == null)
    return;
  return hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
},

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag, t1;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  tag = $.get$getTypeNameOf().call$1(obj);
  interceptor = $.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = $.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptor == null)
    return;
  t1 = $.leafTags;
  if (t1 != null && t1[tag] === true)
    return $.makeLeafDispatchRecord(interceptor);
  else
    return $.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null, null);
},

makeLeafDispatchRecord: function(interceptor) {
  return $.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

stringContainsUnchecked: function(receiver, other, startIndex) {
  return !$.$eq(C.JSString_methods.indexOf$2(receiver, other, startIndex), -1);
},

JSInvocationMirror: {"": "Object;_liblib$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
  get$memberName: function() {
    return this._liblib$_memberName;
  },
  get$positionalArguments: function() {
    var t1, argumentCount, list, index;
    if (this._kind === 1)
      return C.List_empty;
    t1 = this._arguments;
    argumentCount = t1.length - this._namedArgumentNames.length;
    if (argumentCount === 0)
      return C.List_empty;
    list = [];
    for (index = 0; index < argumentCount; ++index) {
      if (index >= t1.length)
        throw $.ioore(index);
      list.push(t1[index]);
    }
    return $.makeLiteralListConst(list);
  },
  get$namedArguments: function() {
    var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4;
    if (this._kind !== 0)
      return $.makeLiteralMap([]);
    t1 = this._namedArgumentNames;
    namedArgumentCount = t1.length;
    t2 = this._arguments;
    namedArgumentsStartIndex = t2.length - namedArgumentCount;
    if (namedArgumentCount === 0)
      return $.makeLiteralMap([]);
    map = new $.LinkedHashMap(0, null, null, null, null, null, 0);
    $.setRuntimeTypeInfo(map, [$.Symbol0, null]);
    for (i = 0; i < namedArgumentCount; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t3 = t1[i];
      t4 = namedArgumentsStartIndex + i;
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      map.$indexSet(map, new $.Symbol(t3), t2[t4]);
    }
    return map;
  },
  static: {
"": "JSInvocationMirror_METHOD,JSInvocationMirror_GETTER,JSInvocationMirror_SETTER",
}

},

Primitives_applyFunction_closure: {"": "Closure;allNamedArguments_1",
  call$2: function(key, argument) {
    this.allNamedArguments_1[key] = argument;
  },
  "+call:2:0": 0
},

Primitives_applyFunction_closure0: {"": "Closure;buffer_2,arguments_3,allNamedArguments_4",
  call$1: function($name) {
    this.buffer_2.write$1("$" + $.S($name));
    this.arguments_3.push(this.allNamedArguments_4[$name]);
  },
  "+call:1:0": 0
},

Primitives_applyFunction_closure1: {"": "Closure;box_0,buffer_5,arguments_6",
  call$2: function($name, argument) {
    var t1;
    this.buffer_5.write$1("$" + $.S($name));
    this.arguments_6.push(argument);
    t1 = this.box_0;
    t1.argumentCount_0 = $.$add$ns(t1.argumentCount_0, 1);
  },
  "+call:2:0": 0
},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new $.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Error;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + $.S(this._message);
    return "NullError: Cannot call \"" + $.S(t1) + "\" on null";
  },
  $isError: true
},

JsNoSuchMethodError: {"": "Error;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + $.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + $.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + $.S(this._message) + ")";
  },
  $isError: true,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new $.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Error;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  }
},

unwrapException_saveStackTrace: {"": "Closure;ex_0",
  call$1: function(error) {
    var t1 = $.getInterceptor(error);
    if (typeof error === "object" && error !== null && !!t1.$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  },
  "+call:1:0": 0
},

_StackTrace: {"": "Object;_exception,_trace",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  "+call:0:0": 0
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  "+call:0:0": 0
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  "+call:0:0": 0
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

BoundClosure: {"": "Closure;_self,_liblib$_target,_receiver",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = $.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
      return false;
    return this._self === other._self && this._liblib$_target === other._liblib$_target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._self) + $.get$hashCode$(this._liblib$_target) + $.get$hashCode$(this._receiver) & 0x3ffffff;
  },
  $isBoundClosure: true
},

Creates: {"": "Object;types"},

Returns: {"": "Object;types"},

JSName: {"": "Object;name>"},

TypeErrorImplementation: {"": "Error;message",
  toString$0: function(_) {
    return this.message;
  },
  $isError: true
},

CastErrorImplementation: {"": "Error;message",
  toString$0: function(_) {
    return this.message;
  },
  $isError: true
},

FallThroughErrorImplementation: {"": "FallThroughError;",
  toString$0: function(_) {
    return "Switch case fall-through.";
  }
},

TypeImpl: {"": "Object;_typeName,_unmangledName",
  toString$0: function(_) {
    var t1, unmangledName, unmangledName0;
    t1 = this._unmangledName;
    if (t1 != null)
      return t1;
    unmangledName = this._typeName;
    unmangledName0 = $.unmangleGlobalNameIfPreservedAnyways(unmangledName);
    unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
    this._unmangledName = unmangledName;
    return unmangledName;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = $.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isTypeImpl && $.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true
},

applyExperimentalFixup_newGetTagDartFunction: {"": "Closure;newGetTagJSFunction_0",
  call$1: function(object) {
    return this.newGetTagJSFunction_0(object);
  },
  "+call:1:0": 0
},

JSSyntaxRegExp: {"": "Object;_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
  get$_nativeGlobalVersion: function() {
    var t1 = this._nativeGlobalRegExp;
    if (t1 != null)
      return t1;
    t1 = this._nativeRegExp;
    t1 = $.JSSyntaxRegExp_makeNative(t1.source, t1.multiline, !t1.ignoreCase, true);
    this._nativeGlobalRegExp = t1;
    return t1;
  },
  get$_nativeAnchoredVersion: function() {
    var t1 = this._nativeAnchoredRegExp;
    if (t1 != null)
      return t1;
    t1 = this._nativeRegExp;
    t1 = $.JSSyntaxRegExp_makeNative(t1.source + "|()", t1.multiline, !t1.ignoreCase, true);
    this._nativeAnchoredRegExp = t1;
    return t1;
  },
  _execGlobal$2: function(string, start) {
    var regexp, match;
    regexp = this.get$_nativeGlobalVersion();
    regexp.lastIndex = start;
    match = regexp.exec(string);
    if (match == null)
      return;
    return $._MatchImplementation$(this, match);
  },
  _execAnchored$2: function(string, start) {
    var regexp, match, t1, t2;
    regexp = this.get$_nativeAnchoredVersion();
    regexp.lastIndex = start;
    match = regexp.exec(string);
    if (match == null)
      return;
    t1 = match.length;
    t2 = t1 - 1;
    if (t2 < 0)
      throw $.ioore(t2);
    if (match[t2] != null)
      return;
    $.set$length$asx(match, t2);
    return $._MatchImplementation$(this, match);
  },
  matchAsPrefix$2: function(_, string, start) {
    if (start < 0 || start > string.length)
      throw $.wrapException(new $.RangeError("value " + start + " not in range 0.." + string.length));
    return this._execAnchored$2(string, start);
  },
  static: {
JSSyntaxRegExp_makeNative: function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  m = multiLine ? "m" : "";
  i = caseSensitive ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.wrapException(new $.FormatException("Illegal RegExp pattern: " + pattern + ", " + errorMessage));
}}

},

_MatchImplementation: {"": "Object;pattern,_match",
  get$start: function(_) {
    return this._match.index;
  },
  get$end: function() {
    var t1, t2;
    t1 = this._match;
    t2 = t1.index;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1 = $.get$length$asx(t1[0]);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return t2 + t1;
  },
  $index: function(_, index) {
    var t1 = this._match;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  _MatchImplementation$2: function(pattern, _match) {
  },
  static: {
_MatchImplementation$: function(pattern, _match) {
  var t1 = new $._MatchImplementation(pattern, _match);
  t1._MatchImplementation$2(pattern, _match);
  return t1;
}}

},

_AllMatchesIterable: {"": "IterableBase;_re,_string",
  get$iterator: function(_) {
    return new $._AllMatchesIterator(this._re, this._string, null);
  },
  $asIterableBase: function() {
    return [$.Match];
  }
},

_AllMatchesIterator: {"": "Object;_regExp,_string,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, index;
    if (this._string == null)
      return false;
    t1 = this._liblib$_current;
    if (t1 != null) {
      t1.get$end;
      t1 = t1._match;
      t2 = t1.index;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1 = $.get$length$asx(t1[0]);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      index = t2 + t1;
      t1 = this._liblib$_current;
      t1.get$start;
      if (t1._match.index === index)
        ++index;
    } else
      index = 0;
    this._liblib$_current = this._regExp._execGlobal$2(this._string, index);
    if (this._liblib$_current == null) {
      this._string = null;
      return false;
    }
    return true;
  }
},

StringMatch: {"": "Object;start>,input,pattern",
  get$end: function() {
    var t1 = this.start;
    if (typeof t1 !== "number")
      return this.get$end$bailout(1, t1);
    return t1 + this.pattern.length;
  },
  get$end$bailout: function(state0, t1) {
    return $.$add$ns(t1, this.pattern.length);
  },
  $index: function(_, g) {
    if (typeof g !== "number")
      return this.$$index$bailout(1, g);
    if (g !== 0)
      $.throwExpression(new $.RangeError("value " + $.S(g)));
    return this.pattern;
  },
  $$index$bailout: function(state0, g) {
    if (!$.$eq(g, 0))
      $.throwExpression(new $.RangeError("value " + $.S(g)));
    return this.pattern;
  }
}}],
["dart._collection.dev", "dart:_collection-dev", , {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3, t4;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.isJsIndexable(src, src[init.dispatchPropertyName])))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.isJsIndexable(dst, dst[init.dispatchPropertyName]))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    throw $.iae(dstStart);
  if (srcStart < dstStart) {
    if (typeof count !== "number")
      throw $.iae(count);
    i = srcStart + count - 1;
    j = dstStart + count - 1;
    t1 = src.length;
    t2 = dst.length;
    for (; i >= srcStart; --i, --j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  } else {
    if (typeof count !== "number")
      throw $.iae(count);
    t1 = srcStart + count;
    t2 = src.length;
    t3 = dst.length;
    j = dstStart;
    i = srcStart;
    for (; i < t1; ++i, ++j) {
      if (i >>> 0 !== i || i >= t2)
        throw $.ioore(i);
      t4 = src[i];
      if (j >>> 0 !== j || j >= t3)
        throw $.ioore(j);
      dst[j] = t4;
    }
  }
},

Arrays_copy$bailout: function(state0, src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2;
  if (typeof dstStart !== "number")
    throw $.iae(dstStart);
  if (srcStart < dstStart) {
    if (typeof count !== "number")
      throw $.iae(count);
    i = srcStart + count - 1;
    j = dstStart + count - 1;
    t1 = $.getInterceptor$asx(src);
    for (; i >= srcStart; --i, --j)
      C.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
  } else {
    if (typeof count !== "number")
      throw $.iae(count);
    t1 = srcStart + count;
    t2 = $.getInterceptor$asx(src);
    j = dstStart;
    i = srcStart;
    for (; i < t1; ++i, ++j)
      C.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
  }
},

Arrays_indexOf: function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element))
      return i;
  }
  return -1;
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new $.ListIterator(iterable, iterable.length, 0, null), $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(iterable, "JSArray", 0)]); t1.moveNext$0();)
    f.call$1(t1._liblib0$_current);
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw $.ioore(i);
    if (t1[i] === iterable)
      return $.S(leftDelimiter) + "..." + $.S(rightDelimiter);
  }
  result = $.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw $.ioore(0);
    t1.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround_sortList: function(list, compare) {
  $.Sort__doSort(list, 0, list.length - 1, compare);
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  var t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) || t1.$gt(start, list.length)) {
    t1 = list.length;
    throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + t1));
  }
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) || t1.$gt(end, list.length)) {
    t1 = list.length;
    throw $.wrapException(new $.RangeError("value " + $.S(end) + " not in range " + $.S(start) + ".." + t1));
  }
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = $.$sub$n(end, start);
  if ($.$eq($length, 0))
    return;
  if (skipCount < 0)
    throw $.wrapException(new $.ArgumentError(skipCount));
  if (typeof $length !== "number")
    throw $.iae($length);
  if (skipCount + $length > $.get$length$asx(from))
    throw $.wrapException(new $.StateError("Not enough elements"));
  $.Arrays_copy(from, skipCount, list, start, $length);
},

Sort__doSort: function(a, left, right, compare) {
  if ($.$le$n($.$sub$n(right, left), 32))
    $.Sort_insertionSort_(a, left, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, right, compare);
},

Sort_insertionSort_: function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.isJsIndexable(a, a[init.dispatchPropertyName]))
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  if (typeof left !== "number")
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  if (typeof right !== "number")
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i >>> 0 !== i || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t1 = $.$gt$n(compare.call$2(a[t1], el), 0);
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
},

Sort_insertionSort_$bailout: function(state0, a, left, right, compare) {
  var i, t1, t2, el, j, t3;
  for (i = $.$add$ns(left, 1), t1 = $.getInterceptor$asx(a); t2 = $.getInterceptor$n(i), t2.$le(i, right); i = t2.$add(i, 1)) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      t3 = $.getInterceptor$n(j);
      if (!(t3.$gt(j, left) && $.$gt$n(compare.call$2(t1.$index(a, t3.$sub(j, 1)), el), 0)))
        break;
      t1.$indexSet(a, j, t1.$index(a, t3.$sub(j, 1)));
      j = t3.$sub(j, 1);
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var t1, sixth, t2, index1, index5, index3, index2, index4, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, t3;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.isJsIndexable(a, a[init.dispatchPropertyName]))
    return $.Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  t1 = $.getInterceptor$n(right);
  sixth = $.$tdiv$n($.$add$ns(t1.$sub(right, left), 1), 6);
  t2 = $.getInterceptor$ns(left);
  index1 = t2.$add(left, sixth);
  index5 = t1.$sub(right, sixth);
  index3 = $.$tdiv$n(t2.$add(left, right), 2);
  t2 = $.getInterceptor$n(index3);
  index2 = t2.$sub(index3, sixth);
  index4 = t2.$add(index3, sixth);
  t2 = a.length;
  if (index1 >>> 0 !== index1 || index1 >= t2)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 >>> 0 !== index2 || index2 >= t2)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 >>> 0 !== index3 || index3 >= t2)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 >>> 0 !== index4 || index4 >= t2)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 >>> 0 !== index5 || index5 >= t2)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left >>> 0 !== left || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right >>> 0 !== right || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  if ($.$eq(compare.call$2(el2, el4), 0)) {
    for (k = less; k <= great; ++k) {
      if (k >>> 0 !== k || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t1 = $.getInterceptor(comp);
      if (t1.$eq(comp, 0))
        continue;
      if (t1.$lt(comp, 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >>> 0 !== less || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great >>> 0 !== great || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t1 = $.getInterceptor$n(comp);
          if (t1.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            t1 = t1.$lt(comp, 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >>> 0 !== less || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
    pivots_are_equal = true;
  } else {
    for (k = less; k <= great; ++k) {
      if (k >>> 0 !== k || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >>> 0 !== less || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great >>> 0 !== great || great >= a.length)
            throw $.ioore(great);
          if ($.$gt$n(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >>> 0 !== less || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
    pivots_are_equal = false;
  }
  t1 = less - 1;
  t2 = a.length;
  if (t1 >>> 0 !== t1 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (left >= t2)
    throw $.ioore(left);
  a[left] = t3;
  a[t1] = el2;
  t1 = great + 1;
  if (t1 >>> 0 !== t1 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (right >= t2)
    throw $.ioore(right);
  a[right] = t3;
  a[t1] = el4;
  $.Sort__doSort(a, left, less - 2, compare);
  $.Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >>> 0 !== less || less >= a.length)
        throw $.ioore(less);
      if (!$.$eq(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great >>> 0 !== great || great >= a.length)
        throw $.ioore(great);
      if (!$.$eq(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$eq(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
    $.Sort__doSort(a, less, great, compare);
  } else
    $.Sort__doSort(a, less, great, compare);
},

Sort__dualPivotQuicksort$bailout: function(state0, a, left, right, compare, index5, index1, t1, el2, t3, el4, less, great) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = $.getInterceptor$n(right);
      sixth = $.$tdiv$n($.$add$ns(t1.$sub(right, left), 1), 6);
      t2 = $.getInterceptor$ns(left);
      index1 = t2.$add(left, sixth);
      index5 = t1.$sub(right, sixth);
      index3 = $.$tdiv$n(t2.$add(left, right), 2);
      t3 = $.getInterceptor$n(index3);
      index2 = t3.$sub(index3, sixth);
      index4 = t3.$add(index3, sixth);
      t3 = $.getInterceptor$asx(a);
      el1 = t3.$index(a, index1);
      el2 = t3.$index(a, index2);
      el3 = t3.$index(a, index3);
      el4 = t3.$index(a, index4);
      el5 = t3.$index(a, index5);
      if ($.$gt$n(compare.call$2(el1, el2), 0)) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if ($.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if ($.$gt$n(compare.call$2(el1, el3), 0)) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if ($.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if ($.$gt$n(compare.call$2(el1, el4), 0)) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if ($.$gt$n(compare.call$2(el3, el4), 0)) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if ($.$gt$n(compare.call$2(el2, el5), 0)) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if ($.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if ($.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t3.$indexSet(a, index1, el1);
      t3.$indexSet(a, index3, el3);
      t3.$indexSet(a, index5, el5);
      t3.$indexSet(a, index2, t3.$index(a, left));
      t3.$indexSet(a, index4, t3.$index(a, right));
      less = t2.$add(left, 1);
    case 2:
      state0 = 0;
      great = t1.$sub(right, 1);
    case 3:
      var sixth, t2, index3, index2, index4, el1, el3, el5, t0, k, ak, comp, t4, less0, great0, pivots_are_equal;
      state0 = 0;
      if ($.$eq(compare.call$2(el2, el4), 0)) {
        for (k = less; t1 = $.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
          ak = t3.$index(a, k);
          comp = compare.call$2(ak, el2);
          t2 = $.getInterceptor(comp);
          if (t2.$eq(comp, 0))
            continue;
          if (t2.$lt(comp, 0)) {
            if (!t1.$eq(k, less)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              t3.$indexSet(a, less, ak);
            }
            less = $.$add$ns(less, 1);
          } else
            for (; true;) {
              comp = compare.call$2(t3.$index(a, great), el2);
              t2 = $.getInterceptor$n(comp);
              if (t2.$gt(comp, 0)) {
                great = $.$sub$n(great, 1);
                continue;
              } else {
                t4 = $.getInterceptor$n(great);
                if (t2.$lt(comp, 0)) {
                  t3.$indexSet(a, k, t3.$index(a, less));
                  less0 = $.$add$ns(less, 1);
                  t3.$indexSet(a, less, t3.$index(a, great));
                  great0 = t4.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t3.$indexSet(a, k, t3.$index(a, great));
                  great0 = t4.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; t1 = $.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
          ak = t3.$index(a, k);
          if ($.$lt$n(compare.call$2(ak, el2), 0)) {
            if (!t1.$eq(k, less)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              t3.$indexSet(a, less, ak);
            }
            less = $.$add$ns(less, 1);
          } else if ($.$gt$n(compare.call$2(ak, el4), 0))
            for (; true;)
              if ($.$gt$n(compare.call$2(t3.$index(a, great), el4), 0)) {
                great = $.$sub$n(great, 1);
                if ($.$lt$n(great, k))
                  break;
                continue;
              } else {
                t2 = $.getInterceptor$n(great);
                if ($.$lt$n(compare.call$2(t3.$index(a, great), el2), 0)) {
                  t3.$indexSet(a, k, t3.$index(a, less));
                  less0 = $.$add$ns(less, 1);
                  t3.$indexSet(a, less, t3.$index(a, great));
                  great0 = t2.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  t3.$indexSet(a, k, t3.$index(a, great));
                  great0 = t2.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
        }
        pivots_are_equal = false;
      }
      t1 = $.getInterceptor$n(less);
      t3.$indexSet(a, left, t3.$index(a, t1.$sub(less, 1)));
      t3.$indexSet(a, t1.$sub(less, 1), el2);
      t2 = $.getInterceptor$ns(great);
      t3.$indexSet(a, right, t3.$index(a, t2.$add(great, 1)));
      t3.$indexSet(a, t2.$add(great, 1), el4);
      $.Sort__doSort(a, left, t1.$sub(less, 2), compare);
      $.Sort__doSort(a, t2.$add(great, 2), right, compare);
      if (pivots_are_equal)
        return;
      if (t1.$lt(less, index1) && t2.$gt(great, index5)) {
        for (; $.$eq(compare.call$2(t3.$index(a, less), el2), 0);)
          less = $.$add$ns(less, 1);
        for (; $.$eq(compare.call$2(t3.$index(a, great), el4), 0);)
          great = $.$sub$n(great, 1);
        for (k = less; t1 = $.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
          ak = t3.$index(a, k);
          if ($.$eq(compare.call$2(ak, el2), 0)) {
            if (!t1.$eq(k, less)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              t3.$indexSet(a, less, ak);
            }
            less = $.$add$ns(less, 1);
          } else if ($.$eq(compare.call$2(ak, el4), 0))
            for (; true;)
              if ($.$eq(compare.call$2(t3.$index(a, great), el4), 0)) {
                great = $.$sub$n(great, 1);
                if ($.$lt$n(great, k))
                  break;
                continue;
              } else {
                t2 = $.getInterceptor$n(great);
                if ($.$lt$n(compare.call$2(t3.$index(a, great), el2), 0)) {
                  t3.$indexSet(a, k, t3.$index(a, less));
                  less0 = $.$add$ns(less, 1);
                  t3.$indexSet(a, less, t3.$index(a, great));
                  great0 = t2.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  t3.$indexSet(a, k, t3.$index(a, great));
                  great0 = t2.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
        }
        $.Sort__doSort(a, less, great, compare);
      } else
        $.Sort__doSort(a, less, great, compare);
  }
},

ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    var t1 = new $.ListIterator(this, this.get$length(this), 0, null);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    return t1;
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw $.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
  },
  $asIterableBase: null
},

SubListIterable: {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length = $.get$length$asx(this._iterable);
    return $length;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._start;
    if ($.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (typeof t1 !== "number")
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    return $length - t1;
  },
  get$length$bailout2: function(state0, $length, t1) {
    switch (state0) {
      case 0:
        $length = $.get$length$asx(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._start;
      case 2:
        state0 = 0;
        if ($.$ge$n(t1, $length))
          return 0;
        return $.$sub$n($length, t1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    if (typeof index !== "number")
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1) {
      t1 = this.get$length(this);
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
    }
    return $.elementAt$1$ax(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        var realIndex;
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
        if (!$.$lt$n(index, 0)) {
          t1 = this.get$_endIndex();
          if (typeof t1 !== "number")
            throw $.iae(t1);
          t1 = $.$ge$n(realIndex, t1);
        } else
          t1 = true;
        if (t1) {
          t1 = this.get$length(this);
          throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
        }
        return $.elementAt$1$ax(this._iterable, realIndex);
    }
  },
  $asListIterable: null
},

ListIterator: {"": "Object;_iterable,_liblib0$_length,_index,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = $.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (!$.$eq(this._liblib0$_length, $length))
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    t3 = this._index;
    if (typeof $length !== "number")
      throw $.iae($length);
    if (t3 >= $length) {
      this._liblib0$_current = null;
      return false;
    }
    this._liblib0$_current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t1 = new $.MappedIterator(null, t1, this._f);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, "MappedIterable", 0), $.getRuntimeTypeArgument(this, "MappedIterable", 1)]);
    return t1;
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  $asIterableBase: function(S, T) {
    return [T];
  }
},

MappedIterator: {"": "Iterator;_liblib0$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib0$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib0$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib0$_current;
  },
  $asIterator: function(S, T) {
    return [T];
  }
},

MappedListIterable: {"": "ListIterable;_liblib0$_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$asx(this._liblib0$_source);
  },
  elementAt$1: function(_, index) {
    return this._f$1($.elementAt$1$ax(this._liblib0$_source, index));
  },
  $asListIterable: function(S, T) {
    return [T];
  }
},

SkipIterable: {"": "IterableBase;_iterable,_skipCount",
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t1 = new $.SkipIterator(t1, this._skipCount);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, "SkipIterable", 0)]);
    return t1;
  },
  $asIterableBase: null
},

SkipIterator: {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  $asIterator: null
},

FixedLengthListMixin: {"": "Object;"},

Symbol: {"": "Object;_name<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = $.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isSymbol && $.$eq(this._name, other._name);
  },
  get$hashCode: function(_) {
    var t1 = $.get$hashCode$(this._name);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return 536870911 & 664597 * t1;
  },
  toString$0: function(_) {
    return "Symbol(\"" + $.S(this._name) + "\")";
  },
  $isSymbol: true,
  static: {
"": "Symbol_validationPattern",
}

}}],
["dart._js_names", "dart:_js_names", , {
unmangleGlobalNameIfPreservedAnyways: function($name) {
  return init.mangledGlobalNames[$name];
}}],
["dart.async", "dart:async", , {
_attachStackTrace: function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
},

getAttachedStackTrace: function(o) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  return t1.$index(t1, o);
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      $.unwrapException(exception);
      milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  $.get$_asyncCallbacks()._add$1(callback);
  if (!$._callbacksAreEnqueued) {
    $._createTimer(C.Duration_0, $._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

runAsync: function(callback) {
  var currentZone = $.get$_Zone__current();
  currentZone.runAsync$2(callback, currentZone);
},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error) {
  $.get$_Zone__current().handleUncaughtError$1(error);
},

_nullDoneHandler: function() {
},

_asyncError: function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    s = new $._StackTrace(exception, null);
    onError.call$1($._asyncError(e, s));
  }

},

_cancelAndError: function(subscription, future) {
  return new $._cancelAndError_closure(subscription, future);
},

_createTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_createPeriodicTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return $.TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
},

_Completer: {"": "Object;",
  complete$1: function(_, value) {
    if (this._isComplete)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._isComplete = true;
    this._setFutureValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    if (this._isComplete)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._isComplete = true;
    this._setFutureError$1(error);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  _Completer$0: function(T) {
    var t1 = this.future._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
  }
},

_AsyncCompleter: {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    var future, t1;
    future = this.future;
    future._asyncSetValue$1(value);
    t1 = future._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._checkIfDone$0();
  },
  _setFutureError$1: function(error) {
    var future, t1;
    future = this.future;
    future._asyncSetError$1(error);
    t1 = future._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._checkIfDone$0();
  },
  $as_Completer: null
},

_FutureListenerWrapper: {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._setValueUnchecked$1(value);
  },
  _sendError$1: function(error) {
    this.future._setErrorUnchecked$1(error);
  },
  _inSameErrorZone$1: function(otherZone) {
    return $.$eq(this.future._zone.get$_errorZone(), otherZone.get$_errorZone());
  }
},

_ErrorZoneBoundaryListener: {"": "Object;_nextListener@,_listener",
  _inSameErrorZone$1: function(otherZone) {
    throw $.wrapException(new $.UnsupportedError("A Zone boundary doesn't support the inSameErrorZone test."));
  },
  _sendValue$1: function(value) {
    this._listener._sendValue$1(value);
  },
  _sendError$1: function(error) {
    $.get$_Zone__current().handleUncaughtError$1(error);
  }
},

_FutureImpl: {"": "Object;_state@,_zone,_resultOrListeners<",
  get$_isChained: function() {
    return (this._state & 2) !== 0;
  },
  then$2$onError: function(f, onError) {
    var t1, t2;
    if (onError == null) {
      t1 = new $._ThenFuture(f, null, 0, $.get$_Zone__current(), null);
      t1.$builtinTypeInfo = [null, null];
      t2 = t1._zone;
      t2._openCallbacks = t2._openCallbacks + 1;
      this._addListener$1(t1);
      return t1;
    }
    t1 = new $._SubscribeFuture(onError, f, null, 0, $.get$_Zone__current(), null);
    t1.$builtinTypeInfo = [null, null];
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    this._addListener$1(t1);
    return t1;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1, t2;
    t1 = new $._CatchErrorFuture(test, f, null, 0, $.get$_Zone__current(), null);
    t1.$builtinTypeInfo = [null];
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    this._addListener$1(t1);
    return t1;
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _inSameErrorZone$1: function(otherZone) {
    return $.$eq(this._zone.get$_errorZone(), otherZone.get$_errorZone());
  },
  _setValue$1: function(value) {
    if (this._state !== 0)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._setValueUnchecked$1(value);
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1", null);
  },
  _setValueUnchecked$1: function(value) {
    var listeners, listeners0;
    listeners = (this._state & 2) !== 0 ? null : this._removeListeners$0();
    this._state = 8;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  _setError$1: function(error) {
    if (this._state !== 0)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._setErrorUnchecked$1(error);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1", null);
  },
  _setErrorUnchecked$1: function(error) {
    var t1, hasListeners, listeners, listeners0;
    t1 = this._state;
    if ((t1 & 2) !== 0) {
      hasListeners = t1 === 2;
      listeners = null;
    } else {
      listeners = this._removeListeners$0();
      hasListeners = listeners != null;
    }
    this._state = 12;
    this._resultOrListeners = error;
    if (!hasListeners) {
      this._zone.handleUncaughtError$1(this._resultOrListeners);
      return;
    }
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
    }
  },
  _asyncSetValue$1: function(value) {
    if (this._state !== 0)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._state = 1;
    $.runAsync(new $._FutureImpl__asyncSetValue_closure(this, value));
  },
  _asyncSetError$1: function(error) {
    if (this._state !== 0)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._state = 1;
    $.runAsync(new $._FutureImpl__asyncSetError_closure(this, error));
  },
  _addListener$1: function(listener) {
    var t1, t2, future, currentZone;
    t1 = {};
    t1.listener_0 = listener;
    if (!t1.listener_0._inSameErrorZone$1(this._zone))
      t1.listener_0 = new $._ErrorZoneBoundaryListener(null, t1.listener_0);
    t2 = this._state;
    if ((t2 & 2) !== 0) {
      this._state = 2;
      future = this._resultOrListeners;
      if (future.get$_isChained()) {
        future = future.get$_chainSource();
        this._resultOrListeners = future;
      }
      future._addListener$1(t1.listener_0);
      return;
    }
    if (t2 >= 8) {
      currentZone = $.get$_Zone__current();
      currentZone.runAsync$2(new $._FutureImpl__addListener_closure(t1, this), currentZone);
    } else {
      t1.listener_0.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = t1.listener_0;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    var t1, t2;
    t1 = this._state;
    if (t1 < 8)
      future._chainFromFuture$1(this);
    else {
      t2 = this._resultOrListeners;
      if (t1 === 8) {
        if (future._state !== 0)
          $.throwExpression(new $.StateError("Future already completed"));
        future._setValueUnchecked$1(t2);
      } else {
        if (future._state !== 0)
          $.throwExpression(new $.StateError("Future already completed"));
        future._setErrorUnchecked$1(t2);
      }
    }
  },
  get$_chainSource: function() {
    var future = this._resultOrListeners;
    if (future.get$_isChained()) {
      future = future.get$_chainSource();
      this._resultOrListeners = future;
    }
    return future;
  },
  _chainFromFuture$1: function(resultSource) {
    var cursor, cursor0, cursor1, t1;
    if ((resultSource._state & 2) !== 0)
      resultSource = resultSource.get$_chainSource();
    if (this === resultSource) {
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setErrorUnchecked$1(new $.StateError("Cyclic future dependency."));
      return;
    }
    cursor = this._removeListeners$0();
    for (cursor0 = cursor; cursor0 != null; cursor0 = cursor1) {
      cursor1 = cursor0.get$_nextListener();
      cursor0.set$_nextListener(null);
      resultSource._addListener$1(cursor0);
    }
    t1 = new $._FutureListenerWrapper(this, null);
    $.setRuntimeTypeInfo(t1, [null]);
    resultSource._addListener$1(t1);
    this._resultOrListeners = resultSource;
    this._state = cursor != null ? 2 : 6;
  },
  _setOrChainValue$1: function(result) {
    var t1 = $.getInterceptor(result);
    if (typeof result === "object" && result !== null && !!t1.$isFuture)
      if (!!t1.$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else {
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setValueUnchecked$1(result);
    }
  },
  $is_FutureImpl: true,
  $isFuture: true,
  static: {
"": "_FutureImpl__INCOMPLETE,_FutureImpl__PENDING_COMPLETE,_FutureImpl__CHAINED,_FutureImpl__CHAINED_UNLISTENED,_FutureImpl__VALUE,_FutureImpl__ERROR",
_FutureImpl__FutureImpl$wait: function(futures, T) {
  var t1, t2, t3, future, pos, t4, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new $.ListIterator(futures, futures.length, 0, null), $.setRuntimeTypeInfo(t3, [$.getRuntimeTypeArgument(futures, "JSArray", 0)]); t3.moveNext$0();) {
    future = t3._liblib0$_current;
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    future.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_closure(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0)) {
    t1 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    $.setRuntimeTypeInfo(t1, [null]);
    t1._state = 8;
    t1._resultOrListeners = C.List_empty;
    return t1;
  }
  t1.values_1 = $.List_List(t1.remaining_2, null);
  t2 = $.JSArray;
  t3 = t2;
  t4 = new $._FutureImpl(0, $.get$_Zone__current(), null);
  $.setRuntimeTypeInfo(t4, [t3]);
  completer = new $._AsyncCompleter(t4, false);
  $.setRuntimeTypeInfo(completer, [t2]);
  completer._Completer$0(t3);
  t1.completer_0 = completer;
  return t1.completer_0.future;
}}

},

_FutureImpl__FutureImpl$wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
  },
  "+call:1:0": 0
},

_FutureImpl__FutureImpl$wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0)) {
      t2 = t1.completer_0;
      t2.complete$1(t2, t1.values_1);
    }
  },
  "+call:1:0": 0
},

_FutureImpl__asyncSetValue_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._setValueUnchecked$1(this.value_1);
  },
  "+call:0:0": 0
},

_FutureImpl__asyncSetError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    this.this_0._setErrorUnchecked$1(this.error_1);
  },
  "+call:0:0": 0
},

_FutureImpl__addListener_closure: {"": "Closure;box_0,this_1",
  call$0: function() {
    var t1, t2, value;
    t1 = this.this_1;
    t2 = t1.get$_state();
    value = t1.get$_resultOrListeners();
    t1 = this.box_0;
    if (t2 === 8)
      t1.listener_0._sendValue$1(value);
    else
      t1.listener_0._sendError$1(value);
  },
  "+call:0:0": 0
},

_TransformFuture: {"": "_FutureImpl;_nextListener@",
  _sendValue$1: function(value) {
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(new $._TransformFuture__sendValue_closure(this, value), false);
  },
  _sendError$1: function(error) {
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(new $._TransformFuture__sendError_closure(this, error), false);
  },
  $as_FutureImpl: function(S, T) {
    return [T];
  },
  $asFuture: function(S, T) {
    return [T];
  }
},

_TransformFuture__sendValue_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    return this.this_0._zonedSendValue$1(this.value_1);
  },
  "+call:0:0": 0
},

_TransformFuture__sendError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    return this.this_0._zonedSendError$1(this.error_1);
  },
  "+call:0:0": 0
},

_ThenFuture: {"": "_TransformFuture;_onValue,_nextListener,_state,_zone,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _zonedSendValue$1: function(value) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = new $._StackTrace(exception, null);
      t1 = $._asyncError(e, s);
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setErrorUnchecked$1(t1);
      return;
    }

    this._setOrChainValue$1(result);
  },
  _zonedSendError$1: function(error) {
    if (this._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    this._setErrorUnchecked$1(error);
  },
  $as_TransformFuture: null,
  $as_FutureImpl: function(S, T) {
    return [T];
  },
  $asFuture: function(S, T) {
    return [T];
  }
},

_CatchErrorFuture: {"": "_TransformFuture;_test,_onError,_nextListener,_state,_zone,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _zonedSendValue$1: function(value) {
    if (this._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    this._setValueUnchecked$1(value);
  },
  _zonedSendError$1: function(error) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = new $._StackTrace(exception, null);
      t1 = $._asyncError(e, s);
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setErrorUnchecked$1(t1);
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_TransformFuture: function(T) {
    return [T, T];
  },
  $as_FutureImpl: null,
  $asFuture: null
},

_SubscribeFuture: {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_zone,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _zonedSendError$1: function(error) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = new $._StackTrace(exception, null);
      t1 = $._asyncError(e, s);
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setErrorUnchecked$1(t1);
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_ThenFuture: null,
  $as_FutureImpl: function(S, T) {
    return [T];
  },
  $asFuture: function(S, T) {
    return [T];
  }
},

_WhenFuture: {"": "_TransformFuture;_action,_nextListener,_state,_zone,_resultOrListeners",
  _action$0: function() {
    return this._action.call$0();
  },
  _zonedSendValue$1: function(value) {
    var result, resultFuture, e, s, t1, t2, exception;
    try {
      result = this._action$0();
      t1 = result;
      t2 = $.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__zonedSendValue_closure(this, value), this.get$_setError());
        return;
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = new $._StackTrace(exception, null);
      t1 = $._asyncError(e, s);
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setErrorUnchecked$1(t1);
      return;
    }

    if (this._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    this._setValueUnchecked$1(value);
  },
  _zonedSendError$1: function(error) {
    var t1, result, resultFuture, e, s, t2, t3, exception;
    t1 = {};
    t1.error_0 = error;
    try {
      result = this._action$0();
      t2 = result;
      t3 = $.getInterceptor(t2);
      if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__zonedSendError_closure(t1, this), this.get$_setError());
        return;
      }
    } catch (exception) {
      t2 = $.unwrapException(exception);
      e = t2;
      s = new $._StackTrace(exception, null);
      t1.error_0 = $._asyncError(e, s);
    }

    t1 = t1.error_0;
    if (this._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    this._setErrorUnchecked$1(t1);
  },
  $as_TransformFuture: function(T) {
    return [T, T];
  },
  $as_FutureImpl: null,
  $asFuture: null
},

_WhenFuture__zonedSendValue_closure: {"": "Closure;this_0,value_1",
  call$1: function(_) {
    var t1 = this.this_0;
    if (t1.get$_state() !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._setValueUnchecked$1(this.value_1);
  },
  "+call:1:0": 0
},

_WhenFuture__zonedSendError_closure: {"": "Closure;box_0,this_1",
  call$1: function(_) {
    var t1, t2;
    t1 = this.this_1;
    t2 = this.box_0.error_0;
    if (t1.get$_state() !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._setErrorUnchecked$1(t2);
  },
  "+call:1:0": 0
},

Stream: {"": "Object;",
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = new $._FutureImpl(0, $.get$_Zone__current(), null);
    $.setRuntimeTypeInfo(future, [null]);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_forEach_closure(t1, this, action, future), true, new $.Stream_forEach_closure0(future), future.get$_setError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = new $._FutureImpl(0, $.get$_Zone__current(), null);
    future.$builtinTypeInfo = [$.JSInt];
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_length_closure(t1), true, new $.Stream_length_closure0(t1, future), future.get$_setError());
    return future;
  }
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    $._runUserCode(new $.Stream_forEach__closure(this.action_2, element), new $.Stream_forEach__closure0(), $._cancelAndError(this.box_0.subscription_0, this.future_3));
  },
  "+call:1:0": 0
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  },
  "+call:0:0": 0
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  "+call:1:0": 0
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    var t1 = this.future_6;
    if (t1._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._setValueUnchecked$1(null);
  },
  "+call:0:0": 0
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  },
  "+call:1:0": 0
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    var t1, t2;
    t1 = this.future_1;
    t2 = this.box_0.count_0;
    if (t1._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._setValueUnchecked$1(t2);
  },
  "+call:0:0": 0
},

StreamSubscription: {"": "Object;"},

EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_liblib5$_onData,_onError,_onDone,_zone,_state@,_pending",
  _liblib5$_onData$1: function(arg0) {
    return this._liblib5$_onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  pause$1: function(_, resumeSignal) {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 64 | 4) >>> 0;
    if (t1 < 64 && this._pending != null) {
      t2 = this._pending;
      t2.cancelSchedule$0;
      if (t2._state === 1)
        t2._state = 3;
    }
    if ((t1 & 4) === 0 && (this._state & 16) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 >= 64) {
      this._state = t1 - 64;
      t1 = this._state;
      if (t1 < 64) {
        if ((t1 & 32) !== 0) {
          t2 = this._pending;
          t2.get$isEmpty;
          t2 = t2.lastPendingEvent != null;
        } else
          t2 = false;
        if (t2)
          this._pending.schedule$1(this);
        else {
          this._state = (t1 & 4294967291) >>> 0;
          if ((this._state & 16) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function() {
    if ((this._state & 8) !== 0)
      return;
    this._cancel$0();
    var t1 = this._state;
    if ((t1 & 16) === 0) {
      this._state = (t1 | 16) >>> 0;
      this._onCancel$0();
      this._pending = null;
      this._state = (this._state & 4294967279) >>> 0;
    }
  },
  get$_mayResumeInput: function() {
    if (this._state < 64) {
      var t1 = this._pending;
      if (t1 != null) {
        t1.get$isEmpty;
        t1 = t1.lastPendingEvent == null;
      } else
        t1 = true;
    } else
      t1 = false;
    return t1;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._checkIfDone$0();
    if ((this._state & 32) !== 0) {
      t1 = this._pending;
      t1.cancelSchedule$0;
      if (t1._state === 1)
        t1._state = 3;
    }
  },
  _liblib5$_add$1: function(data) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 16)
      this._sendData$1(data);
    else {
      t1 = new $._DelayedData(data, null);
      $.setRuntimeTypeInfo(t1, [null]);
      this._addPending$1(t1);
    }
  },
  _addError$1: function(error) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 16)
      this._sendError$1(error);
    else
      this._addPending$1(new $._DelayedError(error, null));
  },
  _close$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 16)
      this._sendDone$0();
    else
      this._addPending$1(C.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new $.BoundClosure$0(this, "_onPause$0", null);
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new $.BoundClosure$0(this, "_onResume$0", null);
  },
  _onCancel$0: function() {
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new $._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    t1 = this._state;
    if ((t1 & 32) === 0) {
      this._state = (t1 | 32) >>> 0;
      if (this._state < 64)
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var t1 = this._state;
    this._state = (t1 | 16) >>> 0;
    this._zone._runInZone$2(new $._BufferingStreamSubscription__sendData_closure(this, data), true);
    this._state = (this._state & 4294967279) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendError$1: function(error) {
    var t1, t2, t3;
    t1 = this._state;
    this._state = (t1 | 16) >>> 0;
    t2 = this._zone;
    t3 = $.get$_Zone__current();
    if (!$.$eq(t2.get$_errorZone(), t3.get$_errorZone()))
      $.get$_Zone__current().handleUncaughtError$1(error);
    else
      t2._runInZone$2(new $._BufferingStreamSubscription__sendError_closure(this, error), true);
    this._state = (this._state & 4294967279) >>> 0;
    t3 = this._state;
    if ((t3 & 1) !== 0) {
      this._state = (t3 | 8) >>> 0;
      t2._openCallbacks = t2._openCallbacks - 1;
      if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._childCount === 0)
        ;
      if ((this._state & 32) !== 0) {
        t2 = this._pending;
        t2.cancelSchedule$0;
        if (t2._state === 1)
          t2._state = 3;
      }
    }
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendDone$0: function() {
    this._state = (this._state | 26) >>> 0;
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(this._onDone, true);
    this._onCancel$0();
    this._state = (this._state & 4294967279) >>> 0;
  },
  _guardCallback$1: function(callback) {
    var t1 = this._state;
    this._state = (t1 | 16) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967279) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, t2, isInputPaused;
    t1 = this._state;
    if ((t1 & 32) !== 0) {
      t2 = this._pending;
      t2.get$isEmpty;
      t2 = t2.lastPendingEvent == null;
    } else
      t2 = false;
    if (t2) {
      this._state = (t1 & 4294967263) >>> 0;
      if ((this._state & 4) !== 0 && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._onCancel$0();
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 16) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967279) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 32) !== 0 && t1 < 64)
      this._pending.schedule$1(this);
  },
  _BufferingStreamSubscription$4: function(_onData, _onError, _onDone, cancelOnError, T) {
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
  },
  static: {
"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT",
}

},

_BufferingStreamSubscription__sendData_closure: {"": "Closure;this_0,data_1",
  call$0: function() {
    return this.this_0._liblib5$_onData$1(this.data_1);
  },
  "+call:0:0": 0
},

_BufferingStreamSubscription__sendError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    return this.this_0._onError$1(this.error_1);
  },
  "+call:0:0": 0
},

_DelayedEvent: {"": "Object;next@"},

_DelayedData: {"": "_DelayedEvent;value>,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  },
  $as_DelayedEvent: null
},

_DelayedError: {"": "_DelayedEvent;error,next",
  perform$1: function(dispatch) {
    dispatch._sendError$1(this.error);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw $.wrapException(new $.StateError("No events after a done."));
  }
},

_PendingEvents: {"": "Object;_state@",
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    $.runAsync(new $._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1.get$_state();
    t1.set$_state(0);
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  },
  "+call:0:0": 0
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  }
},

_cancelAndError_closure: {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    var t1;
    this.subscription_0.cancel$0();
    t1 = this.future_1;
    if (t1._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._setErrorUnchecked$1(error);
  },
  "+call:1:0": 0
},

_ForwardingStream: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, true === cancelOnError, $.getRuntimeTypeArgument(this, "_ForwardingStream", 0), $.getRuntimeTypeArgument(this, "_ForwardingStream", 1));
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _handleData$2: function(data, sink) {
    sink._liblib5$_add$1(data);
  },
  $asStream: function(S, T) {
    return [T];
  }
},

_ForwardingStreamSubscription: {"": "_BufferingStreamSubscription;_stream,_subscription,_liblib5$_onData,_onError,_onDone,_zone,_state,_pending",
  _liblib5$_add$1: function(data) {
    if ((this._state & 2) !== 0)
      return;
    $._BufferingStreamSubscription.prototype._liblib5$_add$1.call(this, data);
  },
  _addError$1: function(error) {
    if ((this._state & 2) !== 0)
      return;
    $._BufferingStreamSubscription.prototype._addError$1.call(this, error);
  },
  _onPause$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.pause$0(t1);
  },
  get$_onPause: function() {
    return new $.BoundClosure$0(this, "_onPause$0", null);
  },
  _onResume$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.resume$0();
  },
  get$_onResume: function() {
    return new $.BoundClosure$0(this, "_onResume$0", null);
  },
  _onCancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      this._subscription = null;
      t1.cancel$0();
    }
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1", null);
  },
  _handleError$1: function(error) {
    this._addError$1(error);
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1", null);
  },
  _handleDone$0: function() {
    this._close$0();
  },
  get$_handleDone: function() {
    return new $.BoundClosure$0(this, "_handleDone$0", null);
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError, S, T) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  },
  $as_BufferingStreamSubscription: function(S, T) {
    return [T];
  },
  static: {
_ForwardingStreamSubscription$: function(_stream, onData, onError, onDone, cancelOnError, S, T) {
  var t1, t2;
  t1 = $.get$_Zone__current();
  t2 = cancelOnError ? 1 : 0;
  t2 = new $._ForwardingStreamSubscription(_stream, null, onData, onError, onDone, t1, t2, null);
  $.setRuntimeTypeInfo(t2, [S, T]);
  t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, T);
  t2._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError, S, T);
  return t2;
}}

},

_MapStream: {"": "_ForwardingStream;_transform,_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = new $._StackTrace(exception, null);
      sink._addError$1($._asyncError(e, s));
      return;
    }

    sink._liblib5$_add$1(outputEvent);
  },
  $as_ForwardingStream: null
},

_SkipStream: {"": "_ForwardingStream;_remaining,_source",
  _handleData$2: function(inputEvent, sink) {
    if ($.$gt$n(this._remaining, 0)) {
      this._remaining = $.$sub$n(this._remaining, 1);
      return;
    }
    return sink._liblib5$_add$1(inputEvent);
  },
  $as_ForwardingStream: function(T) {
    return [T, T];
  }
},

_ZoneBase: {"": "Object;_parentZone,_childCount,_openCallbacks,_isExecutingCallback",
  get$_errorZone: function() {
    return this._parentZone.get$_errorZone();
  },
  handleUncaughtError$1: function(error) {
    this._parentZone.handleUncaughtError$1(error);
  },
  _checkIfDone$0: function() {
    if (!this._isExecutingCallback && this._openCallbacks === 0 && this._childCount === 0)
      ;
  },
  _runInZone$2: function(f, handleUncaught) {
    var oldZone, oldIsExecuting, e, s, t1, exception;
    if ($.get$_Zone__current() === this && handleUncaught !== true && this._isExecutingCallback)
      return f.call$0();
    oldZone = $.get$_Zone__current();
    $._Zone__current = this;
    oldIsExecuting = this._isExecutingCallback;
    this._isExecutingCallback = true;
    try {
      try {
        t1 = f.call$0();
        return t1;
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = new $._StackTrace(exception, null);
        if (handleUncaught === true)
          this.handleUncaughtError$1($._asyncError(e, s));
        else
          throw exception;
      }

    } finally {
      this._isExecutingCallback = oldIsExecuting;
      $._Zone__current = oldZone;
      this._checkIfDone$0();
    }
  },
  runAsync$2: function(f, zone) {
    return this._parentZone.runAsync$2(f, zone);
  }
},

_DefaultZone: {"": "_ZoneBase;_parentZone,_childCount,_openCallbacks,_isExecutingCallback",
  get$_errorZone: function() {
    return this;
  },
  handleUncaughtError$1: function(error) {
    $._scheduleAsyncCallback(new $._DefaultZone_handleUncaughtError_closure(error));
  },
  runAsync$2: function(f, zone) {
    if (this === zone) {
      $._scheduleAsyncCallback(f);
      return;
    }
    zone._openCallbacks = zone._openCallbacks + 1;
    $._scheduleAsyncCallback(new $._DefaultZone_runAsync_closure(f, zone));
  }
},

_DefaultZone_handleUncaughtError_closure: {"": "Closure;error_0",
  call$0: function() {
    var t1, trace;
    t1 = this.error_0;
    $.Primitives_printString("Uncaught Error: " + $.S(t1));
    trace = $.getAttachedStackTrace(t1);
    $._attachStackTrace(t1, null);
    if (trace != null)
      $.Primitives_printString("Stack Trace:\n" + $.S(trace) + "\n");
    throw $.wrapException(t1);
  },
  "+call:0:0": 0
},

_DefaultZone_runAsync_closure: {"": "Closure;f_0,zone_1",
  call$0: function() {
    var t1 = this.zone_1;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(this.f_0, true);
  },
  "+call:0:0": 0
},

_ZoneTimer: {"": "Object;_zone,_callback,_timer",
  _callback$1: function(arg0) {
    return this._callback.call$1(arg0);
  },
  _run$0: function() {
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(this._callback, true);
  },
  get$_run: function() {
    return new $.BoundClosure$0(this, "_run$0", null);
  }
},

_PeriodicZoneTimer: {"": "Object;_zone,_callback,_timer",
  _callback$1: function(arg0) {
    return this._callback.call$1(arg0);
  },
  _run$1: function(timer) {
    this._zone._runInZone$2(new $._PeriodicZoneTimer__run_closure(this), true);
  },
  get$_run: function() {
    return new $.BoundClosure$1(this, "_run$1", null);
  }
},

_PeriodicZoneTimer__run_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    t1._callback$1(t1);
  },
  "+call:0:0": 0
}}],
["dart.collection", "dart:collection", , {
_defaultEquals: function(a, b) {
  return $.$eq(a, b);
},

_defaultHashCode: function(a) {
  return $.get$hashCode$(a);
},

HashMap_HashMap: function(equals, hashCode, K, V) {
  var t1 = new $._HashMapImpl(0, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
},

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw $.ioore(i);
    if (t2[i] === m)
      return "{...}";
  }
  result = $.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    result.write$1("{");
    t1.first_0 = true;
    $.forEach$1$ax(m, new $.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw $.ioore(0);
    t1.pop();
  }
  return result.get$_contents();
},

_HashMapImpl: {"": "Object;_liblib2$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._liblib2$_length;
  },
  get$keys: function() {
    var t1 = new $.HashMapKeyIterable(this);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, "_HashMapImpl", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1, t2;
    t1 = new $.HashMapKeyIterable(this);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, "_HashMapImpl", 0)]);
    t2 = new $.MappedIterable(t1, new $._HashMapImpl_values_closure(this));
    $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "IterableBase", 0), null]);
    return t2;
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._liblib2$_length = this._liblib2$_length + 1;
        this._keys = null;
      }
      if (value == null)
        strings[key] = strings;
      else
        strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._liblib2$_length = this._liblib2$_length + 1;
        this._keys = null;
      }
      if (value == null)
        nums[key] = nums;
      else
        nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._liblib2$_length = this._liblib2$_length + 1;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib2$_length = this._liblib2$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib2$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _computeHashCode$1: function(key) {
    return $.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if ($.$eq(bucket[i], key))
        return i;
    return -1;
  },
  $isMap: true
},

_HashMapImpl_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  "+call:1:0": 0
},

_IdentityHashMap: {"": "_HashMapImpl;_liblib2$_length,_strings,_nums,_rest,_keys",
  _findBucketIndex$2: function(bucket, key) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2) {
      t1 = bucket[i];
      if (t1 == null ? key == null : t1 === key)
        return i;
    }
    return -1;
  },
  $as_HashMapImpl: null,
  $asMap: null
},

_CustomHashMap: {"": "_HashMapImpl;_equals,_hashCode,_liblib2$_length,_strings,_nums,_rest,_keys",
  _equals$2: function(arg0, arg1) {
    return this._equals.call$2(arg0, arg1);
  },
  _hashCode$1: function(arg0) {
    return this._hashCode.call$1(arg0);
  },
  _computeHashCode$1: function(key) {
    return this._hashCode$1(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (this._equals$2(bucket[i], key) === true)
        return i;
    return -1;
  },
  toString$0: function(_) {
    return $.Maps_mapToString(this);
  },
  $as_HashMapImpl: null,
  $asMap: null
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib2$_length;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._map;
    t2 = t1._computeKeys$0();
    t2 = new $.HashMapKeyIterator(t1, t2, 0, null);
    $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(this, "HashMapKeyIterable", 0)]);
    return t2;
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw $.wrapException(new $.ConcurrentModificationError(t1));
    }
  },
  $asIterableBase: null
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_liblib2$_current",
  get$current: function() {
    return this._liblib2$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else if (offset >= keys.length) {
      this._liblib2$_current = null;
      return false;
    } else {
      this._liblib2$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  "+call:1:0": 0
},

LinkedHashMapCell: {"": "Object;_key<,_value@,_next@,_previous@"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib2$_length;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._map;
    t2 = t1._modifications;
    t2 = new $.LinkedHashMapKeyIterator(t1, t2, null, null);
    $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(this, "LinkedHashMapKeyIterable", 0)]);
    t2._cell = t2._map._first;
    return t2;
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications, t2;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (t2 = $.getInterceptor(modifications); cell != null;) {
      f.call$1(cell.get$_key());
      if (!t2.$eq(modifications, t1._modifications))
        throw $.wrapException(new $.ConcurrentModificationError(t1));
      cell = cell.get$_next();
    }
  },
  $asIterableBase: null
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_liblib2$_current",
  get$current: function() {
    return this._liblib2$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (!$.$eq(this._modifications, t1._modifications))
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib2$_current = null;
        return false;
      } else {
        this._liblib2$_current = t1.get$_key();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

HashSetIterator: {"": "Object;_set,_elements,_offset,_liblib2$_current",
  get$current: function() {
    return this._liblib2$_current;
  },
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else if (offset >= elements.length) {
      this._liblib2$_current = null;
      return false;
    } else {
      this._liblib2$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_HashSetBase: {"": "IterableBase;",
  toString$0: function(_) {
    return $.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  $asIterableBase: null
},

HashSet: {"": "_HashSetBase;_liblib2$_length,_strings,_nums,_rest,_elements",
  get$iterator: function(_) {
    var t1 = this._computeElements$0();
    t1 = new $.HashSetIterator(this, t1, 0, null);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, "HashSet", 0)]);
    return t1;
  },
  get$length: function(_) {
    return this._liblib2$_length;
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(element) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if ($.HashSet__findBucketIndex(bucket, element) >= 0)
          return;
        bucket.push(element);
      }
      this._liblib2$_length = this._liblib2$_length + 1;
      this._elements = null;
    }
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib2$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return;
    table[element] = 0;
    this._liblib2$_length = this._liblib2$_length + 1;
    this._elements = null;
  },
  $as_HashSetBase: null,
  static: {
HashSet__findBucketIndex: function(bucket, element) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i], element))
      return i;
  return -1;
}}

},

IterableBase: {"": "Object;",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$first: function(_) {
    var it = this.get$iterator(this);
    if (it.moveNext$0() !== true)
      throw $.wrapException(new $.StateError("No elements"));
    return it.get$current();
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = $.getInterceptor(remaining);
      if (t2.$eq(remaining, 0))
        return element;
      remaining = t2.$sub(remaining, 1);
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  }
},

LinkedHashMap: {"": "Object;_liblib2$_length,_strings,_nums,_rest,_first,_last,_modifications",
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.LinkedHashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, cell, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      cell = strings[key];
      if (cell == null)
        strings[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_value(value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      cell = nums[key];
      if (cell == null)
        nums[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_value(value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    }
  },
  clear$0: function(_) {
    if ($.$gt$n(this._liblib2$_length, 0)) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._liblib2$_length = 0;
      this._modifications = $.$and$n($.$add$ns(this._modifications, 1), 67108863);
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications, t1;
    cell = this._first;
    modifications = this._modifications;
    for (t1 = $.getInterceptor(modifications); cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_value());
      if (!t1.$eq(modifications, this._modifications))
        throw $.wrapException(new $.ConcurrentModificationError(this));
      cell = cell.get$_next();
    }
  },
  get$keys: function() {
    var t1 = new $.LinkedHashMapKeyIterable(this);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, "LinkedHashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1, t2;
    t1 = new $.LinkedHashMapKeyIterable(this);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, "LinkedHashMap", 0)]);
    t2 = new $.MappedIterable(t1, new $.LinkedHashMap_values_closure(this));
    $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, "IterableBase", 0), null]);
    return t2;
  },
  get$length: function(_) {
    return this._liblib2$_length;
  },
  toString$0: function(_) {
    return $.Maps_mapToString(this);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new $.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._liblib2$_length = $.$add$ns(this._liblib2$_length, 1);
    this._modifications = $.$and$n($.$add$ns(this._modifications, 1), 67108863);
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._liblib2$_length = $.$sub$n(this._liblib2$_length, 1);
    this._modifications = $.$and$n($.$add$ns(this._modifications, 1), 67108863);
  },
  $isMap: true,
  static: {
LinkedHashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_key(), key))
      return i;
  return -1;
}}

},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    var t1 = new $.ListIterator(receiver, this.get$length(receiver), 0, null);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    return t1;
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[init.dispatchPropertyName])))
      return this.forEach$1$bailout(1, action, receiver);
    $length = receiver.length;
    for (i = 0; i < $length; ++i) {
      if (i >= receiver.length)
        throw $.ioore(i);
      action.call$1(receiver[i]);
      if ($length !== receiver.length)
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  forEach$1$bailout: function(state0, action, receiver) {
    var $length, i;
    $length = this.get$length(receiver);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  indexOf$2: function(receiver, element, startIndex) {
    var t1, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[init.dispatchPropertyName])))
      return this.indexOf$2$bailout(1, startIndex, receiver);
    t1 = receiver.length;
    if (startIndex >= t1)
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; i < t1; ++i)
      if (i < 0)
        throw $.ioore(i);
    return -1;
  },
  indexOf$2$bailout: function(state0, startIndex, receiver) {
    var i;
    if (startIndex >= this.get$length(receiver))
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; i < this.get$length(receiver); ++i)
      this.$index(receiver, i);
    return -1;
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  toString$0: function(receiver) {
    var result, i, t1;
    for (i = 0; i < $.get$ListMixin__toStringList().length; ++i) {
      t1 = $.get$ListMixin__toStringList();
      if (i >= t1.length)
        throw $.ioore(i);
      if (t1[i] === receiver)
        return "[...]";
    }
    result = $.StringBuffer$("");
    try {
      $.get$ListMixin__toStringList().push(receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$ListMixin__toStringList();
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
    }
    return result.get$_contents();
  },
  $isList: true,
  $asList: null
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  },
  "+call:2:0": 0
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this, $.getRuntimeTypeArgument(this, "ListQueue", 0));
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        $.throwExpression(new $.ConcurrentModificationError(this));
    }
  },
  get$length: function(_) {
    var t1 = this._tail;
    if (typeof t1 !== "number")
      return this.get$length$bailout1(1, t1);
    return (t1 - this._head & this._table.length - 1) >>> 0;
  },
  get$length$bailout1: function(state0, t1) {
    return $.$and$n($.$sub$n(t1, this._head), this._table.length - 1);
  },
  toString$0: function(_) {
    return $.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.wrapException(new $.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _add$1: function(element) {
    var t1, t2;
    t1 = this._table;
    t2 = this._tail;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = $.$and$n(t2 + 1, this._table.length - 1);
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2, $.getRuntimeTypeArgument(this, "ListQueue", 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    $.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    $.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity, E) {
    var t1 = $.List_List(8, E);
    $.setRuntimeTypeInfo(t1, [E]);
    this._table = t1;
  },
  $asIterableBase: null,
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity, E) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.ListQueue$1(initialCapacity, E);
  return t1;
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_liblib2$_position,_liblib2$_current",
  get$current: function() {
    return this._liblib2$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      $.throwExpression(new $.ConcurrentModificationError(t1));
    t2 = this._liblib2$_position;
    if (t2 === this._end) {
      this._liblib2$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib2$_current = t3[t2];
    this._liblib2$_position = (this._liblib2$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  static: {
_ListQueueIterator$: function(queue, E) {
  var t1 = new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
}}

}}],
["dart.core", "dart:core", , {
Function__toMangledNames: function(namedArguments) {
  return;
},

Comparable_compare: function(a, b) {
  return $.compareTo$1$ns(a, b);
},

identical: function(a, b) {
  return a == null ? b == null : a === b;
},

List_List: function($length, E) {
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException(new $.ArgumentError("Length must be a positive integer: " + $.S($length) + "."));
  return $.Primitives_newFixedList($length);
},

List_List$filled: function($length, fill, E) {
  var result, t1, i;
  if ($length < 0)
    throw $.wrapException(new $.ArgumentError("Length must be a positive integer: " + $length + "."));
  result = $.Primitives_newFixedList($length);
  if ($length !== 0 && true)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = $.List_List(null, E);
  $.setRuntimeTypeInfo(list, [E]);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length, E);
  $.setRuntimeTypeInfo(fixedList, [E]);
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    t3 = list[i];
    if (i >= t2)
      throw $.ioore(i);
    fixedList[i] = t3;
  }
  return fixedList;
},

Function__toMangledNames_closure: {"": "Closure;result_0",
  call$2: function(symbol, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, symbol.get$_name(), value);
  },
  "+call:2:0": 0
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0))
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(key.get$_name());
    t1.sb_0.write$1(": ");
    t1.sb_0.write$1($.Error_safeToString(value));
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  },
  "+call:2:0": 0
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return new $.Duration(0 + (this._duration + other.get$_duration()));
  },
  $sub: function(_, other) {
    return new $.Duration(0 + (this._duration - other.get$_duration()));
  },
  $mul: function(_, factor) {
    var t1, truncated;
    if (typeof factor !== "number")
      throw $.iae(factor);
    t1 = C.JSNumber_methods.roundToDouble$0(this._duration * factor);
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return new $.Duration(0 + (truncated == -0.0 ? 0 : truncated));
  },
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw $.wrapException(new $.IntegerDivisionByZeroException());
    return $.Duration$(0, 0, C.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $le: function(_, other) {
    return this._duration <= other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = $.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + $.S($.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
    twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
    sixDigitUs = new $.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
    return $.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
}}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return $.S(n);
    if (t1.$ge(n, 10000))
      return "0" + $.S(n);
    if (t1.$ge(n, 1000))
      return "00" + $.S(n);
    if (t1.$ge(n, 100))
      return "000" + $.S(n);
    if (t1.$gt(n, 10))
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  },
  "+call:1:0": 0
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  },
  "+call:1:0": 0
},

Error: {"": "Object;", $isError: true, static: {
Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, t2, charCodes;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string") {
    buffer = new $.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      if (i >= t1)
        $.throwExpression(new $.RangeError("value " + i));
      codeUnit = object.charCodeAt(i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
          charCodes = $.List_List$filled(1, t2, $.JSInt);
          charCodes.$builtinTypeInfo = [$.JSInt];
          t2 = $.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = $.List_List$filled(1, codeUnit, $.JSInt);
        charCodes.$builtinTypeInfo = [$.JSInt];
        t2 = $.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    buffer._contents = buffer._contents + "\"";
    return buffer._contents;
  }
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
}}
},

AssertionError: {"": "Error;"},

TypeError: {"": "AssertionError;"},

CastError: {"": "Error;"},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
},

FallThroughError: {"": "Error;"},

AbstractClassInstantiationError: {"": "Error;_className",
  toString$0: function(_) {
    return "Cannot instantiate abstract class: '" + $.S(this._className) + "'";
  }
},

NoSuchMethodError: {"": "Error;_liblib1$_receiver,_memberName,_liblib1$_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, str;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    for (t2 = this._liblib1$_arguments; $.$lt$n(t1.i_1, t2.length); t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if ($.$gt$n(t1.i_1, 0)) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        throw $.ioore(t4);
      str = $.Error_safeToString(t2[t4]);
      str = typeof str === "string" ? str : $.S(str);
      t3._contents = t3._contents + str;
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new $.NoSuchMethodError_toString_closure(t1));
    return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.S($.Error_safeToString(this._liblib1$_receiver)) + "\nArguments: [" + $.S(t1.sb_0) + "]";
  }
},

UnsupportedError: {"": "Error;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
},

StateError: {"": "Error;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  $isError: true
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  }
},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
},

FormatException: {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + this.message;
  },
  $isException: true
},

IntegerDivisionByZeroException: {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
},

Expando: {"": "Object;name>",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new $.Object();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.$add$ns(t1, 1);
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Iterator: {"": "Object;"},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return $.Primitives_objectToString(this);
  },
  noSuchMethod$1: function(_, invocation) {
    throw $.wrapException(new $.NoSuchMethodError(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
  },
  get$runtimeType: function(_) {
    return new $.TypeImpl($.getRuntimeTypeString(this), null);
  }
},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = $.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

},

Symbol0: {"": "Object;"}}],
["dart.dom.html", "dart:html", , {
AudioElement_AudioElement: function(src) {
  return new Audio();
},

ImageElement_ImageElement: function(height, src, width) {
  var e = document.createElement("img");
  return e;
},

Window__isDartLocation: function(thing) {
  var t1, t2, exception;
  try {
    t1 = thing;
    t2 = $.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isLocation;
  } catch (exception) {
    $.unwrapException(exception);
    return false;
  }

},

_convertNativeToDart_EventTarget: function(e) {
  var $window, t1;
  if (e == null)
    return;
  if ("setInterval" in e) {
    $window = $._DOMWindowCrossFrame__createSafe(e);
    t1 = $.getInterceptor($window);
    if (typeof $window === "object" && $window !== null && !!t1.$isEventTarget)
      return $window;
    return;
  } else
    return e;
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asInterceptor_ListMixin: null, $asList: null, $isList: true},

_EventStream: {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new $._EventStreamSubscription(0, this._target, this._eventType, onData, this._useCapture);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(this, "_EventStream", 0)]);
    t1._tryResume$0();
    return t1;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  $asStream: null
},

_ElementEventStreamImpl: {"": "_EventStream;_target,_eventType,_useCapture", $as_EventStream: null},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this._target == null)
      return;
    this._unlisten$0();
    this._target = null;
    this._onData = null;
  },
  pause$1: function(_, resumeSignal) {
    if (this._target == null)
      return;
    this._pauseCount = this._pauseCount + 1;
    this._unlisten$0();
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    if (this._target == null || this._pauseCount <= 0)
      return;
    this._pauseCount = this._pauseCount - 1;
    this._tryResume$0();
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      $.$$dom_addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null
},

EventStreamProvider: {"": "Object;_eventType"},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0));
  },
  $isList: true,
  $asList: null
},

Point: {"": "Object;x>,y>",
  toString$0: function(_) {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ")";
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = $.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isPoint)
      return false;
    return $.$eq(this.x, other.x) && $.$eq(this.y, other.y);
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = $.get$hashCode$(this.x);
    t2 = $.get$hashCode$(this.y);
    return $.JenkinsSmiHash_finish($.JenkinsSmiHash_combine($.JenkinsSmiHash_combine(0, t1), t2));
  },
  $add: function(_, other) {
    var t1, t2, t3;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, other, t1);
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t3 !== "number")
      return this.$$add$bailout(2, other, t1, t2, t3);
    t3 = t1 + t3;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.$$add$bailout(3, other, t1, t2, t3);
    t2 = t2.get$y(other);
    if (typeof t2 !== "number")
      return this.$$add$bailout(4, 0, t1, t2, t3);
    return new $.Point(t3, t1 + t2);
  },
  $$add$bailout: function(state0, other, t1, t2, t3) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$x(other);
        t3 = t2.get$x(other);
      case 2:
        state0 = 0;
        t3 = $.$add$ns(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t2 = t2.get$y(other);
      case 4:
        state0 = 0;
        return new $.Point(t3, $.$add$ns(t1, t2));
    }
  },
  $sub: function(_, other) {
    var t1, t2, t3;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(1, other, t1);
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t3 !== "number")
      return this.$$sub$bailout(2, other, t1, t2, t3);
    t3 = t1 - t3;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(3, other, t1, t2, t3);
    t2 = t2.get$y(other);
    if (typeof t2 !== "number")
      return this.$$sub$bailout(4, 0, t1, t2, t3);
    return new $.Point(t3, t1 - t2);
  },
  $$sub$bailout: function(state0, other, t1, t2, t3) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$x(other);
        t3 = t2.get$x(other);
      case 2:
        state0 = 0;
        t3 = $.$sub$n(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t2 = t2.get$y(other);
      case 4:
        state0 = 0;
        return new $.Point(t3, $.$sub$n(t1, t2));
    }
  },
  $mul: function(_, factor) {
    var t1, t2;
    if (typeof factor !== "number")
      return this.$$mul$bailout(1, factor);
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$mul$bailout(2, factor, t1);
    t1 *= factor;
    t2 = this.y;
    if (typeof t2 !== "number")
      return this.$$mul$bailout(3, factor, t1, t2);
    return new $.Point(t1, t2 * factor);
  },
  $$mul$bailout: function(state0, factor, t1, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.x;
      case 2:
        state0 = 0;
        t1 = $.$mul$n(t1, factor);
        t2 = this.y;
      case 3:
        state0 = 0;
        return new $.Point(t1, $.$mul$n(t2, factor));
    }
  },
  toInt$0: function(_) {
    return new $.Point($.toInt$0$nx(this.x), $.toInt$0$nx(this.y));
  },
  $isPoint: true
},

RectBase: {"": "Object;",
  toString$0: function(_) {
    return "(" + $.S(this.get$left(this)) + ", " + $.S(this.get$top(this)) + ", " + $.S(this.get$width(this)) + ", " + $.S(this.get$height(this)) + ")";
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = $.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRect)
      return false;
    return $.$eq(this.get$left(this), t1.get$left(other)) && $.$eq(this.get$top(this), t1.get$top(other)) && $.$eq(this.get$width(this), t1.get$width(other)) && $.$eq(this.get$height(this), t1.get$height(other));
  },
  get$hashCode: function(_) {
    var t1, t2, t3, t4;
    t1 = $.get$hashCode$(this.get$left(this));
    t2 = $.get$hashCode$(this.get$top(this));
    t3 = $.get$hashCode$(this.get$width(this));
    t4 = $.get$hashCode$(this.get$height(this));
    return $.JenkinsSmiHash_finish($.JenkinsSmiHash_combine($.JenkinsSmiHash_combine($.JenkinsSmiHash_combine($.JenkinsSmiHash_combine(0, t1), t2), t3), t4));
  },
  toInt$0: function(_) {
    return new $.Rect($.toInt$0$nx(this.get$left(this)), $.toInt$0$nx(this.get$top(this)), $.toInt$0$nx(this.get$width(this)), $.toInt$0$nx(this.get$height(this)));
  },
  get$topLeft: function(_) {
    return new $.Point(this.get$left(this), this.get$top(this));
  }
},

Rect: {"": "RectBase;left>,top>,width>,height>",
  left$1: function($receiver, arg0) {
    return this.left.call$1(arg0);
  },
  $isRect: true,
  $asRect: null
},

FixedSizeListIterator: {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[init.dispatchPropertyName])))
        return this.moveNext$0$bailout(2, t1, nextPosition);
      if (nextPosition >>> 0 !== nextPosition || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.$add$ns(t1, 1);
        t1 = this._length;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$lt$n(nextPosition, t1))
          switch (state0) {
            case 0:
              t1 = this._array;
            case 2:
              state0 = 0;
              this._current = $.$index$asx(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  },
  static: {
FixedSizeListIterator$: function(array, T) {
  var t1 = new $.FixedSizeListIterator(array, $.get$length$asx(array), -1, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
}}

},

_DOMWindowCrossFrame: {"": "Object;_window", $isEventTarget: true, $asEventTarget: null, static: {
_DOMWindowCrossFrame__createSafe: function(w) {
  if (w === window)
    return w;
  else
    return new $._DOMWindowCrossFrame(w);
}}
},

_LocationCrossFrame: {"": "Object;_location"},

_LocationWrapper: {"": "Object;_ptr",
  get$search: function(_) {
    return this._ptr.search;
  },
  reload$0: function(_) {
    return this._ptr.reload();
  },
  toString$0: function(_) {
    return this._ptr.toString();
  },
  $isLocation: true,
  $asLocation: null
},

HtmlElement: {"": "Element;"},

AnchorElement: {"": "HtmlElement;name=,search=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

AreaElement: {"": "HtmlElement;search="},

BodyElement: {"": "HtmlElement;",
  get$onLoad: function(receiver) {
    var t1;
    C.EventStreamProvider_load.forElement$2$useCapture;
    t1 = new $._ElementEventStreamImpl(receiver, C.EventStreamProvider_load._eventType, false);
    $.setRuntimeTypeInfo(t1, [null]);
    return t1;
  }
},

ButtonElement: {"": "HtmlElement;name=,value="},

CanvasElement: {"": "HtmlElement;height=,width=",
  getContext$2: function(receiver, contextId, attrs) {
    return receiver.getContext(contextId);
  },
  getContext$1: function($receiver, contextId) {
    return this.getContext$2($receiver, contextId, null);
  }
},

CanvasRenderingContext: {"": "Interceptor;"},

CanvasRenderingContext2D: {"": "CanvasRenderingContext;fillStyle},font},globalAlpha},lineCap},lineWidth},strokeStyle},textAlign},textBaseline}",
  beginPath$0: function(receiver) {
    return receiver.beginPath();
  },
  bezierCurveTo$6: function(receiver, cp1x, cp1y, cp2x, cp2y, x, y) {
    return receiver.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
  },
  clearRect$4: function(receiver, x, y, width, height) {
    return receiver.clearRect(x, y, width, height);
  },
  clip$1: function(receiver, winding) {
    return receiver.clip(winding);
  },
  clip$0: function($receiver) {
    return $receiver.clip();
  },
  closePath$0: function(receiver) {
    return receiver.closePath();
  },
  fill$1: function(receiver, winding) {
    return receiver.fill(winding);
  },
  fill$0: function($receiver) {
    return $receiver.fill();
  },
  fillRect$4: function(receiver, x, y, width, height) {
    return receiver.fillRect(x, y, width, height);
  },
  fillText$4: function(receiver, text, x, y, maxWidth) {
    return receiver.fillText(text, x, y, maxWidth);
  },
  fillText$3: function($receiver, text, x, y) {
    return $receiver.fillText(text, x, y);
  },
  lineTo$2: function(receiver, x, y) {
    return receiver.lineTo(x, y);
  },
  measureText$1: function(receiver, text) {
    return receiver.measureText(text);
  },
  moveTo$2: function(receiver, x, y) {
    return receiver.moveTo(x, y);
  },
  quadraticCurveTo$4: function(receiver, cpx, cpy, x, y) {
    return receiver.quadraticCurveTo(cpx, cpy, x, y);
  },
  restore$0: function(receiver) {
    return receiver.restore();
  },
  rotate$1: function(receiver, angle) {
    return receiver.rotate(angle);
  },
  save$0: function(receiver) {
    return receiver.save();
  },
  stroke$0: function(receiver) {
    return receiver.stroke();
  },
  transform$6: function(receiver, m11, m12, m21, m22, dx, dy) {
    return receiver.transform(m11, m12, m21, m22, dx, dy);
  },
  translate$2: function(receiver, tx, ty) {
    return receiver.translate(tx, ty);
  },
  arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
    receiver.arc(x, y, radius, startAngle, endAngle, anticlockwise);
  },
  drawImage$3: function(receiver, source, destX, destY) {
    return receiver.drawImage(source, destX, destY);
  },
  drawImageScaled$5: function(receiver, source, destX, destY, destWidth, destHeight) {
    return receiver.drawImage(source, destX, destY, destWidth, destHeight);
  }
},

CharacterData: {"": "Node;length="},

DocumentFragment: {"": "Node;"},

DomError: {"": "Interceptor;name="},

DomException: {"": "Interceptor;",
  get$name: function(receiver) {
    var errorName, t1;
    errorName = receiver.name;
    if ($.Device__isWebKit == null) {
      if ($.Device__isOpera == null)
        $.Device__isOpera = $.contains$2$asx(window.navigator.userAgent, "Opera", 0);
      $.Device__isWebKit = $.Device__isOpera !== true && $.contains$2$asx(window.navigator.userAgent, "WebKit", 0) === true;
    }
    t1 = $.Device__isWebKit;
    if (t1 === true && errorName === "SECURITY_ERR")
      return "SecurityError";
    if (t1 == null) {
      if ($.Device__isOpera == null)
        $.Device__isOpera = $.contains$2$asx(window.navigator.userAgent, "Opera", 0);
      $.Device__isWebKit = $.Device__isOpera !== true && $.contains$2$asx(window.navigator.userAgent, "WebKit", 0) === true;
    }
    if ($.Device__isWebKit === true && errorName === "SYNTAX_ERR")
      return "SyntaxError";
    return errorName;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

Element: {"": "Node;",
  get$offset: function(receiver) {
    return new $.Rect(receiver.offsetLeft, receiver.offsetTop, receiver.offsetWidth, receiver.offsetHeight);
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  translate$2: function($receiver, arg0, arg1) {
    return this.translate.call$2(arg0, arg1);
  },
  getBoundingClientRect$0: function(receiver) {
    return receiver.getBoundingClientRect();
  },
  get$onLoad: function(receiver) {
    var t1;
    C.EventStreamProvider_load.forElement$2$useCapture;
    t1 = new $._ElementEventStreamImpl(receiver, C.EventStreamProvider_load._eventType, false);
    $.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  $isElement: true,
  $asElement: null
},

EmbedElement: {"": "HtmlElement;height=,name=,src%,width="},

Event: {"": "Interceptor;",
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  }
},

EventTarget: {"": "Interceptor;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isEventTarget: true,
  $asEventTarget: null
},

FieldSetElement: {"": "HtmlElement;name="},

FormElement: {"": "HtmlElement;length=,name=",
  reset$0: function(receiver) {
    return receiver.reset();
  }
},

IFrameElement: {"": "HtmlElement;height=,name=,src%,width="},

ImageElement: {"": "HtmlElement;height=,src%,width=,x=,y="},

InputElement: {"": "HtmlElement;height=,name=,size%,src%,value=,width=",
  step$1: function($receiver, arg0) {
    return this.step.call$1(arg0);
  },
  $isElement: true,
  $asElement: null,
  $isEventTarget: true,
  $asEventTarget: null
},

KeygenElement: {"": "HtmlElement;name="},

LIElement: {"": "HtmlElement;value="},

Location: {"": "Interceptor;search=",
  reload$0: function(receiver) {
    return receiver.reload();
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isLocation: true,
  $asLocation: null
},

MapElement: {"": "HtmlElement;name="},

MediaElement: {"": "HtmlElement;src%,volume}",
  play$0: function(receiver) {
    return receiver.play();
  }
},

MetaElement: {"": "HtmlElement;name="},

MeterElement: {"": "HtmlElement;value="},

MouseEvent: {"": "UIEvent;",
  get$offset: function(receiver) {
    var t1, t2;
    if (!!receiver.offsetX)
      return new $.Point(receiver.offsetX, receiver.offsetY);
    else {
      t1 = $._convertNativeToDart_EventTarget(receiver.target);
      t2 = $.getInterceptor(t1);
      if (typeof t1 !== "object" || t1 === null || !t2.$isElement)
        throw $.wrapException(new $.UnsupportedError("offsetX is only supported on elements"));
      t1 = new $.Point(receiver.clientX, receiver.clientY);
      t1 = t1.$sub(t1, $.get$topLeft$x($.getBoundingClientRect$0$x($._convertNativeToDart_EventTarget(receiver.target))));
      return new $.Point($.toInt$0$nx(t1.x), $.toInt$0$nx(t1.y));
    }
  }
},

NavigatorUserMediaError: {"": "Interceptor;name="},

Node: {"": "EventTarget;",
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? $.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  }
},

OListElement: {"": "HtmlElement;start="},

ObjectElement: {"": "HtmlElement;height=,name=,width="},

OptGroupElement: {"": "HtmlElement;label%"},

OptionElement: {"": "HtmlElement;label%,value="},

OutputElement: {"": "HtmlElement;name=,value="},

ParamElement: {"": "HtmlElement;name=,value="},

ProgressElement: {"": "HtmlElement;value="},

ScriptElement: {"": "HtmlElement;src%"},

SelectElement: {"": "HtmlElement;length=,name=,size%,value="},

ShadowRoot: {"": "DocumentFragment;",
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  }
},

SourceElement: {"": "HtmlElement;src%"},

SpeechSynthesisEvent: {"": "Event;name="},

TextAreaElement: {"": "HtmlElement;name=,value="},

TextMetrics: {"": "Interceptor;width="},

TouchEvent: {"": "UIEvent;changedTouches=,touches="},

TouchList: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $asInterceptor_ListMixin_ImmutableListMixin: null,
  $asList: function() {
    return [$.Touch];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

TrackElement: {"": "HtmlElement;label%,src%"},

UIEvent: {"": "Event;"},

VideoElement: {"": "MediaElement;height=,width="},

WheelEvent: {"": "MouseEvent;",
  get$deltaY: function(receiver) {
    var detail;
    if (receiver.deltaY !== undefined)
      return receiver.deltaY;
    else if (receiver.wheelDelta !== undefined)
      return -receiver.wheelDelta;
    else if (receiver.detail !== undefined) {
      if (receiver.axis == MouseScrollEvent.VERTICAL_AXIS) {
        detail = receiver.detail;
        if (Math.abs(detail) < 100)
          return -detail * 40;
        return -detail;
      }
      return 0;
    }
    throw $.wrapException(new $.UnsupportedError("deltaY is not supported"));
  },
  get$deltaX: function(receiver) {
    var detail;
    if (receiver.deltaX !== undefined)
      return receiver.deltaX;
    else if (receiver.wheelDeltaX !== undefined)
      return -receiver.wheelDeltaX;
    else if (receiver.detail !== undefined) {
      if (receiver.axis !== undefined && receiver.axis == MouseScrollEvent.HORIZONTAL_AXIS) {
        detail = receiver.detail;
        if (detail < 100)
          return -detail * 40;
        return -detail;
      }
      return 0;
    }
    throw $.wrapException(new $.UnsupportedError("deltaX is not supported"));
  }
},

Window: {"": "EventTarget;name=",
  get$location: function(receiver) {
    var result = receiver.location;
    if ($.Window__isDartLocation(result) === true)
      return result;
    if (null == receiver._location_wrapper)
      receiver._location_wrapper = new $._LocationWrapper(result);
    return receiver._location_wrapper;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isEventTarget: true,
  $asEventTarget: null
},

_Attr: {"": "Node;name=,value="},

_ClientRect: {"": "Interceptor;height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "(" + $.S(receiver.left) + ", " + $.S(receiver.top) + ", " + $.S(receiver.width) + ", " + $.S(receiver.height) + ")";
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = $.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRect)
      return false;
    t2 = receiver.left;
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = receiver.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(receiver) {
    var t1, t2, t3, t4;
    t1 = $.get$hashCode$(receiver.left);
    t2 = $.get$hashCode$(receiver.top);
    t3 = $.get$hashCode$(receiver.width);
    t4 = $.get$hashCode$(receiver.height);
    return $.JenkinsSmiHash_finish($.JenkinsSmiHash_combine($.JenkinsSmiHash_combine($.JenkinsSmiHash_combine($.JenkinsSmiHash_combine(0, t1), t2), t3), t4));
  },
  toInt$0: function(receiver) {
    return new $.Rect($.toInt$0$nx(receiver.left), $.toInt$0$nx(receiver.top), $.toInt$0$nx(receiver.width), $.toInt$0$nx(receiver.height));
  },
  get$topLeft: function(receiver) {
    return new $.Point(receiver.left, receiver.top);
  },
  left$1: function($receiver, arg0) {
    return this.left.call$1(arg0);
  },
  $isRect: true,
  $asRect: null
}}],
["dart.dom.svg", "dart:svg", , {
FEBlendElement: {"": "SvgElement;height=,width=,x=,y="},

FEColorMatrixElement: {"": "SvgElement;height=,width=,x=,y="},

FEComponentTransferElement: {"": "SvgElement;height=,width=,x=,y="},

FECompositeElement: {"": "SvgElement;height=,width=,x=,y="},

FEConvolveMatrixElement: {"": "SvgElement;height=,width=,x=,y="},

FEDiffuseLightingElement: {"": "SvgElement;height=,width=,x=,y="},

FEDisplacementMapElement: {"": "SvgElement;height=,width=,x=,y="},

FEFloodElement: {"": "SvgElement;height=,width=,x=,y="},

FEGaussianBlurElement: {"": "SvgElement;height=,width=,x=,y="},

FEImageElement: {"": "SvgElement;height=,width=,x=,y="},

FEMergeElement: {"": "SvgElement;height=,width=,x=,y="},

FEMorphologyElement: {"": "SvgElement;height=,width=,x=,y="},

FEOffsetElement: {"": "SvgElement;height=,width=,x=,y="},

FEPointLightElement: {"": "SvgElement;x=,y="},

FESpecularLightingElement: {"": "SvgElement;height=,width=,x=,y="},

FESpotLightElement: {"": "SvgElement;x=,y="},

FETileElement: {"": "SvgElement;height=,width=,x=,y="},

FETurbulenceElement: {"": "SvgElement;height=,width=,x=,y="},

FilterElement: {"": "SvgElement;height=,width=,x=,y="},

ForeignObjectElement: {"": "GraphicsElement;height=,width=,x=,y="},

GraphicsElement: {"": "SvgElement;"},

ImageElement0: {"": "GraphicsElement;height=,width=,x=,y="},

MaskElement: {"": "SvgElement;height=,width=,x=,y="},

PatternElement: {"": "SvgElement;height=,width=,x=,y="},

RectElement: {"": "GraphicsElement;height=,width=,x=,y="},

SvgElement: {"": "Element;"},

SvgSvgElement: {"": "GraphicsElement;height=,width=,x=,y="},

TextContentElement: {"": "GraphicsElement;"},

TextPositioningElement: {"": "TextContentElement;x=,y=",
  rotate$1: function($receiver, arg0) {
    return this.rotate.call$1(arg0);
  }
},

UseElement: {"": "GraphicsElement;height=,width=,x=,y="}}],
["dart.isolate", "dart:isolate", , {
_Isolate_port: function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePortImpl$();
  return $.lazyPort;
},

ReceivePort: {"": "Object;"}}],
["dart.math", "dart:math", , {
min: function(a, b) {
  if (typeof b !== "number")
    throw $.iae(b);
  if (a > b)
    return b;
  if (a < b)
    return a;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return (a + b) * a * b;
    if (a === 0 && C.JSDouble_methods.get$isNegative(b) || isNaN(b))
      return b;
    return a;
  }
  return a;
},

max: function(a, b) {
  var t1 = $.getInterceptor$n(a);
  if (t1.$gt(a, b))
    return a;
  if (t1.$lt(a, b))
    return b;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return a + b;
    if (isNaN(b))
      return b;
    return a;
  }
  if ($.$eq(b, 0) && t1.get$isNegative(a))
    return b;
  return a;
},

_Random: {"": "Object;",
  nextInt$1: function(max) {
    if (typeof max !== "number")
      return this.nextInt$1$bailout(1, max);
    if (max < 0)
      throw $.wrapException(new $.ArgumentError("negative max: " + $.S(max)));
    if (max > 4294967295)
      max = 4294967295;
    return Math.random() * max >>> 0;
  },
  nextInt$1$bailout: function(state0, max) {
    var t1 = $.getInterceptor$n(max);
    if (t1.$lt(max, 0))
      throw $.wrapException(new $.ArgumentError("negative max: " + $.S(max)));
    if (t1.$gt(max, 4294967295))
      max = 4294967295;
    return Math.random() * max >>> 0;
  }
}}],
["dart.typed_data", "dart:typed_data", , {
TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asTypedData_ListMixin: null, $asList: null},

TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $length));
    else
      throw $.wrapException(new $.ArgumentError("Invalid list index " + $.S(index)));
  }
},

Uint8ClampedList: {"": "Uint8List;",
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout1(1, index, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout1: function(state0, index, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout1(1, index, value, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout1: function(state0, index, value, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  }
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asTypedData_ListMixin_FixedLengthListMixin: null,
  $asList: function() {
    return [$.JSInt];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
}}],
["html_common", "dart:html_common", , {
JenkinsSmiHash_combine: function(hash, value) {
  if (typeof value !== "number")
    throw $.iae(value);
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

JenkinsSmiHash_finish: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
}}],
["metadata", "/Applications/dart/dart-sdk/lib/html/html_common/metadata.dart", , {
SupportedBrowser: {"": "Object;browserName,minimumVersion", static: {
"": "SupportedBrowser_CHROME,SupportedBrowser_FIREFOX,SupportedBrowser_IE,SupportedBrowser_OPERA,SupportedBrowser_SAFARI",
}
},

Experimental: {"": "Object;"},

DomName: {"": "Object;name>"},

DocsEditable: {"": "Object;"},

Unstable: {"": "Object;"}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

$.main$closure = new $.Closure$main($.main, "main$closure");
$.IsolateNatives__processWorkerMessage$closure = new $.Closure$_processWorkerMessage($.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
$.toStringWrapper$closure = new $.Closure$toStringWrapper($.toStringWrapper, "toStringWrapper$closure");
$.invokeClosure$closure = new $.Closure$invokeClosure($.invokeClosure, "invokeClosure$closure");
$.typeNameInChrome$closure = new $.Closure$typeNameInChrome($.typeNameInChrome, "typeNameInChrome$closure");
$.typeNameInSafari$closure = new $.Closure$typeNameInSafari($.typeNameInSafari, "typeNameInSafari$closure");
$.typeNameInOpera$closure = new $.Closure$typeNameInOpera($.typeNameInOpera, "typeNameInOpera$closure");
$.typeNameInFirefox$closure = new $.Closure$typeNameInFirefox($.typeNameInFirefox, "typeNameInFirefox$closure");
$.typeNameInIE$closure = new $.Closure$typeNameInIE($.typeNameInIE, "typeNameInIE$closure");
$.constructorNameFallback$closure = new $.Closure$constructorNameFallback($.constructorNameFallback, "constructorNameFallback$closure");
$.callDartFunctionWith1Arg$closure = new $.Closure$callDartFunctionWith1Arg($.callDartFunctionWith1Arg, "callDartFunctionWith1Arg$closure");
$._asyncRunCallback$closure = new $.Closure$_asyncRunCallback($._asyncRunCallback, "_asyncRunCallback$closure");
$._nullDataHandler$closure = new $.Closure$_nullDataHandler($._nullDataHandler, "_nullDataHandler$closure");
$._nullErrorHandler$closure = new $.Closure$_nullErrorHandler($._nullErrorHandler, "_nullErrorHandler$closure");
$._nullDoneHandler$closure = new $.Closure$_nullDoneHandler($._nullDoneHandler, "_nullDoneHandler$closure");
$._defaultEquals$closure = new $.Closure$_defaultEquals($._defaultEquals, "_defaultEquals$closure");
$._defaultHashCode$closure = new $.Closure$_defaultHashCode($._defaultHashCode, "_defaultHashCode$closure");
$.Comparable_compare$closure = new $.Closure$compare($.Comparable_compare, "Comparable_compare$closure");
$.identical$closure = new $.Closure$identical($.identical, "identical$closure");
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.UnknownJavaScriptObject.prototype;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.UnknownJavaScriptObject.prototype;
  return receiver;
};
$.getInterceptor$nx = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.UnknownJavaScriptObject.prototype;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
var C = {};
C.C_CloseToken = new $.CloseToken();
C.C_UnknownJavaScriptObject = new $.UnknownJavaScriptObject();
C.C__DelayedDone = new $._DelayedDone();
C.C__Random = new $._Random();
C.Duration_0 = new $.Duration(0);
C.Duration_10000000 = new $.Duration(10000000);
C.Duration_2000000 = new $.Duration(2000000);
C.Duration_3000000 = new $.Duration(3000000);
C.Duration_40000 = new $.Duration(40000);
C.Duration_4000000 = new $.Duration(4000000);
C.EventStreamProvider_load = $.setRuntimeTypeInfo(new $.EventStreamProvider("load"), [$.Event]);
C.EventStreamProvider_mousedown = $.setRuntimeTypeInfo(new $.EventStreamProvider("mousedown"), [$.MouseEvent]);
C.EventStreamProvider_mousemove = $.setRuntimeTypeInfo(new $.EventStreamProvider("mousemove"), [$.MouseEvent]);
C.EventStreamProvider_mouseup = $.setRuntimeTypeInfo(new $.EventStreamProvider("mouseup"), [$.MouseEvent]);
C.EventStreamProvider_touchend = $.setRuntimeTypeInfo(new $.EventStreamProvider("touchend"), [$.TouchEvent]);
C.EventStreamProvider_touchmove = $.setRuntimeTypeInfo(new $.EventStreamProvider("touchmove"), [$.TouchEvent]);
C.EventStreamProvider_touchstart = $.setRuntimeTypeInfo(new $.EventStreamProvider("touchstart"), [$.TouchEvent]);
C.JSArray_methods = $.JSArray.prototype;
C.JSDouble_methods = $.JSDouble.prototype;
C.JSInt_methods = $.JSInt.prototype;
C.JSNumber_methods = $.JSNumber.prototype;
C.JSString_methods = $.JSString.prototype;
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_empty = Isolate.makeConstantList([]);
C.Symbol_call = new $.Symbol("call");
C.Type_6TA = $.createRuntimeType('JSObject');
C.Type_8aB = $.createRuntimeType('int');
C.Type_IYi = $.createRuntimeType('String');
C.Type_QA5 = $.createRuntimeType('Beetle');
C.Type_a9w = $.createRuntimeType('bool');
C.Type_cGl = $.createRuntimeType('double');
C.Type_iZr = $.createRuntimeType('Turtle');
C.Type_tCm = $.createRuntimeType('Frog');
C.Type_woc = $.createRuntimeType('Null');
C.Window_methods = $.Window.prototype;
$.Block_BLOCK_ID = 0;
$.SHOW_FASTFORWARD = false;
$.SHOW_TURN_BLOCK = false;
$.SHOW_DIE_BLOCK = false;
$.SHOW_WAIT_BLOCK = false;
$.SHOW_PREVIEW = false;
$.SHOW_WAIT_TIMEOUT = false;
$.SHOW_STATUS = false;
$.AUTO_REPEAT = false;
$.FROG_SIZE_VARIATION = false;
$.DRAG_LILYPADS = false;
$.FROGS_PUSH = false;
$.FROGS_BLOCK = true;
$.MAX_FLIES = 0;
$.MAX_FROGS = 5;
$.MAX_BEETLES = 6;
$.MAX_GEMS = 0;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.interceptorsByTag = null;
$.leafTags = null;
$.interceptorToTag = null;
$._callbacksAreEnqueued = false;
$.Expando__keyCount = 0;
$.Device__isOpera = null;
$.Device__isWebKit = null;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || $.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || $.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mod$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$mod(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.$tdiv$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
$.clone$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).clone$0(receiver);
};
$.clone$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).clone$1(receiver, a0);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.contains$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
$.drawImageScaled$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return $.getInterceptor$x(receiver).drawImageScaled$5(receiver, a0, a1, a2, a3, a4);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$changedTouches$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$changedTouches(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$height$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$height(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$label$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$label(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$name$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$name(receiver);
};
$.get$search$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$search(receiver);
};
$.get$src$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$src(receiver);
};
$.get$start$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$start(receiver);
};
$.get$topLeft$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$topLeft(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.get$width$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$width(receiver);
};
$.get$y$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$y(receiver);
};
$.getBoundingClientRect$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
};
$.getContext$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
$.indexOf$1$asx = function(receiver, a0) {
  return $.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
};
$.left$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).left$1(receiver, a0);
};
$.matchAsPrefix$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
};
$.play$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).play$0(receiver);
};
$.preventDefault$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).preventDefault$0(receiver);
};
$.reload$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).reload$0(receiver);
};
$.reset$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).reset$0(receiver);
};
$.restore$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).restore$0(receiver);
};
$.save$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).save$0(receiver);
};
$.set$candidate$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$candidate(receiver, value);
};
$.set$index$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$index(receiver, value);
};
$.set$label$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$label(receiver, value);
};
$.set$length$asx = function(receiver, value) {
  return $.getInterceptor$asx(receiver).set$length(receiver, value);
};
$.set$size$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$size(receiver, value);
};
$.set$src$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$src(receiver, value);
};
$.set$values$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$values(receiver, value);
};
$.set$volume$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$volume(receiver, value);
};
$.split$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).split$1(receiver, a0);
};
$.step$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).step$1(receiver, a0);
};
$.toDouble$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).toDouble$0(receiver);
};
$.toInt$0$nx = function(receiver) {
  return $.getInterceptor$nx(receiver).toInt$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.transform$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return $.getInterceptor$x(receiver).transform$6(receiver, a0, a1, a2, a3, a4, a5);
};
$.mapTypeToInterceptor = [C.Type_QA5, $.Beetle, C.Type_a9w, $.bool, C.Type_6TA, $.JSObject, C.Type_IYi, $.String, C.Type_tCm, $.Frog, C.Type_woc, $.Null, C.Type_iZr, $.Turtle, C.Type_cGl, $.$double, C.Type_8aB, $.$int];
Isolate.$lazy($, "colors", "Gem_colors", "get$Gem_colors", function() {
  return ["red", "orange", "blue", "green"];
});
Isolate.$lazy($, "sounds", "Sounds_sounds", "get$Sounds_sounds", function() {
  var t1 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t1, [null, null]);
  return t1;
});
Isolate.$lazy($, "rand", "Turtle_rand", "get$Turtle_rand", function() {
  return C.C__Random;
});
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  var t1 = new $.Expando(null);
  $.setRuntimeTypeInfo(t1, [$.JSInt]);
  return t1;
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "getTypeNameOf", "getTypeNameOf", "get$getTypeNameOf", function() {
  return $.getFunctionForTypeNameOf();
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return $.List_List(null, null);
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  var t1 = new $.Expando("asynchronous error");
  $.setRuntimeTypeInfo(t1, [null]);
  return t1;
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return $.ListQueue$(null, {func: "void_", void: true});
});
Isolate.$lazy($, "_current", "_Zone__current", "get$_Zone__current", function() {
  return new $._DefaultZone(null, 0, 0, false);
});
Isolate.$lazy($, "_toStringList", "ListMixin__toStringList", "get$ListMixin__toStringList", function() {
  return $.List_List(null, null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return $.List_List(null, null);
});
// Native classes
$.defineNativeMethods("CanvasGradient|CanvasPattern|MediaError|MediaKeyError|Navigator|PositionError|RTCIceCandidate|SQLError|SVGAnimatedInteger|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|SVGAnimatedTransformList|Touch|mozRTCIceCandidate", $.Interceptor);

$.defineNativeMethods("HTMLBRElement|HTMLBaseElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDivElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMenuElement|HTMLModElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement", $.HtmlElement);

$.defineNativeMethodsNonleaf("HTMLElement", $.HtmlElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("WebGLRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethodsNonleaf("CanvasRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethods("CanvasRenderingContext2D", $.CanvasRenderingContext2D);

$.defineNativeMethods("CDATASection|CharacterData|Comment|ProcessingInstruction|Text", $.CharacterData);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DOMError|FileError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethods("AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent", $.Event);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("Location", $.Location);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethods("HTMLAudioElement", $.MediaElement);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethodsNonleaf("DragEvent|MSPointerEvent|MouseEvent|PointerEvent", $.MouseEvent);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethods("Document|DocumentType|Entity|HTMLDocument|Notation|SVGDocument", $.Node);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("SpeechSynthesisEvent", $.SpeechSynthesisEvent);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("TextMetrics", $.TextMetrics);

$.defineNativeMethods("TouchEvent", $.TouchEvent);

$.defineNativeMethods("TouchList", $.TouchList);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("CompositionEvent|FocusEvent|KeyboardEvent|SVGZoomEvent|TextEvent", $.UIEvent);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("MouseScrollEvent|MouseWheelEvent|WheelEvent", $.WheelEvent);

$.defineNativeMethods("DOMWindow|Window", $.Window);

$.defineNativeMethods("Attr", $._Attr);

$.defineNativeMethods("ClientRect", $._ClientRect);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGAElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGGElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGSwitchElement", $.GraphicsElement);

$.defineNativeMethodsNonleaf("SVGGraphicsElement", $.GraphicsElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGDescElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGGradientElement|SVGLinearGradientElement|SVGMarkerElement|SVGMetadataElement|SVGRadialGradientElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGSymbolElement|SVGTitleElement|SVGViewElement", $.SvgElement);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGTextPathElement", $.TextContentElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethodsExtended("ArrayBufferView", $.TypedData, [$.TypedData_ListMixin, $.TypedData_ListMixin_FixedLengthListMixin]);

$.defineNativeMethods("CanvasPixelArray|Uint8ClampedArray", $.Uint8ClampedList);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8List);


init.functionAliases = {};
;
init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof console !== "undefined" && typeof document !== "undefined" &&
      document.readyState == "loading") {
    console.warn("Dart script executed synchronously, use <script src='" +
        currentScript.src + "' defer></scr" + "ipt> to execute after parsing " +
        "has completed. See also http://dartbug.com/12281.");
  }
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main$closure); });
  } else {
    $.startRootIsolate($.main$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
        if (reflectable) {
          prototype["get$" + accessorName].$reflectable = 1;
        }
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
        if (reflectable) {
          prototype["set$" + accessorName].$reflectable = 1;
        }
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        var constructor = defineClass(name, cls, fields, desc);
        isolateProperties[cls] = constructor;
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return this." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = arguments.callee.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var Constants = function() {
    };
    Constants.prototype = C;
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
})()

//# sourceMappingURL=main.dart.js.map
//@ sourceMappingURL=main.dart.js.map

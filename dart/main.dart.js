// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Method closures
$$.BoundClosure$0 = [Q, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self);
  }
}];

$$.BoundClosure$1 = [Q, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$i0 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self, this._receiver);
  }
}];

$$.BoundClosure$2 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  "+call:1:0": 0,
  $is_args2: true,
  $is_args1: true
}];

$$.BoundClosure$i1 = [W, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, this._receiver, p0);
  },
  $is_args1: true
}];

$$.Closure$0 = [Q, {"": "Closure;call$0,$name"}];

$$.Closure$2 = [H, {"": "Closure;call$2,$name", $is_args2: true}];

$$.Closure$7 = [H, {"": "Closure;call$7,$name"}];

$$.Closure$1 = [H, {"": "Closure;call$1,$name", $is_args1: true}];

$$.Closure$21 = [P, {"": "Closure;call$2,$name",
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  "+call:1:0": 0,
  $is_args2: true,
  $is_args1: true
}];

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.interfaces) init.interfaces = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.interfaces[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["ComputerHistory", "main.dart", , Q, {
main: function() {
  Q.Sounds_loadSound("hop");
  Q.Sounds_loadSound("skip");
  Q.Sounds_loadSound("jump");
  Q.Sounds_loadSound("chimes");
  Q.Sounds_loadSound("croak");
  Q.Sounds_loadSound("crunch");
  Q.Sounds_loadSound("sing");
  Q.Sounds_loadSound("chirp");
  Q.Sounds_loadSound("click");
  Q.Sounds_loadSound("splash");
  Q.Sounds_loadSound("tick");
  Q.Sounds_loadSound("turn");
  Q.Sounds_loadSound("swoosh");
  Q.Sounds_loadSound("gulp");
  Q.FrogPond$();
},

Sounds_loadSound: function($name) {
  var audio, t1;
  audio = W.AudioElement_AudioElement(null);
  audio.src = "sounds/" + $name + ".wav";
  t1 = $.get$Sounds_sounds();
  t1.$indexSet(t1, $name, audio);
},

Sounds_playSound: function($name) {
  var t1 = $.get$Sounds_sounds();
  if (t1.$index(t1, $name) != null) {
    t1 = $.get$Sounds_sounds();
    J.set$volume$x(t1.$index(t1, $name), 0.6);
    t1 = $.get$Sounds_sounds();
    J.play$0$x(t1.$index(t1, $name));
  }
},

isFlagSet: function($name) {
  return J.indexOf$1$asx(J.get$search$x(C.Window_methods.get$location(window)), $name + "=true") > 0;
},

roundRect: function(ctx, x, y, w, h, r) {
  var t1, t2, t3, t4, t5, t6, t7;
  t1 = J.getInterceptor$x(ctx);
  t1.beginPath$0(ctx);
  t2 = x + r;
  t1.moveTo$2(ctx, t2, y);
  t3 = x + w;
  t4 = t3 - r;
  t1.lineTo$2(ctx, t4, y);
  t5 = y + r;
  t1.quadraticCurveTo$4(ctx, t3, y, t3, t5);
  t6 = y + h;
  t7 = t6 - r;
  t1.lineTo$2(ctx, t3, t7);
  t1.quadraticCurveTo$4(ctx, t3, t6, t4, t6);
  t1.lineTo$2(ctx, t2, t6);
  t1.quadraticCurveTo$4(ctx, x, t6, x, t7);
  t1.lineTo$2(ctx, x, t5);
  t1.quadraticCurveTo$4(ctx, x, y, t2, y);
  t1.closePath$0(ctx);
},

drawLineArrow: function(ctx, x0, y0, x1, y1, width) {
  var t1, theta, t2, t3, t4, t5, t6, t7;
  t1 = J.getInterceptor$x(ctx);
  t1.save$0(ctx);
  t1.beginPath$0(ctx);
  t1.moveTo$2(ctx, x0, y0);
  t1.lineTo$2(ctx, x1, y1);
  t1.set$lineWidth(ctx, width);
  t1.set$lineCap(ctx, "butt");
  t1.stroke$0(ctx);
  theta = Math.atan2(x1 - x0, y1 - y0);
  t2 = Math.sin(theta);
  t3 = Math.cos(theta);
  t4 = theta + 1.8849555921538759;
  t5 = Math.sin(t4);
  t4 = Math.cos(t4);
  t6 = theta - 1.8849555921538759;
  t7 = Math.sin(t6);
  t6 = Math.cos(t6);
  t1.beginPath$0(ctx);
  t1.moveTo$2(ctx, x1 + t2 * width * 1.2, y1 + t3 * width * 1.2);
  t1.lineTo$2(ctx, x1 + t5 * width * 1.2, y1 + t4 * width * 1.2);
  t1.lineTo$2(ctx, x1, y1);
  t1.lineTo$2(ctx, x1 + t7 * width * 1.2, y1 + t6 * width * 1.2);
  t1.closePath$0(ctx);
  t1.fill$0(ctx);
  t1.restore$0(ctx);
},

distance: function(x0, y0, x1, y1) {
  var t1, t2;
  t1 = J.getInterceptor$n(x1);
  t2 = J.getInterceptor$n(y1);
  t2 = J.$add$ns(J.$mul$n(t1.$sub(x1, x0), t1.$sub(x1, x0)), J.$mul$n(t2.$sub(y1, y0), t2.$sub(y1, y0)));
  if (typeof t2 !== "number")
    H.throwExpression(new P.ArgumentError(t2));
  return Math.sqrt(t2);
},

Beetle: {"": "Fly;_turn@,frame,perched,locked,shadowed@,frame0,frame1,frame2,shadow,color<,ComputerHistory$Fly$_turn,perch,pond,x,y,size,heading,opacity,dead,tween,img,variables,_width,_height",
  hatch$0: function() {
    var clone = Q.Beetle$(this.pond, this.color);
    clone.copy$1(this);
    return clone;
  },
  spook$0: function() {
    this.perched = false;
  },
  animate$0: function() {
    this.frame = this.frame + 1;
    if (this.frame > 1)
      this.frame = 0;
    if (this.tween.isTweening$0()) {
      this.tween.animate$0();
      return true;
    } else if (this.perched)
      if (this.locked)
        return false;
      else if ($.get$Turtle_rand().nextInt$1(100) > 98) {
        this.heading = this.heading - 0.2617993877991494;
        return true;
      } else if ($.get$Turtle_rand().nextInt$1(100) > 98) {
        this.heading = this.heading - -0.2617993877991494;
        return true;
      } else
        return false;
    else {
      this.forward$1(6);
      var t1 = this._turn;
      this.heading = this.heading - t1 / 180 * 3.141592653589793;
      t1 = this.pond;
      if (t1.onGridPoint$3(this.x, this.y, 8) && t1.getTurtlesHere$2(this, C.Type_SDA)._collection$_length === 0 && t1.getTurtlesHere$2(this, C.Type_YyT)._collection$_length === 0)
        this.perched = true;
      else if ($.get$Turtle_rand().nextInt$1(100) > 98) {
        $.get$Turtle_rand().toString;
        this._turn = Math.random() * 3 - 1.5;
      }
      return true;
    }
  },
  _drawLocal$1: function(ctx) {
    var i, t1, iw, ih;
    if (this.dead)
      return;
    i = this.frame === 0 ? this.frame1 : this.frame2;
    if (this.perched)
      i = this.frame0;
    if (this.shadowed)
      i = this.shadow;
    t1 = J.getInterceptor$x(i);
    iw = t1.get$width(i);
    ih = t1.get$height(i);
    J.drawImageScaled$5$x(ctx, i, J.$negate$n(iw) / 2, J.$negate$n(ih) / 2, iw, ih);
  },
  Beetle$2: function(pond, color) {
    var t1, t2;
    if (color == null) {
      t1 = $.get$Beetle_colors();
      t2 = $.get$Turtle_rand();
      $.get$Beetle_colors();
      t2 = t2.nextInt$1(4);
      if (t2 < 0 || t2 >= 4)
        throw H.ioore(t1, t2);
      color = t1[t2];
    }
    this.color = color;
    J.set$src$x(this.img, "images/gems/beetle_" + H.S(color) + "2.png");
    J.set$src$x(this.frame0, "images/gems/beetle_" + H.S(color) + "0.png");
    J.set$src$x(this.frame1, "images/gems/beetle_" + H.S(color) + "1.png");
    J.set$src$x(this.frame2, "images/gems/beetle_" + H.S(color) + "2.png");
    J.set$src$x(this.shadow, "images/gems/beetle_shadow.png");
  },
  $isBeetle: true,
  static: {
"": "Beetle_colors",
Beetle$: function(pond, color) {
  var t1, t2, t3, t4, t5;
  t1 = W.ImageElement_ImageElement(null, null, null);
  t2 = W.ImageElement_ImageElement(null, null, null);
  t3 = W.ImageElement_ImageElement(null, null, null);
  t4 = W.ImageElement_ImageElement(null, null, null);
  t5 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
  t5.segments = [];
  t5 = new Q.Beetle(1.5, 1, false, false, false, t1, t2, t3, t4, null, 3, 0, pond, 0, 0, 1, 0, 1, false, t5, W.ImageElement_ImageElement(null, null, null), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null), 0, 0);
  t4 = $.get$Turtle_rand().nextInt$1(365);
  t5.heading = t5.heading - -t4 / 180 * 3.141592653589793;
  t5.Fly$1(pond);
  t5.Beetle$2(pond, color);
  return t5;
}}

},

Block: {"": "Object;workspace,id,x*,y*,_width,_height,_targetX,_targetY,text,color<,textColor,dragging<,candidate',next,prev,param,_lastX,_lastY,inMenu?,inserted<",
  clone$0: function(_) {
    var b = Q.Block$(this.workspace, this.text);
    this.copyTo$1(b);
    return b;
  },
  copyTo$1: function(other) {
    var t1;
    other.x = this.x;
    other.y = this.y;
    other._width = this._width;
    other._height = this._height;
    other.text = this.text;
    other.color = this.color;
    other.textColor = this.textColor;
    t1 = this.param;
    if (t1 != null)
      other.param = t1.clone$1(t1, other);
  },
  get$isInProgram: function() {
    return this.prev != null;
  },
  get$width: function(_) {
    var t1, t2;
    t1 = this.inMenu;
    t2 = this._width;
    return t1 ? t2 * 0.66 : t2;
  },
  get$height: function(_) {
    return this._height;
  },
  get$connectorX: function() {
    return this.get$targetX(this);
  },
  get$targetX: function(_) {
    var t1 = this._targetX;
    if (t1 != null)
      return t1;
    t1 = this.prev;
    return t1 != null ? t1.get$connectorX() : this.x;
  },
  get$targetY: function(_) {
    var t1, t2, ty;
    t1 = this._targetY;
    if (t1 != null)
      return t1;
    t1 = this.next;
    if (t1 != null) {
      t1 = t1.get$targetY(t1);
      t2 = this._height;
      if (typeof t1 !== "number")
        throw t1.$sub();
      ty = t1 - t2 - 0;
    } else
      ty = this.y;
    t1 = this.candidate;
    if (t1 != null) {
      t1 = J.$add$ns(J.get$height$x(t1), 0);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      ty -= t1;
    }
    return ty;
  },
  moveChain$2: function(deltaX, deltaY) {
    var t1;
    this.x = this.x + deltaX;
    this.y = this.y + deltaY;
    t1 = this.next;
    if (t1 != null)
      t1.moveChain$2(deltaX, deltaY);
  },
  move$2: function(deltaX, deltaY) {
    this.x = this.x + deltaX;
    this.y = this.y + deltaY;
  },
  overlaps$1: function(other) {
    var t1, t2, t3, t4, t5;
    t1 = J.getInterceptor$x(other);
    if (this.x <= J.$add$ns(t1.get$x(other), t1.get$width(other)) + 0) {
      t2 = t1.get$x(other);
      t3 = this.x;
      t4 = this.inMenu;
      t5 = this._width;
      if (J.$le$n(t2, t3 + (t4 ? t5 * 0.66 : t5) + 0)) {
        t2 = this.y;
        t1 = t1.get$y(other);
        if (typeof t1 !== "number")
          throw H.iae(t1);
        t1 = t2 <= t1;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  eval$1: function(program) {
    var t1, pval;
    t1 = this.param;
    pval = t1 == null ? null : t1.get$value(t1);
    program.doCommand$2(this.text, pval);
  },
  step$1: function(_, program) {
    return this.next;
  },
  checkSyntax$1: function(before) {
    return !before.$isEndProgramBlock;
  },
  parameterChanged$1: function(param) {
    this.workspace.preview$1(this);
  },
  animate$0: function() {
    var t1, t2, dx, dy;
    t1 = this.get$targetX(this);
    t2 = this.x;
    if (typeof t1 !== "number")
      throw t1.$sub();
    dx = t1 - t2;
    t2 = this.get$targetY(this);
    t1 = this.y;
    if (typeof t2 !== "number")
      throw t2.$sub();
    dy = t2 - t1;
    if (Math.abs(dx) > 1)
      dx *= 0.3;
    else
      this._targetX = null;
    if (Math.abs(dy) > 1)
      dy *= 0.3;
    else
      this._targetY = null;
    if (Math.abs(dx) > 0 || Math.abs(dy) > 0) {
      this.x = this.x + dx;
      this.y = this.y + dy;
      return true;
    } else
      return this.dragging;
  },
  insertBlock$1: function(target) {
    var t1;
    target.next = this.next;
    target.prev = this;
    t1 = this.next;
    if (t1 != null)
      t1.prev = target;
    this.next = target;
    t1 = this.workspace;
    t1.pond.stopProgram$1(t1);
  },
  draw$1: function(ctx) {
    this._drawMenuArrow$1(ctx);
    this._resize$1(ctx);
    this._drawOutline$1(ctx);
    this._drawLabel$1(ctx);
    this._drawParam$1(ctx);
  },
  _resize$1: function(ctx) {
    var t1 = this.param;
    if (t1 != null && this.inserted)
      this._width = P.max(t1.getDisplayWidth$1(ctx) + this.param.centerX - 14, 95);
  },
  _drawMenuArrow$1: function(ctx) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.workspace.menu;
    t2 = this.y;
    t3 = this._height;
    t1 = t1.y;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (t2 + t3 / 2 >= t1 && this.dragging && !this.inserted) {
      t1 = J.getInterceptor$x(ctx);
      t1.set$fillStyle(ctx, "orange");
      t1.set$strokeStyle(ctx, "orange");
      t1 = this.x;
      t2 = this.inMenu;
      t3 = this._width;
      if (t2)
        t3 *= 0.66;
      t4 = this.y;
      t5 = this._height;
      t4 += t5 / 2;
      t6 = this._width;
      t2 = t2 ? t6 * 0.66 : t6;
      Q.drawLineArrow(ctx, t1 + t3 / 2, t4, t1 + t2 / 2, t4 - t5, 18);
    }
  },
  _drawOutline$1: function(ctx) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = this.y;
    t3 = this.inMenu;
    t4 = this._width;
    t3 = t3 ? t4 * 0.66 : t4;
    this._outline$5(ctx, t1, t2, t3, this._height);
    t3 = J.getInterceptor$x(ctx);
    t3.save$0(ctx);
    t3.set$fillStyle(ctx, this.color);
    t3.set$strokeStyle(ctx, "rgba(255, 255, 255, 0.3)");
    t3.set$lineWidth(ctx, 2);
    t3.fill$0(ctx);
    t3.stroke$0(ctx);
    t3.restore$0(ctx);
  },
  _drawLabel$1: function(ctx) {
    var lines, t1, tx, ty, t2;
    lines = this.text.split("\n");
    t1 = J.getInterceptor$x(ctx);
    t1.set$fillStyle(ctx, this.textColor);
    t1.set$font(ctx, "200 11pt sans-serif");
    t1.set$textAlign(ctx, "left");
    t1.set$textBaseline(ctx, "middle");
    tx = this.x + 12;
    ty = this.y + this._height / 2;
    t2 = lines.length;
    if (t2 === 1)
      t1.fillText$3(ctx, this.text, tx, ty);
    else {
      if (0 >= t2)
        throw H.ioore(lines, 0);
      t1.fillText$3(ctx, lines[0], tx, ty - 7);
      if (1 >= lines.length)
        throw H.ioore(lines, 1);
      t1.fillText$3(ctx, lines[1], tx, ty + 7);
    }
  },
  _drawParam$1: function(ctx) {
    var t1 = this.param;
    if (t1 != null && this.inserted)
      t1.draw$1(ctx);
  },
  _outline$5: function(ctx, x, y, w, h) {
    var t1, t2, r0, r1, t3, t4, t5, t6, t7, t8;
    t1 = this.prev;
    if (t1 != null) {
      t2 = J.getInterceptor(t1);
      t1 = typeof t1 === "object" && t1 !== null && !!t2.$isControlBlock && (typeof t1 !== "object" || t1 === null || !t2.$isEndBlock);
    } else
      t1 = true;
    r0 = t1 ? 14 : 2;
    t1 = this.next;
    if (t1 != null) {
      t2 = J.getInterceptor(t1);
      t1 = typeof t1 === "object" && t1 !== null && !!t2.$isControlBlock && (typeof t1 !== "object" || t1 === null || !t2.$isBeginBlock);
    } else
      t1 = true;
    r1 = t1 ? 14 : 2;
    t1 = J.getInterceptor$x(ctx);
    t1.beginPath$0(ctx);
    t2 = x + r0;
    t1.moveTo$2(ctx, t2, y);
    t3 = x + 20;
    t1.lineTo$2(ctx, t3, y);
    t4 = t3 + 5;
    t5 = y + 4;
    t1.lineTo$2(ctx, t4, t5);
    t6 = t3 + 10;
    t1.lineTo$2(ctx, t6, t5);
    t5 = t3 + 15;
    t1.lineTo$2(ctx, t5, y);
    t7 = x + w;
    t1.lineTo$2(ctx, t7, y);
    t8 = y + h;
    t1.lineTo$2(ctx, t7, t8);
    t1.lineTo$2(ctx, t5, t8);
    t5 = t8 + 4;
    t1.lineTo$2(ctx, t6, t5);
    t1.lineTo$2(ctx, t4, t5);
    t1.lineTo$2(ctx, t3, t8);
    t1.lineTo$2(ctx, x + r1, t8);
    t1.quadraticCurveTo$4(ctx, x, t8, x, t8 - r1);
    t1.lineTo$2(ctx, x, y + r0);
    t1.quadraticCurveTo$4(ctx, x, y, t2, y);
    t1.closePath$0(ctx);
  },
  containsTouch$1: function(c) {
    var tx, ty, t1, t2, t3, t4;
    tx = c.touchX;
    ty = c.touchY;
    t1 = this.x;
    if (tx >= t1) {
      t2 = this.y;
      if (ty >= t2) {
        t3 = this.inMenu;
        t4 = this._width;
        t1 = tx <= t1 + (t3 ? t4 * 0.66 : t4) && ty <= t2 + this._height;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  touchDown$1: function(c) {
    var wasInProgram, t1;
    this.dragging = true;
    wasInProgram = this.get$isInProgram();
    this._lastX = c.touchX;
    this._lastY = c.touchY;
    t1 = this.prev;
    if (t1 != null)
      t1.next = this.next;
    t1 = this.next;
    if (t1 != null)
      t1.prev = this.prev;
    this.prev = null;
    this.next = null;
    if (wasInProgram) {
      t1 = this.workspace;
      t1.pond.stopProgram$1(t1);
    }
    t1 = this.workspace;
    t1.removeBlock$1(this);
    t1.addBlock$1(this);
    t1.draw$0();
    return true;
  },
  touchUp$1: function(c) {
    var t1, t2, t3, t4;
    t1 = this.workspace;
    if (t1.snapTogether$1(this)) {
      Q.Sounds_playSound("click");
      t1.preview$1(this);
      this.inserted = true;
    } else {
      if (!this.inserted) {
        t2 = t1.menu;
        t3 = this.y;
        t4 = this._height;
        t2 = t2.y;
        if (typeof t2 !== "number")
          throw H.iae(t2);
        t2 = t3 + t4 / 2 >= t2;
      } else
        t2 = false;
      if (t2) {
        t1.snapToEnd$1(this);
        Q.Sounds_playSound("click");
        t1.preview$1(this);
        this.inserted = true;
      } else {
        if (!t1.isOffscreen$1(this)) {
          t2 = t1.menu;
          t3 = this.y;
          t4 = this._height;
          t2 = t2.y;
          if (typeof t2 !== "number")
            throw H.iae(t2);
          t2 = t3 + t4 / 2 >= t2 || this.inserted;
        } else
          t2 = true;
        if (t2) {
          t1.removeBlock$1(this);
          Q.Sounds_playSound("crunch");
        }
      }
    }
    this.dragging = false;
  },
  touchDrag$1: function(c) {
    var t1, t2, t3, t4;
    t1 = c.touchX;
    t2 = this._lastX;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t3 = c.touchY;
    t4 = this._lastY;
    if (typeof t4 !== "number")
      throw H.iae(t4);
    this.x = this.x + (t1 - t2);
    this.y = this.y + (t3 - t4);
    this._lastX = c.touchX;
    this._lastY = c.touchY;
  },
  touchSlide$1: function(c) {
  },
  Block$2: function(workspace, text) {
    var t1 = $.Block_BLOCK_ID;
    $.Block_BLOCK_ID = t1 + 1;
    this.id = t1;
    this._width = 95;
    this._height = 40;
  },
  static: {
"": "Block_BLOCK_ID",
Block$: function(workspace, text) {
  var t1 = new Q.Block(workspace, null, 0, 0, 0, 0, null, null, text, "#3399aa", "white", false, null, null, null, null, null, null, false, false);
  t1.Block$2(workspace, text);
  return t1;
}}

},

TraceBug: {"": "Object;x*,y*,target,start>",
  get$targetX: function(_) {
    var t1, t2;
    t1 = this.target;
    if (t1 == null)
      t1 = 0;
    else {
      t2 = J.getInterceptor$x(t1);
      t1 = t2.get$x(t1) + t2.get$width(t1) + 6;
    }
    return t1;
  },
  get$targetY: function(_) {
    var t1, t2;
    t1 = this.target;
    if (t1 == null)
      t1 = 0;
    else {
      t2 = J.getInterceptor$x(t1);
      t1 = t2.get$y(t1) + t2.get$height(t1) / 2;
    }
    return t1;
  },
  animate$0: function() {
    var dx, dy;
    if (this.target == null)
      return false;
    dx = this.get$targetX(this) - this.x;
    dy = this.get$targetY(this) - this.y;
    if (Math.abs(dx) > 1)
      dx *= 0.3;
    if (Math.abs(dy) > 1)
      dy *= 0.3;
    if (Math.abs(dx) > 0 || Math.abs(dy) > 0) {
      this.x = this.x + dx;
      this.y = this.y + dy;
      return true;
    } else
      return false;
  },
  reset$0: function(_) {
    this.target = this.start;
    this.x = this.get$targetX(this);
    this.y = this.get$targetY(this);
  },
  draw$1: function(ctx) {
    var t1, t2;
    t1 = this.target;
    if (t1 != null) {
      t2 = J.getInterceptor(t1);
      t2 = typeof t1 === "object" && t1 !== null && !!t2.$isStartBlock;
      t1 = t2;
    } else
      t1 = true;
    if (t1)
      return;
    t1 = J.getInterceptor$x(ctx);
    t1.beginPath$0(ctx);
    t1.moveTo$2(ctx, this.x, this.y);
    t1.lineTo$2(ctx, this.x + 9, this.y - 7);
    t1.lineTo$2(ctx, this.x + 8, this.y - 3);
    t1.lineTo$2(ctx, this.x + 20, this.y - 3);
    t1.lineTo$2(ctx, this.x + 20, this.y + 3);
    t1.lineTo$2(ctx, this.x + 8, this.y + 3);
    t1.lineTo$2(ctx, this.x + 9, this.y + 7);
    t1.closePath$0(ctx);
    t1.set$fillStyle(ctx, "yellow");
    t1.set$strokeStyle(ctx, "yellow");
    t1.set$lineWidth(ctx, 2);
    t1.fill$0(ctx);
    t1.stroke$0(ctx);
  },
  TraceBug$1: function(start) {
    this.target = this.start;
    this.x = this.get$targetX(this);
    this.y = this.get$targetY(this);
  },
  static: {
TraceBug$: function(start) {
  var t1 = new Q.TraceBug(0, 0, null, start);
  t1.TraceBug$1(start);
  return t1;
}}

},

ControlBlock: {"": "Block;",
  get$targetX: function(_) {
    var t1;
    if (!this.dragging) {
      t1 = this.cprev;
      t1 = t1 != null && t1.get$isInProgram();
    } else
      t1 = false;
    if (t1) {
      t1 = Q.Block.prototype.get$targetX.call(this, this);
      if (typeof t1 !== "number")
        throw t1.$sub();
      return t1 - 10;
    } else
      return Q.Block.prototype.get$targetX.call(this, this);
  },
  get$targetY: function(_) {
    var t1, t2;
    if (this.candidate == null) {
      t1 = this.cnext;
      if (t1 != null) {
        t2 = this.next;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
    } else
      t1 = false;
    if (t1) {
      t1 = Q.Block.prototype.get$targetY.call(this, this);
      if (typeof t1 !== "number")
        throw t1.$sub();
      return t1 - 25;
    } else
      return Q.Block.prototype.get$targetY.call(this, this);
  },
  get$connectorX: function() {
    if (!this.dragging && this.cnext != null) {
      var t1 = this.get$targetX(this);
      if (typeof t1 !== "number")
        throw t1.$add();
      return t1 + 10;
    } else
      return this.get$targetX(this);
  },
  draw$1: function(ctx) {
    this._resize$1(ctx);
    this._drawMenuArrow$1(ctx);
    this._drawLabel$1(ctx);
    this._drawParam$1(ctx);
  },
  checkSyntax$1: function(before) {
    var t1, t2, p, nest, t3, a;
    t1 = this.inserted;
    if (t1 && this.cprev != null)
      for (t2 = this.cprev, p = before, nest = 0; true;) {
        if (p == null)
          return false;
        else if (p == null ? t2 == null : p === t2)
          if (nest !== 0)
            return false;
          else
            break;
        else {
          t3 = J.getInterceptor(p);
          if (typeof p === "object" && p !== null && !!t3.$isEndBlock)
            --nest;
          else if (typeof p === "object" && p !== null && !!t3.$isBeginBlock)
            ++nest;
        }
        p = p.prev;
      }
    if (t1 && this.cnext != null) {
      a = before.next;
      for (t1 = this.cnext, nest = 0; true;) {
        if (a == null)
          return false;
        else if (a == null ? t1 == null : a === t1)
          if (nest !== 0)
            return false;
          else
            break;
        else {
          t2 = J.getInterceptor(a);
          if (typeof a === "object" && a !== null && !!t2.$isEndBlock)
            --nest;
          else if (typeof a === "object" && a !== null && !!t2.$isBeginBlock)
            ++nest;
        }
        a = a.next;
      }
    }
    return true;
  },
  touchUp$1: function(c) {
    var wasInProgram = this.inserted;
    Q.Block.prototype.touchUp$1.call(this, c);
    if (this.inserted && !wasInProgram)
      this.begin.addAllBlocks$0();
    else if (!this.get$isInProgram()) {
      this.begin.removeAllBlocks$0();
      this.workspace.draw$0();
    }
  },
  touchDown$1: function(c) {
    var t1, t2, b, t3;
    t1 = this.cnext;
    if (t1 != null) {
      t2 = this.next;
      if (t2 == null ? t1 == null : t2 === t1) {
        t1 = this.cprev;
        if (t1 != null) {
          t2 = this.prev;
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    if (t1)
      return false;
    Q.Block.prototype.touchDown$1.call(this, c);
    if (this.inserted && this.begin != null) {
      b = this.begin;
      for (t1 = this.workspace, t2 = t1.blocks, t1 = t1.touchables; b != null;) {
        C.JSArray_methods.remove$1(t2, b);
        C.JSArray_methods.remove$1(t1, b);
        t3 = b.param;
        if (t3 != null)
          C.JSArray_methods.remove$1(t1, t3);
        t2.push(b);
        t1.push(b);
        t3 = b.param;
        if (t3 != null)
          t1.push(t3);
        b = b.cnext;
      }
    }
    return true;
  },
  touchDrag$1: function(c) {
    var t1, miny, t2, maxy, t3, ty, t4, dx;
    if (!this.inserted) {
      Q.Block.prototype.touchDrag$1.call(this, c);
      return;
    }
    t1 = this.cprev;
    miny = t1 != null ? t1.y + t1._height : 0;
    t1 = this.cnext;
    t2 = this._height;
    maxy = t1 != null ? t1.y - t2 : this.workspace.start.end.y - t2;
    t1 = this.y;
    t2 = c.touchY;
    t3 = this._lastY;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t3 = t2 - t3;
    ty = t1 + t3;
    if (!!this.$isBeginBlock) {
      t2 = c.touchX;
      t4 = this._lastX;
      if (typeof t4 !== "number")
        throw H.iae(t4);
      dx = t2 - t4;
    } else
      dx = 0;
    if (ty < miny) {
      this.x = this.x + dx;
      this.y = this.y + (miny - t1);
      this._lastX = c.touchX;
      this._lastY = this.y;
    } else {
      t2 = this.x;
      if (ty > maxy) {
        this.x = t2 + dx;
        this.y = this.y + (maxy - t1);
        this._lastX = c.touchX;
        this._lastY = this.y;
      } else {
        this.x = t2 + dx;
        this.y = this.y + t3;
        this._lastX = c.touchX;
        this._lastY = c.touchY;
      }
    }
  },
  $isControlBlock: true
},

BeginBlock: {"": "ControlBlock;",
  draw$1: function(ctx) {
    this._resize$1(ctx);
    this._drawMenuArrow$1(ctx);
    this._drawOutline$1(ctx);
    this._drawLabel$1(ctx);
    this._drawParam$1(ctx);
  },
  _addClause$1: function(clause) {
    var c, c0;
    for (c = this; c != null; c = c0) {
      c0 = c.cnext;
      if (c0 == null) {
        c.cnext = clause;
        c.next = clause;
        clause.cprev = c;
        clause.prev = c;
        return;
      }
    }
  },
  _endStep$1: function(program) {
    return this.end.next;
  },
  _subpath$2: function(ctx, b) {
    var x0, t1, t2, x1, y0, y1, n, t3, t4, t5, y2;
    x0 = this.x;
    t1 = b.inMenu;
    t2 = b._width;
    x1 = x0 + (t1 ? t2 * 0.66 : t2);
    y0 = b.y;
    y1 = y0 + b._height;
    t1 = J.getInterceptor(b);
    t2 = typeof b === "object" && b !== null && !!t1.$isBeginBlock;
    n = t2 ? 20 : 30;
    if (typeof b !== "object" || b === null || !t1.$isStartBlock) {
      t3 = x0 + n;
      t4 = J.getInterceptor$x(ctx);
      t4.lineTo$2(ctx, t3, y0);
      t5 = y0 + 4;
      t4.lineTo$2(ctx, t3 + 5, t5);
      t4.lineTo$2(ctx, t3 + 10, t5);
      t4.lineTo$2(ctx, t3 + 15, y0);
    }
    t3 = J.getInterceptor$x(ctx);
    t3.lineTo$2(ctx, x1, y0);
    t3.lineTo$2(ctx, x1, y1);
    if (t2)
      n += 10;
    else if (typeof b === "object" && b !== null && !!t1.$isEndBlock)
      n -= 10;
    if (typeof b !== "object" || b === null || !t1.$isEndProgramBlock) {
      t1 = x0 + n;
      t3.lineTo$2(ctx, t1 + 15, y1);
      t2 = y1 + 4;
      t3.lineTo$2(ctx, t1 + 10, t2);
      t3.lineTo$2(ctx, t1 + 5, t2);
      t3.lineTo$2(ctx, t1, y1);
    }
    t1 = b.cnext;
    if (t1 != null) {
      y2 = t1.y;
      t1 = x0 + 10;
      t2 = t1 + 14;
      t3.lineTo$2(ctx, t2, y1);
      t3.quadraticCurveTo$4(ctx, t1, y1, t1, y1 + 14);
      t3.lineTo$2(ctx, t1, y2 - 14);
      t3.quadraticCurveTo$4(ctx, t1, y2, t2, y2);
    }
  },
  _outline$5: function(ctx, x, y, w, h) {
    var t1, t2, r0, r1, y3, clause;
    if (!this.inserted)
      Q.Block.prototype._outline$5.call(this, ctx, x, y, w, h);
    else {
      t1 = this.prev;
      if (t1 != null) {
        t2 = J.getInterceptor(t1);
        t2 = typeof t1 === "object" && t1 !== null && !!t2.$isBeginBlock;
        t1 = t2;
      } else
        t1 = true;
      r0 = t1 ? 14 : 2;
      if (this.next != null) {
        t1 = this.end.next;
        t2 = J.getInterceptor(t1);
        t1 = typeof t1 === "object" && t1 !== null && !!t2.$isEndBlock || t1 == null;
      } else
        t1 = true;
      r1 = t1 ? 14 : 2;
      P.max(this.end.y, y + h + 16);
      t1 = this.end;
      y3 = t1.y + t1._height;
      t1 = J.getInterceptor$x(ctx);
      t1.beginPath$0(ctx);
      t2 = x + r0;
      t1.moveTo$2(ctx, t2, y);
      for (clause = this; clause != null;) {
        this._subpath$2(ctx, clause);
        clause = clause.cnext;
      }
      t1.lineTo$2(ctx, x + r1, y3);
      t1.quadraticCurveTo$4(ctx, x, y3, x, y3 - r1);
      t1.lineTo$2(ctx, x, y + r0);
      t1.quadraticCurveTo$4(ctx, x, y, t2, y);
      t1.closePath$0(ctx);
    }
  },
  addAllBlocks$0: function() {
    var b, t1, t2, t3;
    this.next.prev = this.end;
    this.end.next = this.next;
    this.next = this.cnext;
    this.cnext.prev = this;
    b = this.cnext;
    for (t1 = this.workspace, t2 = t1.blocks, t1 = t1.touchables; b != null;) {
      b.x = this.x;
      b.y = this.y + this._height;
      t2.push(b);
      t1.push(b);
      t3 = b.param;
      if (t3 != null)
        t1.push(t3);
      b.inserted = true;
      b = b.cnext;
    }
  },
  removeAllBlocks$0: function() {
    var t1, t2, b, t3;
    for (t1 = this.workspace, t2 = t1.blocks, t1 = t1.touchables, b = this; b != null;) {
      t3 = b.prev;
      if (t3 != null)
        t3.next = b.next;
      t3 = b.next;
      if (t3 != null)
        t3.prev = b.prev;
      b.prev = null;
      b.next = null;
      C.JSArray_methods.remove$1(t2, b);
      C.JSArray_methods.remove$1(t1, b);
      t3 = b.param;
      if (t3 != null)
        C.JSArray_methods.remove$1(t1, t3);
      b = b.cnext;
    }
  },
  $isBeginBlock: true
},

EndBlock: {"": "ControlBlock;begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  step$1: function(_, program) {
    var t1 = this.begin;
    if (t1 != null)
      return t1._endStep$1(program);
    else
      return this.next;
  },
  $isEndBlock: true
},

IfBlock: {"": "BeginBlock;el,end,begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  clone$0: function(_) {
    var block = Q.IfBlock$(this.workspace);
    this.copyTo$1(block);
    return block;
  },
  step$1: function(_, program) {
    var t1, t2, t3;
    t1 = this.param;
    t1 = program.getSensorValue$1(t1.get$value(t1));
    t2 = program.variables;
    t3 = this.id;
    if (t1) {
      t2.$indexSet(t2, "if" + t3, "if-branch");
      return this.next;
    } else {
      t2.$indexSet(t2, "if" + t3, "else-branch");
      return this.el;
    }
  },
  IfBlock$1: function(workspace) {
    var t1, t2, t3;
    this.param = Q.Parameter$(this);
    t1 = this.param;
    t2 = this.inMenu;
    t3 = this._width;
    t1.centerX = (t2 ? t3 * 0.66 : t3) - 35;
    this.param.values = ["see-bug?", "near-water?", "blocked?"];
    t1 = new Q.ElseBlock(null, null, null, workspace, null, 0, 0, 0, 0, null, null, "else", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
    t1.Block$2(workspace, "else");
    t1.color = "#c92";
    t1.begin = this;
    this.el = t1;
    this._addClause$1(this.el);
    t1 = new Q.EndBlock(null, null, null, workspace, null, 0, 0, 0, 0, null, null, "", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
    t1.Block$2(workspace, "");
    t1.color = "#c92";
    t1.begin = this;
    t1._height = 18;
    this.end = t1;
    this._addClause$1(this.end);
  },
  static: {
IfBlock$: function(workspace) {
  var t1 = new Q.IfBlock(null, null, null, null, null, workspace, null, 0, 0, 0, 0, null, null, "if", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
  t1.Block$2(workspace, "if");
  t1.color = "#c92";
  t1.begin = null;
  t1.begin = t1;
  t1.IfBlock$1(workspace);
  return t1;
}}

},

ElseBlock: {"": "ControlBlock;begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  step$1: function(_, program) {
    var t1 = program.variables;
    if (J.$eq(t1.$index(t1, "if" + this.begin.id), "else-branch"))
      return this.next;
    else
      return this.begin.end.next;
  }
},

Menu: {"": "Object;workspace,x*,y*,w,h,blocks,target,play,pause,btarget,frog,buttons,beetles",
  play$0: function($receiver) {
    return this.play.call$0();
  },
  captureFly$1: function(fly) {
    var t1 = J.getInterceptor(fly);
    if (typeof fly === "object" && fly !== null && !!t1.$isBeetle) {
      t1 = this.beetles;
      t1.$index(t1, fly.color).set$shadowed(false);
      t1.$index(t1, fly.color).pulse$0();
    }
  },
  animate$0: function() {
    var t1, t2, refresh;
    this.play.animate$0();
    for (t1 = this.beetles, t1 = t1.get$values(t1), t2 = t1._iterable, t2 = t2.get$iterator(t2), t2 = new H.MappedIterator(null, t2, t1._f), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "MappedIterable", 0), H.getRuntimeTypeArgument(t1, "MappedIterable", 1)]), refresh = false; t2.moveNext$0();)
      if (t2._current.animate$0() === true)
        refresh = true;
    return refresh;
  },
  draw$1: function(ctx) {
    var t1, t2, t3, t4, iw, ih, ix, iy, block, t5;
    t1 = J.getInterceptor$x(ctx);
    t1.save$0(ctx);
    t1.set$fillStyle(ctx, "rgba(0, 0, 0, 0.3)");
    t1.fillRect$4(ctx, this.x, this.y, this.w, this.h);
    t1.set$fillStyle(ctx, "#3e5d64");
    t1.set$strokeStyle(ctx, "#223333");
    t1.set$lineWidth(ctx, 3);
    t1.beginPath$0(ctx);
    t2 = this.x;
    t3 = this.y;
    t4 = this.h;
    if (typeof t3 !== "number")
      throw t3.$add();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t1.moveTo$2(ctx, t2 + 230, t3 + t4);
    t4 = this.x;
    t3 = this.y;
    if (typeof t3 !== "number")
      throw t3.$sub();
    t1.bezierCurveTo$6(ctx, t4 + 250, t3 - 50, t4 + 160, t3 + 10, t4 - 6, t3 - 5);
    t3 = this.x;
    t4 = this.y;
    t2 = this.h;
    if (typeof t4 !== "number")
      throw t4.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t1.lineTo$2(ctx, t3 - 6, t4 + t2);
    t1.fill$0(ctx);
    t1.stroke$0(ctx);
    iw = C.JSNumber_methods.toInt$0(J.$mul$n(J.get$width$x(this.frog), 0.7));
    ih = C.JSNumber_methods.toInt$0(J.$mul$n(J.get$height$x(this.frog), 0.7));
    ix = this.x + 10;
    t2 = this.y;
    if (typeof t2 !== "number")
      throw t2.$add();
    t1.drawImageScaled$5(ctx, this.frog, ix, t2 + 2, iw, ih);
    t2 = this.workspace;
    this.play.visible = !t2.running;
    this.pause.visible = t2.running;
    H.IterableMixinWorkaround_forEach(this.buttons, new Q.Menu_draw_closure(ctx));
    ix += 235;
    t2 = this.y;
    t4 = this.h;
    if (typeof t4 !== "number")
      throw t4.$div();
    if (typeof t2 !== "number")
      throw t2.$add();
    iy = t2 + t4 / 2;
    for (t2 = this.blocks, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]); t3.moveNext$0();) {
      block = t3._current;
      t2 = J.getInterceptor$x(block);
      t2.set$x(block, ix);
      t2.set$y(block, iy - J.$div$n(t2.get$height(block), 2));
      block.set$inMenu(true);
      block.draw$1(ctx);
      t2 = J.$add$ns(t2.get$width(block), 10);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      ix += t2;
    }
    for (t2 = this.beetles, t3 = new P.LinkedHashMapKeyIterable(t2), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_LinkedHashMap", 0)]), t4 = t3._map, t5 = t4._modifications, t5 = new P.LinkedHashMapKeyIterator(t4, t5, null, null), H.setRuntimeTypeInfo(t5, [H.getRuntimeTypeArgument(t3, "LinkedHashMapKeyIterable", 0)]), t5._cell = t5._map._first; t5.moveNext$0();)
      t2.$index(t2, t5._collection$_current).draw$1(ctx);
    t1.restore$0(ctx);
  },
  containsTouch$1: function(c) {
    var t1, t2;
    for (t1 = this.blocks, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
      if (t2._current.containsTouch$1(c))
        return true;
    for (t1 = this.buttons, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
      if (t2._current.containsTouch$1(c))
        return true;
    return false;
  },
  touchDown$1: function(c) {
    var t1, t2, block, button;
    for (t1 = this.blocks, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      block = t2._current;
      if (block.containsTouch$1(c)) {
        this.target = J.clone$0$x(block);
        t1 = this.workspace;
        t2 = this.target;
        t1.blocks.push(t2);
        t1 = t1.touchables;
        t1.push(t2);
        t2 = t2.param;
        if (t2 != null)
          t1.push(t2);
        t1 = this.target;
        t1.x = t1.x + -2;
        t1.y = t1.y + -8;
        this.target.touchDown$1(c);
        return true;
      }
    }
    for (t1 = this.buttons, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      button = t2._current;
      if (button.containsTouch$1(c)) {
        this.btarget = button;
        this.btarget.touchDown$1(c);
        this.workspace.draw$0();
        return true;
      }
    }
    return false;
  },
  touchUp$1: function(c) {
    var t1 = this.target;
    if (t1 != null)
      t1.touchUp$1(c);
    else {
      t1 = this.btarget;
      if (t1 != null) {
        t1.touchUp$1(c);
        this.workspace.draw$0();
      }
    }
    this.target = null;
    this.btarget = null;
  },
  touchDrag$1: function(c) {
    var t1 = this.target;
    if (t1 != null)
      t1.touchDrag$1(c);
    else {
      t1 = this.btarget;
      if (t1 != null) {
        t1.touchDrag$1(c);
        this.workspace.draw$0();
      }
    }
  },
  touchSlide$1: function(c) {
  },
  Menu$5: function(workspace, x, y, w, h) {
    var t1, bx, bspace, t2, t3, t4, color, b, t5;
    t1 = this.workspace;
    J.set$src$x(this.frog, "images/" + t1.color + "frog.png");
    bx = this.x + 95;
    bspace = $.SHOW_FASTFORWARD ? 35 : 43;
    t2 = this.y;
    t3 = this.h;
    if (typeof t3 !== "number")
      throw t3.$div();
    if (typeof t2 !== "number")
      throw t2.$add();
    this.play = Q.Button$(bx, t2 + t3 / 2 - 15, "images/toolbar/play.png", new Q.Menu_closure(this));
    t3 = this.y;
    t2 = this.h;
    if (typeof t2 !== "number")
      throw t2.$div();
    if (typeof t3 !== "number")
      throw t3.$add();
    this.pause = Q.Button$(bx, t3 + t2 / 2 - 15, "images/toolbar/pause.png", new Q.Menu_closure0(this));
    this.pause.visible = false;
    t2 = this.buttons;
    t2.push(this.play);
    t2.push(this.pause);
    bx += bspace;
    t3 = this.y;
    t4 = this.h;
    if (typeof t4 !== "number")
      throw t4.$div();
    if (typeof t3 !== "number")
      throw t3.$add();
    t2.push(Q.Button$(bx, t3 + t4 / 2 - 15, "images/toolbar/restart.png", new Q.Menu_closure1(this)));
    if ($.SHOW_FASTFORWARD) {
      bx += bspace;
      t3 = this.y;
      t4 = this.h;
      if (typeof t4 !== "number")
        throw t4.$div();
      if (typeof t3 !== "number")
        throw t3.$add();
      t2.push(Q.Button$(bx, t3 + t4 / 2 - 15, "images/toolbar/fastforward.png", new Q.Menu_closure2(this)));
    }
    t3 = this.y;
    t4 = this.h;
    if (typeof t4 !== "number")
      throw t4.$div();
    if (typeof t3 !== "number")
      throw t3.$add();
    t2.push(Q.Button$(bx + bspace, t3 + t4 / 2 - 15, "images/toolbar/trash.png", new Q.Menu_closure3(this)));
    bx = J.$sub$n(this.w, 30);
    for (t2 = $.get$Beetle_colors(), t3 = new H.ListIterator(t2, 4, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]), t2 = this.beetles; t3.moveNext$0();) {
      color = t3._current;
      b = Q.Beetle$(t1.pond, color);
      t2.$indexSet(t2, color, b);
      b.x = bx;
      t4 = this.y;
      t5 = this.h;
      if (typeof t5 !== "number")
        throw t5.$div();
      if (typeof t4 !== "number")
        throw t4.$add();
      b.y = t4 + t5 / 2;
      b.heading = 0;
      b.perched = true;
      b.locked = true;
      b.shadowed = true;
      bx -= 40;
    }
  },
  static: {
Menu$: function(workspace, x, y, w, h) {
  var t1, t2, t3;
  t1 = P.List_List(null, Q.Block);
  H.setRuntimeTypeInfo(t1, [Q.Block]);
  t2 = W.ImageElement_ImageElement(null, null, null);
  t3 = P.List_List(null, Q.Button);
  H.setRuntimeTypeInfo(t3, [Q.Button]);
  t3 = new Q.Menu(workspace, x, y, w, h, t1, null, null, null, null, t2, t3, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, Q.Beetle));
  t3.Menu$5(workspace, x, y, w, h);
  return t3;
}}

},

Menu_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0.workspace;
    t1.pond.playProgram$1(t1);
  },
  "+call:0:0": 0
},

Menu_closure0: {"": "Closure;this_1",
  call$0: function() {
    var t1 = this.this_1.workspace;
    t1.pond.pauseProgram$1(t1);
  },
  "+call:0:0": 0
},

Menu_closure1: {"": "Closure;this_2",
  call$0: function() {
    var t1 = this.this_2.workspace;
    t1.pond.restartProgram$1(t1);
    t1 = t1.bug;
    t1.reset$0(t1);
  },
  "+call:0:0": 0
},

Menu_closure2: {"": "Closure;this_3",
  call$0: function() {
    var t1 = this.this_3.workspace;
    t1.pond.fastForwardProgram$1(t1);
  },
  "+call:0:0": 0
},

Menu_closure3: {"": "Closure;this_4",
  call$0: function() {
    this.this_4.workspace.removeAllBlocks$0();
  },
  "+call:0:0": 0
},

Menu_draw_closure: {"": "Closure;ctx_0",
  call$1: function(button) {
    return button.draw$1(this.ctx_0);
  },
  "+call:1:0": 0,
  $is_args1: true
},

Button: {"": "Object;x*,y*,w,h,img>,down,over,visible,action,tween,_pulse",
  get$width: function(_) {
    return this.w;
  },
  get$height: function(_) {
    return this.h;
  },
  pulse$0: function() {
    var t1 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.$function = 1;
    this.tween.delay = 5;
    this.tween.duration = 30;
    this.tween.repeat = 2;
    this.tween.onstart = new Q.Button_pulse_closure(this);
    this.tween.onend = new Q.Button_pulse_closure0(this);
    this.tween.ondelta = new Q.Button_pulse_closure1(this);
    this.tween.addControlPoint$2(1, 0);
    this.tween.addControlPoint$2(0.3, 0.5);
    this.tween.addControlPoint$2(1, 1);
  },
  animate$0: function() {
    if (this.tween.isTweening$0()) {
      this.tween.animate$0();
      return true;
    } else
      return false;
  },
  draw$1: function(ctx) {
    var t1, t2, ix, iy;
    if (this.visible) {
      t1 = this.down;
      t2 = t1 && this.over;
      ix = this.x;
      if (t2)
        ix += 2;
      t1 = t1 && this.over;
      iy = this.y;
      if (t1)
        iy += 2;
      t1 = J.getInterceptor$x(ctx);
      t1.set$globalAlpha(ctx, this._pulse);
      t1.drawImage$3(ctx, this.img, ix, iy);
      t1.set$globalAlpha(ctx, 1);
    }
  },
  containsTouch$1: function(c) {
    var t1, t2, t3, t4, t5;
    if (this.visible) {
      t1 = c.touchX;
      t2 = this.x;
      if (t1 >= t2) {
        t3 = c.touchY;
        t4 = this.y;
        if (t3 >= t4) {
          t5 = this.w;
          if (typeof t5 !== "number")
            throw H.iae(t5);
          if (t1 <= t2 + t5) {
            t1 = this.h;
            if (typeof t1 !== "number")
              throw H.iae(t1);
            t1 = t3 <= t4 + t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  touchDown$1: function(c) {
    this.down = true;
    this.over = true;
    return this.visible;
  },
  touchUp$1: function(c) {
    if (this.down && this.over && this.visible && this.action != null)
      H.Primitives_applyFunction(this.action, [], P.Function__toMangledNames(null));
    this.down = false;
    this.over = false;
  },
  touchDrag$1: function(c) {
    if (this.down && this.visible)
      this.over = this.containsTouch$1(c);
  },
  Button$4: function(x, y, src, action) {
    var t1, t2;
    t1 = this.img;
    t2 = J.getInterceptor$x(t1);
    t2.set$src(t1, src);
    t1 = t2.get$onLoad(t1);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Q.Button_closure(this)), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
  },
  static: {
Button$: function(x, y, src, action) {
  var t1, t2;
  t1 = W.ImageElement_ImageElement(null, null, null);
  t2 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
  t2.segments = [];
  t2 = new Q.Button(x, y, null, null, t1, false, false, true, action, t2, 1);
  t2.Button$4(x, y, src, action);
  return t2;
}}

},

Button_closure: {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = t1.img;
    t3 = J.getInterceptor$x(t2);
    t1.w = t3.get$width(t2);
    t1.h = t3.get$height(t2);
  },
  "+call:1:0": 0,
  $is_args1: true
},

Button_pulse_closure: {"": "Closure;this_0",
  call$0: function() {
    this.this_0._pulse = 1;
    return 1;
  },
  "+call:0:0": 0
},

Button_pulse_closure0: {"": "Closure;this_1",
  call$0: function() {
    this.this_1._pulse = 1;
    return 1;
  },
  "+call:0:0": 0
},

Button_pulse_closure1: {"": "Closure;this_2",
  call$1: function(value) {
    var t1, t2;
    t1 = this.this_2;
    t2 = t1._pulse;
    if (typeof value !== "number")
      throw H.iae(value);
    t1._pulse = t2 + value;
  },
  "+call:1:0": 0,
  $is_args1: true
},

Parameter: {"": "Object;centerX,centerY,width>,height>,downX,downY,lastX,lastY,downIndex,values,_ComputerHistory$_index,vspace,color<,textColor,dragging<,changed,block",
  clone$1: function(_, $parent) {
    var p = Q.Parameter$($parent);
    p.centerX = this.centerX;
    p.centerY = this.centerY;
    p.width = this.width;
    p.height = this.height;
    p.values = this.values;
    p._ComputerHistory$_index = C.JSNumber_methods.$mod(P.max(this._ComputerHistory$_index, 0), p.values.length);
    p.color = this.color;
    p.textColor = this.textColor;
    return p;
  },
  $index: function(_, i) {
    var t1, t2;
    t1 = this.values;
    t2 = J.$mod$n(i, t1.length);
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw H.ioore(t1, t2);
    return t1[t2];
  },
  $indexSet: function(_, i, value) {
    var t1 = J.getInterceptor$n(i);
    if (t1.$ge(i, 0) && t1.$lt(i, this.values.length)) {
      t1 = this.values;
      if (i >>> 0 !== i || i >= t1.length)
        throw H.ioore(t1, i);
      t1[i] = value;
    }
  },
  get$value: function(_) {
    var t1, t2;
    t1 = this._ComputerHistory$_index;
    if (t1 >= 0 && t1 < this.values.length) {
      t2 = this.values;
      if (t1 >>> 0 !== t1 || t1 >= t2.length)
        throw H.ioore(t2, t1);
      return t2[t1];
    } else
      return;
  },
  _throttleIndex$1: function(i) {
    i = C.JSNumber_methods.$mod(i, this.values.length);
    if (i - C.JSNumber_methods.toInt$0(Math.floor(i)) < 0.15)
      i = C.JSNumber_methods.toInt$0(Math.floor(i));
    else if (C.JSNumber_methods.toInt$0(Math.ceil(i)) - i < 0.15)
      i = C.JSNumber_methods.toInt$0(Math.ceil(i));
    return i;
  },
  _getDragIndexY$0: function() {
    var t1, t2, t3;
    t1 = this.downIndex;
    t2 = this.lastY;
    t3 = this.downY;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    return this._throttleIndex$1(t1 - (t2 - t3) / this.vspace);
  },
  _drawVerticalArrows$1: function(ctx) {
    var t1, cx, cy, h, t2, dy, y0, y1, x0, x1;
    t1 = this.block;
    cx = this.centerX + t1.x - 18 + this.width / 2;
    cy = this.centerY + t1.y;
    h = this.height;
    t1 = this.lastY;
    t2 = this.downY;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    dy = t1 - t2;
    t2 = h / 2;
    y0 = cy + t2 + dy;
    y1 = cy - t2 + dy;
    x0 = cx - 9.5 + 4;
    x1 = cx + 9.5 - 4;
    t2 = J.getInterceptor$x(ctx);
    t2.set$fillStyle(ctx, "white");
    t2.set$strokeStyle(ctx, "white");
    t2.beginPath$0(ctx);
    t1 = y0 + 2;
    t2.moveTo$2(ctx, x0, t1);
    t2.lineTo$2(ctx, cx, y0 + 15);
    t2.lineTo$2(ctx, x1, t1);
    t2.closePath$0(ctx);
    t1 = y1 - 2;
    t2.moveTo$2(ctx, x0, t1);
    t2.lineTo$2(ctx, cx, y1 - 15);
    t2.lineTo$2(ctx, x1, t1);
    t2.closePath$0(ctx);
    t2.fill$0(ctx);
    t2.beginPath$0(ctx);
    t2.set$lineWidth(ctx, 3);
    t2.moveTo$2(ctx, cx, y1 - 5);
    t2.lineTo$2(ctx, cx, y0 + 5);
    t2.stroke$0(ctx);
  },
  getDisplayWidth$1: function(ctx) {
    var t1, t2;
    t1 = J.getInterceptor$x(ctx);
    t1.save$0(ctx);
    t1.set$font(ctx, "400 10pt sans-serif");
    t2 = t1.measureText$1(ctx, J.toString$0(this.get$value(this))).width;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t1.restore$0(ctx);
    return 14 + t2;
  },
  draw$1: function(ctx) {
    var t1, t2, x, y, w, h, ty, i, t3, t4, t5;
    t1 = J.getInterceptor$x(ctx);
    t1.set$font(ctx, "400 10pt sans-serif");
    t1.set$textAlign(ctx, "center");
    t1.set$textBaseline(ctx, "middle");
    t2 = t1.measureText$1(ctx, J.toString$0(this.get$value(this))).width;
    if (typeof t2 !== "number")
      throw t2.$add();
    this.width = t2 + 14;
    t2 = this.block;
    x = this.centerX + t2.x - 18;
    y = this.centerY + t2.y;
    w = this.width;
    h = this.height;
    if (this.dragging)
      this._drawVerticalArrows$1(ctx);
    t1.beginPath$0(ctx);
    t2 = h / 2;
    Q.roundRect(ctx, x, y - t2, w, h, t2);
    t1.set$fillStyle(ctx, this.color);
    t1.set$strokeStyle(ctx, this.textColor);
    t1.set$lineWidth(ctx, 1);
    t1.fill$0(ctx);
    t1.stroke$0(ctx);
    t1.save$0(ctx);
    t1.clip$0(ctx);
    t1.set$fillStyle(ctx, this.textColor);
    t2 = this.dragging ? this._getDragIndexY$0() : this._ComputerHistory$_index;
    ty = y - t2 * this.vspace;
    for (t2 = x + w / 2, i = -2; t3 = this.values, t4 = t3.length, i < t4 + 1; ++i) {
      t5 = C.JSInt_methods.$mod(i, t4);
      if (t5 < 0 || t5 >= t4)
        throw H.ioore(t3, t5);
      t1.fillText$3(ctx, J.toString$0(t3[t5]), t2, ty + i * this.vspace);
    }
    t1.restore$0(ctx);
  },
  containsTouch$1: function(c) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.centerX;
    t2 = this.block;
    t3 = t2.x;
    t4 = this.width;
    if (t2.get$isInProgram()) {
      t5 = c.touchX;
      if (t5 >= t1 + t3 - 18 + t4 / 2 - this.width / 2) {
        t1 = c.touchY;
        t3 = t2.y;
        if (t1 >= t3) {
          t4 = t2.x;
          t6 = t2.inMenu;
          t7 = t2._width;
          t1 = t5 <= t4 + (t6 ? t7 * 0.66 : t7) && t1 <= t3 + t2._height;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  touchUp$1: function(c) {
    this._ComputerHistory$_index = C.JSNumber_methods.$mod(P.max(C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this.dragging ? this._getDragIndexY$0() : this._ComputerHistory$_index))), 0), this.values.length);
    if (this._ComputerHistory$_index !== this.downIndex)
      this.changed = true;
    this.downIndex = this._ComputerHistory$_index;
    this.dragging = false;
    this.block.workspace.draw$0();
  },
  touchDown$1: function(c) {
    this.downX = c.touchX;
    this.downY = c.touchY;
    this.lastX = c.touchX;
    this.lastY = c.touchY;
    this.downIndex = this._ComputerHistory$_index;
    this.dragging = true;
    this.block.workspace.draw$0();
    return true;
  },
  touchDrag$1: function(c) {
    var t1, oldIndex, newIndex;
    t1 = this.dragging ? this._getDragIndexY$0() : this._ComputerHistory$_index;
    oldIndex = C.JSNumber_methods.$mod(t1, this.values.length);
    this.lastX = c.touchX;
    this.lastY = c.touchY;
    t1 = this.dragging ? this._getDragIndexY$0() : this._ComputerHistory$_index;
    newIndex = C.JSNumber_methods.$mod(t1, this.values.length);
    if (oldIndex !== newIndex && newIndex === C.JSNumber_methods.toInt$0(Math.floor(newIndex))) {
      this._ComputerHistory$_index = C.JSNumber_methods.$mod(P.max(C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this.dragging ? this._getDragIndexY$0() : this._ComputerHistory$_index))), 0), this.values.length);
      this.block.parameterChanged$1(this);
      Q.Sounds_playSound("click");
    }
    this.block.workspace.draw$0();
  },
  touchSlide$1: function(c) {
  },
  Parameter$1: function(block) {
    var t1, t2, t3;
    t1 = this.block;
    t2 = t1.inMenu;
    t3 = t1._width;
    this.centerX = (t2 ? t3 * 0.66 : t3) - 22;
    this.centerY = t1._height / 2;
    this.width = 28;
    this.height = 20;
    this.vspace = this.height * 0.85;
    this.textColor = t1.color;
  },
  static: {
Parameter$: function(block) {
  var t1 = new Q.Parameter(null, null, null, null, null, null, 0, 0, 0, [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, "?"], 0, null, "white", "blue", false, false, block);
  t1.Parameter$1(block);
  return t1;
}}

},

RepeatBlock: {"": "BeginBlock;end,begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  clone$0: function(_) {
    var block = Q.RepeatBlock$(this.workspace);
    this.copyTo$1(block);
    return block;
  },
  _endStep$1: function(program) {
    return this;
  },
  parameterChanged$1: function(param) {
    if (J.$eq(param.get$value(param), "near-water?") || J.$eq(param.get$value(param), "see-bug?"))
      this.text = "repeat\nuntil";
    else
      this.text = "repeat";
  },
  step$1: function(_, program) {
    var t1, p, v;
    t1 = this.param;
    t1 = t1.get$value(t1);
    if (typeof t1 === "number" && Math.floor(t1) === t1) {
      t1 = this.param;
      p = H.intTypeCast(t1.get$value(t1));
      v = "repeat-counter-" + this.id;
      t1 = program.variables;
      if (!t1.containsKey$1(v) || this.param.changed) {
        t1.$indexSet(t1, v, p);
        this.param.changed = false;
      } else
        p = H.intTypeCast(t1.$index(t1, v));
      if (typeof p !== "number")
        throw p.$le();
      if (p <= 0) {
        t1.remove$1(t1, v);
        return this.end.next;
      } else {
        t1.$indexSet(t1, v, p - 1);
        return this.next;
      }
    } else {
      t1 = this.param;
      if (J.$eq(t1.get$value(t1), "forever"))
        return this.next;
      else {
        t1 = this.param;
        if (!J.$eq(t1.get$value(t1), "near-water?")) {
          t1 = this.param;
          t1 = J.$eq(t1.get$value(t1), "see-bug?");
        } else
          t1 = true;
        if (t1) {
          t1 = this.param;
          return program.getSensorValue$1(t1.get$value(t1)) ? this.end.next : this.next;
        } else
          return this.next;
      }
    }
  },
  RepeatBlock$1: function(workspace) {
    var t1, t2, t3;
    this.param = Q.Parameter$(this);
    t1 = this.param;
    t2 = this.inMenu;
    t3 = this._width;
    t1.centerX = (t2 ? t3 * 0.66 : t3) - 7;
    this.param.values = ["forever", 2, 3, 4, 5, "near-water?", "see-bug?"];
    t1 = new Q.EndBlock(null, null, null, workspace, null, 0, 0, 0, 0, null, null, "", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
    t1.Block$2(workspace, "");
    t1.color = "#c92";
    t1.begin = this;
    t1._height = 18;
    this.end = t1;
    this._addClause$1(this.end);
  },
  static: {
RepeatBlock$: function(workspace) {
  var t1 = new Q.RepeatBlock(null, null, null, null, workspace, null, 0, 0, 0, 0, null, null, "repeat", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
  t1.Block$2(workspace, "repeat");
  t1.color = "#c92";
  t1.begin = null;
  t1.begin = t1;
  t1.RepeatBlock$1(workspace);
  return t1;
}}

},

StartBlock: {"": "BeginBlock;_play,_pause,_ComputerHistory$_target,end,begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  getProgramHeight$0: function() {
    var t1 = this.end;
    return t1.y + t1._height - this.y;
  },
  animate$0: function() {
    var refresh = Q.Block.prototype.animate$0.call(this);
    if (this._play.animate$0())
      return true;
    if (this._pause.animate$0())
      return true;
    return refresh;
  },
  pulse$0: function() {
    this._play.pulse$0();
  },
  get$isInProgram: function() {
    return true;
  },
  draw$1: function(ctx) {
    var t1;
    Q.BeginBlock.prototype.draw$1.call(this, ctx);
    this._play.x = this.x + 65;
    this._play.y = this.y + this._height / 2 - 15;
    this._pause.x = this.x + 65;
    this._pause.y = this.y + this._height / 2 - 15;
    t1 = this.workspace;
    this._play.visible = !t1.running;
    this._pause.visible = t1.running;
    this._play.draw$1(ctx);
    this._pause.draw$1(ctx);
  },
  isOutOfBounds$0: function() {
    var t1, t2, t3, t4;
    t1 = this.workspace;
    if (!(this.y < J.$sub$n(t1.height, 180) - this.getProgramHeight$0() - 100)) {
      t2 = this.y;
      t3 = this.getProgramHeight$0();
      t4 = t1.height;
      if (typeof t4 !== "number")
        throw H.iae(t4);
      if (!(t2 + t3 > t4)) {
        t2 = this.x;
        if (!(t2 < 0)) {
          t3 = this.inMenu;
          t4 = this._width;
          t3 = t3 ? t4 * 0.66 : t4;
          t1 = t1.width;
          if (typeof t1 !== "number")
            throw H.iae(t1);
          t1 = t2 + t3 > t1;
        } else
          t1 = true;
      } else
        t1 = true;
    } else
      t1 = true;
    return t1;
  },
  touchDown$1: function(c) {
    var t1;
    this.dragging = false;
    this._ComputerHistory$_target = null;
    if (this._play.containsTouch$1(c)) {
      this._ComputerHistory$_target = this._play;
      t1 = this._play;
      t1.down = true;
      t1.over = true;
      t1.visible;
    } else if (this._pause.containsTouch$1(c)) {
      this._ComputerHistory$_target = this._pause;
      t1 = this._pause;
      t1.down = true;
      t1.over = true;
      t1.visible;
    }
    this._lastX = c.touchX;
    this._lastY = c.touchY;
    this.workspace.draw$0();
    return true;
  },
  touchDrag$1: function(c) {
    var t1, t2, t3, t4;
    t1 = this._ComputerHistory$_target;
    if (t1 == null) {
      t1 = c.touchX;
      t2 = this._lastX;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t3 = c.touchY;
      t4 = this._lastY;
      if (typeof t4 !== "number")
        throw H.iae(t4);
      this.moveChain$2(t1 - t2, t3 - t4);
    } else
      t1.touchDrag$1(c);
    this._lastX = c.touchX;
    this._lastY = c.touchY;
    this.workspace.draw$0();
  },
  touchUp$1: function(c) {
    var t1;
    this.dragging = false;
    t1 = this._ComputerHistory$_target;
    if (t1 != null)
      t1.touchUp$1(c);
    else if (this.isOutOfBounds$0()) {
      t1 = this.workspace;
      this._targetX = J.$div$n(t1.width, 2) - 300;
      this.end._targetY = J.$sub$n(t1.height, 180) + this._height;
    }
    this._ComputerHistory$_target = null;
    this.workspace.draw$0();
  },
  StartBlock$1: function(workspace) {
    var t1 = this.workspace;
    this.x = J.$div$n(t1.width, 2) - 300;
    this.y = J.$sub$n(t1.height, 180);
    this.color = "green";
    this.end = Q.EndProgramBlock$(workspace, this);
    this.end.y = this.y + this._height + 10 + 20;
    this._addClause$1(this.end);
    workspace.addBlock$1(this.end);
    this.inserted = true;
    this._width = 105;
    this._play = Q.Button$(this.x + 65, this.y + this._height / 2 - 15, "images/toolbar/play.png", new Q.StartBlock_closure(workspace));
    this._pause = Q.Button$(this.x + 65, this.y + this._height / 2 - 15, "images/toolbar/pause.png", new Q.StartBlock_closure0(workspace));
    this._pause.visible = false;
  },
  $isStartBlock: true,
  static: {
StartBlock$: function(workspace) {
  var t1 = new Q.StartBlock(null, null, null, null, null, null, null, workspace, null, 0, 0, 0, 0, null, null, "start", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
  t1.Block$2(workspace, "start");
  t1.color = "#c92";
  t1.begin = null;
  t1.begin = t1;
  t1.StartBlock$1(workspace);
  return t1;
}}

},

StartBlock_closure: {"": "Closure;workspace_0",
  call$0: function() {
    var t1 = this.workspace_0;
    t1.pond.playProgram$1(t1);
  },
  "+call:0:0": 0
},

StartBlock_closure0: {"": "Closure;workspace_1",
  call$0: function() {
    var t1 = this.workspace_1;
    t1.pond.pauseProgram$1(t1);
  },
  "+call:0:0": 0
},

EndProgramBlock: {"": "EndBlock;begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  step$1: function(_, program) {
    return $.AUTO_REPEAT ? this.begin : null;
  },
  touchDown$1: function(c) {
    return false;
  },
  EndProgramBlock$2: function(workspace, begin) {
    this._width = 105;
    this.inserted = true;
  },
  $isEndProgramBlock: true,
  static: {
EndProgramBlock$: function(workspace, begin) {
  var t1 = new Q.EndProgramBlock(null, null, null, workspace, null, 0, 0, 0, 0, null, null, "", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
  t1.Block$2(workspace, "");
  t1.color = "#c92";
  t1.begin = begin;
  t1._height = 18;
  t1.EndProgramBlock$2(workspace, begin);
  return t1;
}}

},

StatusInfo: {"": "Object;x*,y*,w,h,fly,gems,captured,workspace,fly_count",
  animate$0: function() {
    var t1 = this.captured;
    if (t1 != null)
      return t1.animate$0();
    else
      return false;
  },
  captureGem$1: function(g) {
    var t1, t2, t3, t4, t5, gem;
    this.captured = Q.Gem$copy(g);
    t1 = this.captured;
    t2 = this.workspace;
    t3 = J.getInterceptor$x(g);
    t4 = t3.get$x(g);
    t5 = t3.get$y(g);
    t1.x = t2.iform.transformX$2(t4, t5);
    t5 = this.captured;
    t4 = t3.get$x(g);
    t3 = t3.get$y(g);
    t5.y = t2.iform.transformY$2(t4, t3);
    for (t1 = this.gems, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      gem = t2._current;
      if (J.$eq(gem.get$color(), this.captured.color)) {
        t1 = J.getInterceptor$x(gem);
        this.captured.flyTo$3(t1.get$x(gem), t1.get$y(gem), new Q.StatusInfo_captureGem_closure(this, gem));
      }
    }
  },
  draw$1: function(ctx) {
    var t1, t2, t3, ix, iy, gem, iw, ih;
    t1 = J.getInterceptor$x(ctx);
    t1.save$0(ctx);
    t1.set$fillStyle(ctx, "#3e5d64");
    t1.set$strokeStyle(ctx, "#223333");
    t1.set$lineWidth(ctx, 3);
    t1.beginPath$0(ctx);
    t1.moveTo$2(ctx, this.x, this.y + this.h);
    t2 = this.x;
    t3 = this.y;
    t1.bezierCurveTo$6(ctx, t2 - 15, t3 - this.h / 2, t2 + 40, t3 + 25, t2 + this.w + 6, t3);
    t1.lineTo$2(ctx, this.x + this.w + 6, this.y + this.h);
    t1.fill$0(ctx);
    t1.stroke$0(ctx);
    ix = this.x + 18;
    t3 = this.y;
    t2 = this.h;
    iy = t3 + t2 - C.JSInt_methods.$tdiv(t2, 3);
    for (t2 = this.gems, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]); t3.moveNext$0();) {
      gem = t3._current;
      t2 = J.getInterceptor$x(gem);
      ix += J.$tdiv$n(t2.get$width(gem), 2);
      t2.set$x(gem, ix);
      t2.set$y(gem, iy);
      gem.draw$1(ctx);
      ix += J.$tdiv$n(t2.get$width(gem), 2) + 10;
    }
    ix = this.x + 40;
    iy = this.y + 20;
    t2 = this.fly;
    t3 = J.getInterceptor$x(t2);
    iw = t3.get$width(t2);
    ih = t3.get$height(t2);
    t1.drawImage$3(ctx, t2, ix, iy);
    t1.set$fillStyle(ctx, "rgba(255, 255, 255, 0.7)");
    t1.set$font(ctx, "300 20px sans-serif");
    t1.set$textAlign(ctx, "left");
    t1.set$textBaseline(ctx, "bottom");
    t2 = "x  " + this.fly_count;
    if (typeof iw !== "number")
      throw H.iae(iw);
    if (typeof ih !== "number")
      throw H.iae(ih);
    t1.fillText$3(ctx, t2, ix + iw + 15, iy + ih);
    t2 = this.captured;
    if (t2 != null)
      t2.draw$1(ctx);
    t1.restore$0(ctx);
  },
  StatusInfo$5: function(workspace, x, y, w, h) {
    var t1, t2, color, t3, t4, gem;
    J.set$src$x(this.fly, "images/dragonfly.png");
    for (t1 = $.get$Gem_colors(), t2 = new H.ListIterator(t1, 4, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = this.gems; t2.moveNext$0();) {
      color = t2._current;
      t3 = W.ImageElement_ImageElement(null, null, null);
      t4 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
      t4.segments = [];
      gem = new Q.Gem(null, null, null, t3, false, 0, 0, 1, 0, 1, false, t4, W.ImageElement_ImageElement(null, null, null), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null), 0, 0);
      $.get$Turtle_rand().toString;
      t3 = Math.random() * 365 >>> 0;
      gem.heading = gem.heading - -t3 / 180 * 3.141592653589793;
      gem._init$1(color);
      gem.size = 0.4;
      gem.shadowed = true;
      t1.push(gem);
    }
  },
  static: {
StatusInfo$: function(workspace, x, y, w, h) {
  var t1, t2;
  t1 = W.ImageElement_ImageElement(null, null, null);
  t2 = P.List_List(null, Q.Gem);
  H.setRuntimeTypeInfo(t2, [Q.Gem]);
  t2 = new Q.StatusInfo(x, y, w, h, t1, t2, null, workspace, 0);
  t2.StatusInfo$5(workspace, x, y, w, h);
  return t2;
}}

},

StatusInfo_captureGem_closure: {"": "Closure;this_0,gem_1",
  call$0: function() {
    this.gem_1.set$shadowed(false);
    var t1 = this.this_0;
    t1.workspace.draw$0();
    t1.captured = null;
  },
  "+call:0:0": 0
},

WaitBlock: {"": "BeginBlock;timeout,end,begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  clone$0: function(_) {
    var block = Q.WaitBlock$(this.workspace);
    this.copyTo$1(block);
    block.text = this.text;
    return block;
  },
  step$1: function(_, program) {
    var t1, v, t, t2;
    t1 = this.timeout;
    if (t1 == null)
      if (program.getSensorValue$1("fly"))
        return this.next;
      else
        return this;
    else {
      t1 = t1.param;
      v = t1.get$value(t1);
      t = typeof v === "number" && Math.floor(v) === v ? v * 20 : $.get$Turtle_rand().nextInt$1(6000);
      t1 = program.variables;
      if (!t1.containsKey$1("timeout"))
        t1.$indexSet(t1, "timeout", t);
      t2 = this.param;
      if (program.getSensorValue$1(t2.get$value(t2))) {
        t1.remove$1(t1, "timeout");
        return this.next;
      } else if (J.$le$n(t1.$index(t1, "timeout"), 0)) {
        t1.remove$1(t1, "timeout");
        t1.$indexSet(t1, "do-timeout" + this.timeout.id, true);
        return this.timeout;
      } else {
        t1.$indexSet(t1, "timeout", J.$sub$n(t1.$index(t1, "timeout"), 1));
        return this;
      }
    }
  },
  WaitBlock$1: function(workspace) {
    var t1;
    if ($.SHOW_WAIT_TIMEOUT) {
      this.timeout = Q.TimeoutBlock$(workspace, this);
      this._addClause$1(this.timeout);
    }
    t1 = new Q.EndBlock(null, null, null, workspace, null, 0, 0, 0, 0, null, null, "", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
    t1.Block$2(workspace, "");
    t1.color = "#c92";
    t1.begin = this;
    t1._height = 18;
    this.end = t1;
    this._addClause$1(this.end);
  },
  static: {
WaitBlock$: function(workspace) {
  var t1 = new Q.WaitBlock(null, null, null, null, null, workspace, null, 0, 0, 0, 0, null, null, "wait for\nfly", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
  t1.Block$2(workspace, "wait for\nfly");
  t1.color = "#c92";
  t1.begin = null;
  t1.begin = t1;
  t1.WaitBlock$1(workspace);
  return t1;
}}

},

TimeoutBlock: {"": "ControlBlock;begin,cnext,cprev,workspace,id,x,y,_width,_height,_targetX,_targetY,text,color,textColor,dragging,candidate,next,prev,param,_lastX,_lastY,inMenu,inserted",
  step$1: function(_, program) {
    var v, t1;
    v = "do-timeout" + this.id;
    t1 = program.variables;
    if (t1.containsKey$1(v)) {
      t1.remove$1(t1, v);
      return this.next;
    } else
      return this.begin.end;
  },
  TimeoutBlock$2: function(workspace, begin) {
    var t1, t2, t3;
    this.param = Q.Parameter$(this);
    this.param.values = [10, 50, 100, 150, 200, "random"];
    t1 = this.param;
    t2 = this.inMenu;
    t3 = this._width;
    t1.centerX = (t2 ? t3 * 0.66 : t3) - 12;
    t1 = this.param;
    t1.toString;
    t1._ComputerHistory$_index = C.JSNumber_methods.$mod(P.max(5, 0), t1.values.length);
  },
  static: {
TimeoutBlock$: function(workspace, begin) {
  var t1 = new Q.TimeoutBlock(null, null, null, workspace, null, 0, 0, 0, 0, null, null, "timeout", "#3399aa", "white", false, null, null, null, null, null, null, false, false);
  t1.Block$2(workspace, "timeout");
  t1.color = "#c92";
  t1.begin = begin;
  t1.TimeoutBlock$2(workspace, begin);
  return t1;
}}

},

CodeWorkspace: {"": "TouchLayer;pond,width>,height>,blocks,menu,status,start>,name>,color<,bug<,running,ctx,touchables,touch_bindings,xform,iform",
  removeAllBlocks$0: function() {
    var block, t1, t2, t3, b;
    this.pond.stopProgram$1(this);
    block = this.start.next;
    t1 = this.blocks;
    t2 = this.touchables;
    while (true) {
      if (block != null) {
        t3 = this.start.end;
        t3 = block == null ? t3 != null : block !== t3;
      } else
        t3 = false;
      if (!t3)
        break;
      b = block.next;
      block.prev = null;
      block.next = null;
      C.JSArray_methods.remove$1(t1, block);
      C.JSArray_methods.remove$1(t2, block);
      t3 = block.param;
      if (t3 != null)
        C.JSArray_methods.remove$1(t2, t3);
      block = b;
    }
    t1 = this.start;
    t1.next = t1.end;
    t1 = this.start;
    t1.end.prev = t1;
  },
  preview$1: function(block) {
    var t1, pvalue;
    if ($.SHOW_PREVIEW) {
      t1 = block.param;
      pvalue = t1 != null ? t1.get$value(t1) : null;
      t1 = this.pond;
      t1.pauseProgram$1(this);
      t1.previewBlock$3(this.name, block.text, pvalue);
    }
  },
  addBlock$1: function(block) {
    var t1, t2;
    this.blocks.push(block);
    t1 = this.touchables;
    t1.push(block);
    t2 = block.param;
    if (t2 != null)
      t1.push(t2);
  },
  removeBlock$1: function(block) {
    var t1, t2;
    C.JSArray_methods.remove$1(this.blocks, block);
    t1 = this.touchables;
    C.JSArray_methods.remove$1(t1, block);
    t2 = block.param;
    if (t2 != null)
      C.JSArray_methods.remove$1(t1, t2);
  },
  isOffscreen$1: function(block) {
    var t1, t2, t3;
    t1 = block.x;
    t2 = block.inMenu;
    t3 = block._width;
    t2 = t2 ? t3 * 0.66 : t3;
    t3 = this.width;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    if (!(t1 + t2 > t3))
      if (!(t1 < 0)) {
        t1 = block.y;
        t2 = block._height;
        t3 = this.height;
        if (typeof t3 !== "number")
          throw H.iae(t3);
        t1 = t1 + t2 > t3 || t1 < 0;
      } else
        t1 = true;
    else
      t1 = true;
    return t1;
  },
  snapTogether$1: function(target) {
    var b = this.findInsertionPoint$1(target);
    if (b != null) {
      b.insertBlock$1(target);
      this.start._play.pulse$0();
      this.menu.play.pulse$0();
      return true;
    } else
      return false;
  },
  snapToEnd$1: function(target) {
    this.start.end.prev.insertBlock$1(target);
    this.start._play.pulse$0();
    this.menu.play.pulse$0();
  },
  findInsertionPoint$1: function(target) {
    var block, result;
    block = this.start;
    for (result = null; block != null;) {
      if (block.overlaps$1(target) && target.checkSyntax$1(block))
        result = block;
      block = block.next;
    }
    if (result == null && !target.get$inserted())
      return this.start.end.prev;
    else if (J.$gt$n(J.get$y$x(target), this.start.end.y))
      return;
    else
      return result;
  },
  animate$0: function() {
    var r, refresh, t1, t2, target, b;
    r = this.pond.isProgramRunning$1(this.name);
    refresh = r !== this.running && true;
    this.running = r;
    if (this.menu.animate$0())
      refresh = true;
    for (t1 = this.blocks, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
      J.set$candidate$x(t2._current, null);
    for (t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      target = t2._current;
      if (target.get$dragging()) {
        b = this.findInsertionPoint$1(target);
        if (b != null)
          b.candidate = target;
      }
    }
    for (t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();)
      if (t2._current.animate$0() === true)
        refresh = true;
    t1 = this.status;
    return t1 != null && t1.animate$0() ? true : refresh;
  },
  traceExecution$2: function(ctx, frog) {
    var t1, t2, t3, t4, tx, ty;
    t1 = J.getInterceptor$x(frog);
    if (t1.get$label(frog) != null) {
      t2 = J.getInterceptor$x(ctx);
      t2.save$0(ctx);
      this.xform.transformContext$1(ctx);
      t3 = t1.get$x(frog);
      t4 = t1.get$y(frog);
      tx = this.iform.transformX$2(t3, t4);
      t4 = t1.get$x(frog);
      t3 = t1.get$y(frog);
      ty = this.iform.transformY$2(t4, t3);
      t2.set$textBaseline(ctx, "top");
      t2.set$textAlign(ctx, "center");
      t2.set$fillStyle(ctx, "white");
      t2.set$font(ctx, "200 16px sans-serif");
      t2.fillText$3(ctx, t1.get$label(frog), tx, ty + 52);
      t2.restore$0(ctx);
    }
    this.bug.target = frog.get$program().curr;
  },
  drawBug$1: function(ctx) {
    var t1 = J.getInterceptor$x(ctx);
    t1.save$0(ctx);
    this.xform.transformContext$1(ctx);
    this.bug.draw$1(ctx);
    t1.restore$0(ctx);
  },
  captureGem$1: function(g) {
    var t1 = this.status;
    if (t1 != null)
      t1.captureGem$1(g);
  },
  captureFly$1: function(fly) {
    var t1;
    this.menu.captureFly$1(fly);
    t1 = this.status;
    if (t1 != null) {
      t1.fly_count = t1.fly_count + 1;
      this.draw$0();
    }
  },
  draw$0: function() {
    var t1, t2, t3;
    J.save$0$x(this.ctx);
    this.xform.transformContext$1(this.ctx);
    J.clearRect$4$x(this.ctx, 0, 0, this.width, this.height);
    this.menu.draw$1(this.ctx);
    t1 = this.status;
    if (t1 != null)
      t1.draw$1(this.ctx);
    for (t1 = this.blocks, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t1 = t2.moveNext$0(), t3 = this.ctx, t1;)
      t2._current.draw$1(t3);
    J.restore$0$x(t3);
  },
  _initMenu$0: function() {
    var t1, t2, block;
    t1 = this.menu;
    t2 = Q.Block$(this, "hop");
    t1.blocks.push(t2);
    t2 = this.menu;
    t1 = Q.Block$(this, "chirp");
    t2.blocks.push(t1);
    t1 = this.menu;
    t2 = Q.Block$(this, "eat");
    t1.blocks.push(t2);
    if ($.SHOW_TURN_BLOCK) {
      block = Q.Block$(this, "turn");
      block.param = Q.Parameter$(block);
      block.param.values = [-90, -75, -60, -45, -30, -15, "random", 15, 30, 45, 60, 75, 90];
      t1 = block.param;
      t1.toString;
      t1._ComputerHistory$_index = C.JSNumber_methods.$mod(P.max(6, 0), t1.values.length);
      this.menu.blocks.push(block);
    } else {
      t1 = this.menu;
      t2 = Q.Block$(this, "left");
      t1.blocks.push(t2);
      t2 = this.menu;
      t1 = Q.Block$(this, "right");
      t2.blocks.push(t1);
    }
    t1 = this.menu;
    t2 = Q.Block$(this, "spin");
    t1.blocks.push(t2);
    block = Q.Block$(this, "hatch");
    block.color = "#b67196";
    this.menu.blocks.push(block);
    if ($.SHOW_DIE_BLOCK) {
      block = Q.Block$(this, "die");
      block.color = "#b67196";
      this.menu.blocks.push(block);
    }
    t1 = this.menu;
    t2 = Q.IfBlock$(this);
    t1.blocks.push(t2);
    t2 = this.menu;
    t1 = Q.RepeatBlock$(this);
    t2.blocks.push(t1);
    if ($.SHOW_WAIT_BLOCK) {
      t1 = this.menu;
      t2 = Q.WaitBlock$(this);
      t1.blocks.push(t2);
    }
  },
  CodeWorkspace$5: function(pond, width, height, $name, color) {
    this.ctx = J.getContext$1$x(document.querySelector("#" + this.name), "2d");
    this.menu = Q.Menu$(this, 0, J.$sub$n(this.height, 74), this.width, 74);
    this._initMenu$0();
    this.touchables.push(this.menu);
    if ($.SHOW_STATUS)
      this.status = Q.StatusInfo$(this, J.$sub$n(this.width, 150), J.$sub$n(this.height, 100), 150, 100);
    this.start = Q.StartBlock$(this);
    this.addBlock$1(this.start);
    this.bug = Q.TraceBug$(this.start);
    this.draw$0();
  },
  static: {
CodeWorkspace$: function(pond, width, height, $name, color) {
  var t1, t2;
  t1 = P.List_List(null, Q.Block);
  H.setRuntimeTypeInfo(t1, [Q.Block]);
  t2 = P.List_List(null, Q.Touchable);
  H.setRuntimeTypeInfo(t2, [Q.Touchable]);
  t2 = new Q.CodeWorkspace(pond, width, height, t1, null, null, null, $name, color, null, false, null, t2, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, Q.Touchable), new Q.Matrix2D([1, 0, 0, 0, 1, 0, 0, 0, 1]), new Q.Matrix2D([1, 0, 0, 0, 1, 0, 0, 0, 1]));
  t2.CodeWorkspace$5(pond, width, height, $name, color);
  return t2;
}}

},

Fly: {"": "Turtle;_turn@,perch,pond,x,y,size,heading,opacity,dead,tween,img,variables,_width,_height",
  hatch$0: function() {
    var clone = Q.Fly$(this.pond);
    clone.copy$1(this);
    return clone;
  },
  forward$1: function(distance) {
    var t1;
    Q.Turtle.prototype.forward$1.call(this, distance);
    if (J.$lt$n(this.x, -30))
      this.x = J.$add$ns(this.x, this.pond.width);
    if (J.$lt$n(this.y, -30))
      this.y = J.$add$ns(this.y, this.pond.height);
    t1 = this.pond;
    if (J.$gt$n(this.x, J.$add$ns(t1.width, 30)))
      this.x = J.$sub$n(this.x, t1.width);
    if (J.$gt$n(this.y, J.$add$ns(t1.height, 30)))
      this.y = J.$sub$n(this.y, t1.height);
  },
  animate$0: function() {
    var t1 = this.perch;
    if (t1 <= 0) {
      this.forward$1(4);
      t1 = this.get$_turn();
      this.heading = this.heading - t1 / 180 * 3.141592653589793;
      if ($.get$Turtle_rand().nextInt$1(100) > 98) {
        $.get$Turtle_rand().toString;
        this.set$_turn(Math.random() * 6 - 3);
      } else if ($.get$Turtle_rand().nextInt$1(1000) > 998 && !this.pond.inWater$2(this.x, this.y))
        this.perch = $.get$Turtle_rand().nextInt$1(100);
    } else
      this.perch = t1 - 1;
    return true;
  },
  _drawLocal$1: function(ctx) {
    var t1, t2, iw, ih;
    if (this.dead)
      return;
    t1 = this.img;
    t2 = J.getInterceptor$x(t1);
    iw = J.$mul$n(t2.get$width(t1), 0.7);
    ih = J.$mul$n(t2.get$height(t1), 0.7);
    J.drawImageScaled$5$x(ctx, t1, -iw / 2, -ih / 2, iw, ih);
  },
  Fly$1: function(pond) {
    var t1;
    J.set$src$x(this.img, "images/dragonfly.png");
    t1 = this.pond;
    this.x = $.get$Turtle_rand().nextInt$1(t1.width);
    this.y = $.get$Turtle_rand().nextInt$1(t1.height);
  },
  static: {
Fly$: function(pond) {
  var t1, t2;
  t1 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
  t1.segments = [];
  t1 = new Q.Fly(3, 0, pond, 0, 0, 1, 0, 1, false, t1, W.ImageElement_ImageElement(null, null, null), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null), 0, 0);
  t2 = $.get$Turtle_rand().nextInt$1(365);
  t1.heading = t1.heading - -t2 / 180 * 3.141592653589793;
  t1.Fly$1(pond);
  return t1;
}}

},

Frog: {"": "Turtle;pond,_sound,_tongue,_vision,label>,ghost<,program<,prey,help,help_alpha,_lastX,_lastY,_refresh,down,x,y,size,heading,opacity,dead,tween,img,variables,_width,_height",
  hatch$0: function() {
    var t1, t2, clone;
    t1 = W.ImageElement_ImageElement(null, null, null);
    t2 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t2.segments = [];
    clone = new Q.Frog(this.pond, -1, 0, -1, null, null, null, null, t1, 0, 0, 0, false, false, 0, 0, 1, 0, 1, false, t2, W.ImageElement_ImageElement(null, null, null), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null), 0, 0);
    t2 = $.get$Turtle_rand().nextInt$1(365);
    clone.heading = clone.heading - -t2 / 180 * 3.141592653589793;
    J.set$src$x(clone.img, "images/bluefrog.png");
    J.set$src$x(clone.help, "images/help/help1.png");
    clone.copy$1(this);
    clone.program = Q.Program$copy(this.program, clone);
    return clone;
  },
  get$tongueX: function() {
    var t1, t2;
    t1 = this.x;
    t2 = this.heading;
    return J.$add$ns(t1, Math.sin(t2) * this._tongue * J.$mul$n(J.get$height$x(this.img), this.size) * 1.8);
  },
  get$tongueY: function() {
    var t1, t2;
    t1 = this.y;
    t2 = this.heading;
    return J.$sub$n(t1, Math.cos(t2) * this._tongue * J.$mul$n(J.get$height$x(this.img), this.size) * 1.8);
  },
  get$radius: function() {
    return Q.Turtle.prototype.get$radius.call(this) * 0.75;
  },
  reset$0: function(_) {
    this.opacity = 1;
    this.ghost = null;
    this._sound = -1;
    this._vision = -1;
    this._tongue = 0;
    this.label = null;
  },
  animate$0: function() {
    var refresh, t1;
    refresh = this._refresh;
    this._refresh = false;
    if (this.tween.isTweening$0()) {
      this.tween.animate$0();
      refresh = true;
    }
    if (this.program.animate$0())
      refresh = true;
    t1 = this.down;
    if (t1 && this.help_alpha < 1) {
      this.help_alpha = P.min(1, this.help_alpha + 0.1);
      refresh = true;
    } else if (!t1 && this.help_alpha > 0) {
      this.help_alpha = P.max(0, this.help_alpha - 0.1);
      refresh = true;
    }
    return refresh;
  },
  push$1: function(distance) {
    var t1, t2, t3, frog, angle, dx, dy, t4;
    for (t1 = this.pond, t2 = t1.getFrogsHere$1(this), t3 = t2._computeElements$0(), t3 = new P.HashSetIterator(t2, t3, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_HashSet", 0)]), t2 = J.getInterceptor$n(distance); t3.moveNext$0();) {
      frog = t3._collection$_current;
      angle = this.angleBetween$1(frog);
      if (Math.abs(angle) < 90) {
        angle = angle / -180 * 3.141592653589793 + this.heading;
        dx = t2.$mul(distance, Math.sin(angle));
        dy = t2.$mul(distance, Math.cos(angle));
        t4 = J.getInterceptor$x(frog);
        t4.set$x(frog, J.$add$ns(t4.get$x(frog), dx));
        t4.set$y(frog, J.$sub$n(t4.get$y(frog), dy));
        if (t1.inWater$2(t4.get$x(frog), t4.get$y(frog))) {
          t4 = $.get$Sounds_sounds();
          if (t4.$index(t4, "splash") != null) {
            t4 = $.get$Sounds_sounds();
            J.set$volume$x(t4.$index(t4, "splash"), 0.6);
            t4 = $.get$Sounds_sounds();
            J.play$0$x(t4.$index(t4, "splash"));
          }
          frog.die$0();
        }
      }
    }
  },
  pathBlocked$0: function() {
    this.forward$1(Q.Turtle.prototype.get$radius.call(this) * 0.75 * 4);
    var t1 = this.pond.getFrogsHere$1(this)._collection$_length;
    this.forward$1(-(Q.Turtle.prototype.get$radius.call(this) * 0.75 * 4));
    return t1 !== 0;
  },
  nearWater$0: function() {
    this.forward$1(Q.Turtle.prototype.get$radius.call(this) * 0.75 * 4);
    var wet = this.pond.inWater$2(this.x, this.y) && true;
    this.forward$1(-(Q.Turtle.prototype.get$radius.call(this) * 0.75 * 4));
    return wet;
  },
  seeBug$0: function() {
    this.forward$1(Q.Turtle.prototype.get$radius.call(this) * 0.75 * 4);
    var bug = this.pond.getTurtleHere$2(this, C.Type_YyT);
    this.forward$1(-(Q.Turtle.prototype.get$radius.call(this) * 0.75 * 4));
    return bug != null;
  },
  captureGem$0: function() {
    var t1, gem;
    t1 = this.pond;
    gem = t1.getGemHere$1(this);
    if (gem != null)
      t1.captureGem$2(this, gem);
  },
  nearFly$0: function() {
    var t1, t2, t3, fly, t4, t5, t6, t7, t8, t9, d;
    for (t1 = this.pond.flies, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = this.img, t3 = J.getInterceptor$x(t1); t2.moveNext$0();) {
      fly = t2._current;
      if (Math.abs(this.angleBetween$1(fly)) < 10) {
        t4 = J.getInterceptor$x(fly);
        t5 = t4.get$x(fly);
        t4 = t4.get$y(fly);
        t6 = this.x;
        t7 = this.y;
        t8 = J.getInterceptor$n(t6);
        t9 = t8.$sub(t6, t5);
        t5 = t8.$sub(t6, t5);
        t6 = J.getInterceptor$n(t7);
        t8 = t6.$sub(t7, t4);
        t4 = t6.$sub(t7, t4);
        d = Math.sqrt(t9 * t5 + t8 * t4);
        if (d > J.$mul$n(t3.get$height(t1), this.size) / 4 && d < J.$mul$n(t3.get$height(t1), this.size) * 1.5)
          return true;
      }
    }
    return false;
  },
  isBlocked$0: function() {
    this.forward$1(Q.Turtle.prototype.get$radius.call(this) * 0.75 * 4);
    var t1 = this.pond.getTurtleHere$2(this, C.Type_SDA);
    this.forward$1(-(Q.Turtle.prototype.get$radius.call(this) * 0.75 * 4));
    return t1 != null;
  },
  eatFly$0: function() {
    var t1, fly;
    t1 = this.prey;
    if (t1 == null) {
      fly = this.pond.getFlyHere$2(this.get$tongueX(), this.get$tongueY());
      if (fly != null && !fly.get$dead()) {
        this.prey = fly.hatch$0();
        fly.die$0();
      }
    } else {
      t1.x = this.get$tongueX();
      this.prey.y = this.get$tongueY();
    }
  },
  draw$1: function(ctx) {
    var t1 = this.prey;
    if (t1 != null)
      t1.draw$1(ctx);
    Q.Turtle.prototype.draw$1.call(this, ctx);
    t1 = this.ghost;
    if (t1 != null)
      t1.draw$1(ctx);
  },
  _drawLocal$1: function(ctx) {
    var t1, t2, theta, iw, ih;
    t1 = this._sound;
    if (t1 > 0) {
      t2 = J.getInterceptor$x(ctx);
      t2.set$strokeStyle(ctx, "rgba(255, 255, 255, " + H.S(1 - t1 / 175) + ")");
      t2.set$lineWidth(ctx, 4);
      t2.beginPath$0(ctx);
      t2.arc$6(ctx, 0, 0, this._sound, 0, 6.283185307179586, true);
      t2.stroke$0(ctx);
    }
    t1 = this._vision;
    if (t1 > 0) {
      theta = t1 / 180 * 3.141592653589793;
      t1 = J.$mul$n(J.get$height$x(this.img), this.size);
      t2 = J.getInterceptor$x(ctx);
      t2.beginPath$0(ctx);
      t2.moveTo$2(ctx, 0, 0);
      t2.arc$6(ctx, 0, 0, t1 * 1.5, -1.5707963267948966 - theta, -1.5707963267948966 + theta, false);
      t2.closePath$0(ctx);
      t2.set$fillStyle(ctx, "rgba(255, 255, 255, 0.1)");
      t2.fill$0(ctx);
    }
    if (this._tongue > 0) {
      t1 = J.getInterceptor$x(ctx);
      t1.set$strokeStyle(ctx, "#922");
      t1.set$lineWidth(ctx, 5);
      t1.beginPath$0(ctx);
      t1.moveTo$2(ctx, 0, 0);
      t1.lineTo$2(ctx, 0, this._tongue * J.$mul$n(J.get$height$x(this.img), this.size) * -1.6);
      t1.stroke$0(ctx);
    }
    t1 = this.img;
    t2 = J.getInterceptor$x(t1);
    iw = J.$mul$n(t2.get$width(t1), this.size);
    ih = J.$mul$n(t2.get$height(t1), this.size);
    t2 = J.getInterceptor$x(ctx);
    t2.drawImageScaled$5(ctx, t1, -iw / 2, -ih / 2, iw, ih);
    if (this.help_alpha > 0) {
      t1 = this.variables;
      t1 = J.$eq(t1.$index(t1, "moved"), false);
    } else
      t1 = false;
    if (t1) {
      t2.set$globalAlpha(ctx, this.help_alpha);
      t2.drawImage$3(ctx, this.help, -650, -480);
      t2.set$globalAlpha(ctx, 1);
    }
  },
  containsTouch$1: function(c) {
    return this.overlapsPoint$2(c.touchX, c.touchY);
  },
  touchDown$1: function(c) {
    this._lastX = c.touchX;
    this._lastY = c.touchY;
    this.down = true;
    return true;
  },
  touchUp$1: function(c) {
    this.down = false;
  },
  touchDrag$1: function(c) {
  },
  touchSlide$1: function(c) {
  }
},

Gem: {"": "Turtle;color<,deltaX,deltaY,shadow,shadowed@,x,y,size,heading,opacity,dead,tween,img,variables,_width,_height",
  _init$1: function(color) {
    this.color = color;
    this.heading = 0;
    J.set$src$x(this.img, "images/gems/" + H.S(color) + ".png");
    J.set$src$x(this.shadow, "images/gems/" + H.S(color) + "_shadow.png");
    this.spin$0();
  },
  animate$0: function() {
    if (this.tween.isTweening$0()) {
      this.tween.animate$0();
      return true;
    } else
      return false;
  },
  spin$0: function() {
    var t1 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.$function = 1;
    this.tween.delay = 0;
    this.tween.duration = 25;
    this.tween.onstart = new Q.Gem_spin_closure();
    this.tween.onend = new Q.Gem_spin_closure0(this);
    this.tween.addControlPoint$2(0, 0);
    this.tween.addControlPoint$2(1, 1);
    this.tween.ondelta = new Q.Gem_spin_closure1(this);
  },
  get$spin: function() {
    return new Q.BoundClosure$0(this, Q.Gem.prototype.spin$0, null, "spin$0");
  },
  flyTo$3: function(tx, ty, onDone) {
    var t1, t2;
    t1 = J.toDouble$0$n(tx);
    t2 = this.x;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    this.deltaX = t1 - t2;
    t2 = J.toDouble$0$n(ty);
    t1 = this.y;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    this.deltaY = t2 - t1;
    t1 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.$function = 1;
    this.tween.delay = 0;
    this.tween.duration = 25;
    this.tween.onstart = new Q.Gem_flyTo_closure();
    this.tween.onend = new Q.Gem_flyTo_closure0(this, onDone);
    this.tween.addControlPoint$2(0, 0);
    this.tween.addControlPoint$2(1, 1);
    this.tween.ondelta = new Q.Gem_flyTo_closure1(this);
  },
  _drawLocal$1: function(ctx) {
    var t1, t2, t3, t4;
    t1 = this.shadowed;
    t2 = J.getInterceptor$x(ctx);
    t3 = this.img;
    t4 = this.size;
    if (t1) {
      t1 = J.getInterceptor$x(t3);
      t2.drawImageScaled$5(ctx, this.shadow, -J.$mul$n(t1.get$width(t3), t4) / 2, -J.$mul$n(t1.get$height(t3), this.size) / 2, J.$mul$n(t1.get$width(t3), this.size), J.$mul$n(t1.get$height(t3), this.size));
    } else {
      t1 = J.getInterceptor$x(t3);
      t2.drawImageScaled$5(ctx, t3, -J.$mul$n(t1.get$width(t3), t4) / 2, -J.$mul$n(t1.get$height(t3), this.size) / 2, J.$mul$n(t1.get$width(t3), this.size), J.$mul$n(t1.get$height(t3), this.size));
    }
  },
  Gem$copy$1: function(other) {
    this.copy$1(other);
    this._init$1(other.get$color());
    this.shadowed = other.get$shadowed();
  },
  static: {
"": "Gem_colors",
Gem$copy: function(other) {
  var t1, t2;
  t1 = W.ImageElement_ImageElement(null, null, null);
  t2 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
  t2.segments = [];
  t2 = new Q.Gem(null, null, null, t1, false, 0, 0, 1, 0, 1, false, t2, W.ImageElement_ImageElement(null, null, null), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null), 0, 0);
  t1 = $.get$Turtle_rand().nextInt$1(365);
  t2.heading = t2.heading - -t1 / 180 * 3.141592653589793;
  t2.Gem$copy$1(other);
  return t2;
}}

},

Gem_spin_closure: {"": "Closure;",
  call$0: function() {
  },
  "+call:0:0": 0
},

Gem_spin_closure0: {"": "Closure;this_0",
  call$0: function() {
    P.Timer_Timer(P.Duration$(0, 0, 0, 5000 + $.get$Turtle_rand().nextInt$1(5000), 0, 0), this.this_0.get$spin());
  },
  "+call:0:0": 0
},

Gem_spin_closure1: {"": "Closure;this_1",
  call$1: function(value) {
    var t1 = this.this_1;
    if (typeof value !== "number")
      throw H.iae(value);
    t1.heading = t1.heading - 720 * value / 180 * 3.141592653589793;
  },
  "+call:1:0": 0,
  $is_args1: true
},

Gem_flyTo_closure: {"": "Closure;",
  call$0: function() {
    Q.Sounds_playSound("chimes");
  },
  "+call:0:0": 0
},

Gem_flyTo_closure0: {"": "Closure;this_0,onDone_1",
  call$0: function() {
    this.this_0.dead = true;
    this.onDone_1.call$0();
  },
  "+call:0:0": 0
},

Gem_flyTo_closure1: {"": "Closure;this_2",
  call$1: function(value) {
    var t1, t2;
    t1 = this.this_2;
    t2 = J.getInterceptor$n(value);
    t1.x = J.$add$ns(t1.x, t2.$mul(value, t1.deltaX));
    t1.y = J.$add$ns(t1.y, t2.$mul(value, t1.deltaY));
    if (typeof value !== "number")
      throw H.iae(value);
    t1.heading = t1.heading - 1440 * value / 180 * 3.141592653589793;
    t2 = t1.size;
    if (typeof t2 !== "number")
      throw t2.$sub();
    t1.size = t2 - value * 0.25;
  },
  "+call:1:0": 0,
  $is_args1: true
},

LilyPad: {"": "Turtle;pond,_lastX,_lastY,refresh*,x,y,size,heading,opacity,dead,tween,img,variables,_width,_height",
  animate$0: function() {
    return this.refresh;
  },
  _drawLocal$1: function(ctx) {
    var t1, t2, iw, ih;
    t1 = this.img;
    t2 = J.getInterceptor$x(t1);
    iw = J.$mul$n(t2.get$width(t1), this.size);
    ih = J.$mul$n(t2.get$height(t1), this.size);
    J.drawImageScaled$5$x(ctx, t1, -iw / 2, -ih / 2, iw, ih);
  },
  move$2: function(dx, dy) {
    var frogs;
    this.x = J.$add$ns(this.x, dx);
    this.y = J.$add$ns(this.y, dy);
    frogs = this.pond.getFrogsHere$1(this);
    frogs.forEach$1(frogs, new Q.LilyPad_move_closure(dx, dy));
  },
  containsTouch$1: function(c) {
    return Q.distance(c.touchX, c.touchY, this.x, this.y) < this.get$radius();
  },
  touchDown$1: function(c) {
    this._lastX = c.touchX;
    this._lastY = c.touchY;
    return $.DRAG_LILYPADS;
  },
  touchUp$1: function(c) {
  },
  touchDrag$1: function(c) {
    var t1, t2, t3, t4;
    t1 = c.touchX;
    t2 = this._lastX;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t3 = c.touchY;
    t4 = this._lastY;
    if (typeof t4 !== "number")
      throw H.iae(t4);
    this.move$2(t1 - t2, t3 - t4);
    this._lastX = c.touchX;
    this._lastY = c.touchY;
    this.refresh = true;
  },
  touchSlide$1: function(c) {
  }
},

LilyPad_move_closure: {"": "Closure;dx_0,dy_1",
  call$1: function(frog) {
    return frog.move$2(this.dx_0, this.dy_1);
  },
  "+call:1:0": 0,
  $is_args1: true
},

Matrix2D: {"": "Object;xform",
  invert$0: function() {
    var i, m, det, invDet, t1, t2, t3, t4;
    i = new Q.Matrix2D([1, 0, 0, 0, 1, 0, 0, 0, 1]);
    m = this.xform;
    det = this.get$determinant();
    if (det === 0)
      return i;
    invDet = 1 / det;
    t1 = i.xform;
    t2 = m.length;
    if (4 >= t2)
      throw H.ioore(m, 4);
    t3 = m[4];
    if (8 >= t2)
      throw H.ioore(m, 8);
    t3 = J.$mul$n(t3, m[8]);
    if (7 >= m.length)
      throw H.ioore(m, 7);
    t2 = J.$mul$n(m[7], m[5]);
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1[0] = invDet * (t3 - t2);
    if (6 >= m.length)
      throw H.ioore(m, 6);
    t2 = J.$mul$n(m[6], m[5]);
    t3 = m.length;
    if (3 >= t3)
      throw H.ioore(m, 3);
    t4 = m[3];
    if (8 >= t3)
      throw H.ioore(m, 8);
    t4 = J.$mul$n(t4, m[8]);
    if (3 >= t1.length)
      throw H.ioore(t1, 3);
    t1[3] = invDet * (t2 - t4);
    t4 = m.length;
    if (3 >= t4)
      throw H.ioore(m, 3);
    t2 = m[3];
    if (7 >= t4)
      throw H.ioore(m, 7);
    t2 = J.$mul$n(t2, m[7]);
    if (6 >= m.length)
      throw H.ioore(m, 6);
    t4 = J.$mul$n(m[6], m[4]);
    if (6 >= t1.length)
      throw H.ioore(t1, 6);
    t1[6] = invDet * (t2 - t4);
    if (7 >= m.length)
      throw H.ioore(m, 7);
    t4 = J.$mul$n(m[7], m[2]);
    t2 = m.length;
    if (1 >= t2)
      throw H.ioore(m, 1);
    t3 = m[1];
    if (8 >= t2)
      throw H.ioore(m, 8);
    t3 = J.$mul$n(t3, m[8]);
    if (1 >= t1.length)
      throw H.ioore(t1, 1);
    t1[1] = invDet * (t4 - t3);
    t3 = m.length;
    if (0 >= t3)
      throw H.ioore(m, 0);
    t4 = m[0];
    if (8 >= t3)
      throw H.ioore(m, 8);
    t4 = J.$mul$n(t4, m[8]);
    if (6 >= m.length)
      throw H.ioore(m, 6);
    t3 = J.$mul$n(m[6], m[2]);
    if (4 >= t1.length)
      throw H.ioore(t1, 4);
    t1[4] = invDet * (t4 - t3);
    if (6 >= m.length)
      throw H.ioore(m, 6);
    t3 = J.$mul$n(m[6], m[1]);
    t4 = m.length;
    if (0 >= t4)
      throw H.ioore(m, 0);
    t2 = m[0];
    if (7 >= t4)
      throw H.ioore(m, 7);
    t2 = J.$mul$n(t2, m[7]);
    if (7 >= t1.length)
      throw H.ioore(t1, 7);
    t1[7] = invDet * (t3 - t2);
    t2 = m.length;
    if (1 >= t2)
      throw H.ioore(m, 1);
    t3 = m[1];
    if (5 >= t2)
      throw H.ioore(m, 5);
    t3 = J.$mul$n(t3, m[5]);
    if (4 >= m.length)
      throw H.ioore(m, 4);
    t2 = J.$mul$n(m[4], m[2]);
    if (2 >= t1.length)
      throw H.ioore(t1, 2);
    t1[2] = invDet * (t3 - t2);
    if (3 >= m.length)
      throw H.ioore(m, 3);
    t2 = J.$mul$n(m[3], m[2]);
    t3 = m.length;
    if (0 >= t3)
      throw H.ioore(m, 0);
    t4 = m[0];
    if (5 >= t3)
      throw H.ioore(m, 5);
    t4 = J.$mul$n(t4, m[5]);
    if (5 >= t1.length)
      throw H.ioore(t1, 5);
    t1[5] = invDet * (t2 - t4);
    t4 = m.length;
    if (0 >= t4)
      throw H.ioore(m, 0);
    t2 = m[0];
    if (4 >= t4)
      throw H.ioore(m, 4);
    t2 = J.$mul$n(t2, m[4]);
    if (3 >= m.length)
      throw H.ioore(m, 3);
    t4 = J.$mul$n(m[3], m[1]);
    if (8 >= t1.length)
      throw H.ioore(t1, 8);
    t1[8] = invDet * (t2 - t4);
    return i;
  },
  get$determinant: function() {
    var t1, t2, t3, t4, x, y;
    t1 = this.xform;
    t2 = t1.length;
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (4 >= t2)
      throw H.ioore(t1, 4);
    t4 = t1[4];
    if (8 >= t2)
      throw H.ioore(t1, 8);
    t4 = J.$mul$n(t4, t1[8]);
    if (7 >= t1.length)
      throw H.ioore(t1, 7);
    x = J.$mul$n(t3, t4 - J.$mul$n(t1[7], t1[5]));
    t4 = t1.length;
    if (3 >= t4)
      throw H.ioore(t1, 3);
    t3 = t1[3];
    t2 = t1[1];
    if (8 >= t4)
      throw H.ioore(t1, 8);
    t2 = J.$mul$n(t2, t1[8]);
    if (7 >= t1.length)
      throw H.ioore(t1, 7);
    y = J.$mul$n(t3, t2 - J.$mul$n(t1[7], t1[2]));
    if (6 >= t1.length)
      throw H.ioore(t1, 6);
    t2 = t1[6];
    t3 = J.$mul$n(t1[1], t1[5]);
    if (4 >= t1.length)
      throw H.ioore(t1, 4);
    return x - y + J.$mul$n(t2, t3 - J.$mul$n(t1[4], t1[2]));
  },
  setTransform$6: function(_, m11, m12, m21, m22, dx, dy) {
    var t1, t2;
    t1 = this.xform;
    t2 = t1.length;
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t1[0] = m11;
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1[1] = m21;
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1[2] = dx;
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1[3] = m12;
    if (4 >= t2)
      throw H.ioore(t1, 4);
    t1[4] = m22;
    if (5 >= t2)
      throw H.ioore(t1, 5);
    t1[5] = dy;
    if (6 >= t2)
      throw H.ioore(t1, 6);
    t1[6] = 0;
    if (7 >= t2)
      throw H.ioore(t1, 7);
    t1[7] = 0;
    if (8 >= t2)
      throw H.ioore(t1, 8);
    t1[8] = 1;
  },
  transformContact$1: function(c) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = c.touchX;
    t2 = this.xform;
    t3 = t2.length;
    if (0 >= t3)
      throw H.ioore(t2, 0);
    t4 = t2[0];
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t5 = c.touchY;
    if (1 >= t3)
      throw H.ioore(t2, 1);
    t6 = t2[1];
    if (typeof t6 !== "number")
      throw H.iae(t6);
    if (2 >= t3)
      throw H.ioore(t2, 2);
    t7 = t2[2];
    if (typeof t7 !== "number")
      throw H.iae(t7);
    if (3 >= t3)
      throw H.ioore(t2, 3);
    t8 = t2[3];
    if (typeof t8 !== "number")
      throw H.iae(t8);
    if (4 >= t3)
      throw H.ioore(t2, 4);
    t9 = t2[4];
    if (typeof t9 !== "number")
      throw H.iae(t9);
    if (5 >= t3)
      throw H.ioore(t2, 5);
    t2 = t2[5];
    if (typeof t2 !== "number")
      throw H.iae(t2);
    c.touchX = t1 * t4 + t5 * t6 + t7;
    c.touchY = t1 * t8 + t5 * t9 + t2;
  },
  transformX$2: function(x, y) {
    var t1, t2, t3;
    t1 = this.xform;
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t2 = J.$mul$n(x, t1[0]);
    if (1 >= t1.length)
      throw H.ioore(t1, 1);
    t3 = J.$mul$n(y, t1[1]);
    if (2 >= t1.length)
      throw H.ioore(t1, 2);
    t1 = t1[2];
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return t2 + t3 + t1;
  },
  transformY$2: function(x, y) {
    var t1, t2, t3;
    t1 = this.xform;
    if (3 >= t1.length)
      throw H.ioore(t1, 3);
    t2 = J.$mul$n(x, t1[3]);
    if (4 >= t1.length)
      throw H.ioore(t1, 4);
    t3 = J.$mul$n(y, t1[4]);
    if (5 >= t1.length)
      throw H.ioore(t1, 5);
    t1 = t1[5];
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return t2 + t3 + t1;
  },
  transformContext$1: function(ctx) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.xform;
    t2 = t1.length;
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = t1[0];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t4 = t1[3];
    t5 = t1[1];
    if (4 >= t2)
      throw H.ioore(t1, 4);
    t6 = t1[4];
    t7 = t1[2];
    if (5 >= t2)
      throw H.ioore(t1, 5);
    J.transform$6$x(ctx, t3, t4, t5, t6, t7, t1[5]);
  }
},

FrogPond: {"": "TouchLayer;canvas,layer0,layer1,layer2,tmanager,workspaces,width>,height>,turtles,gems,flies,frogs,pads,lattice,play_state,_countdown,pond,touchables,touch_bindings,xform,iform",
  addRandomFrog$1: function(workspace) {
    var i, t1, max, x, y, t2, frog, t3, t4, t5;
    for (i = 0; i < 20; ++i) {
      t1 = $.get$Turtle_rand();
      max = J.$sub$n(this.width, 200);
      t1.toString;
      if (max < 0)
        H.throwExpression(new P.ArgumentError("negative max: " + H.S(max)));
      if (max > 4294967295)
        max = 4294967295;
      x = (Math.random() * max >>> 0) + 100;
      t1 = $.get$Turtle_rand();
      max = J.$sub$n(this.height, 300);
      t1.toString;
      if (max < 0)
        H.throwExpression(new P.ArgumentError("negative max: " + H.S(max)));
      if (max > 4294967295)
        max = 4294967295;
      y = (Math.random() * max >>> 0) + 150;
      if (!this.inWater$2(x, y)) {
        t1 = W.ImageElement_ImageElement(null, null, null);
        t2 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
        t2.segments = [];
        frog = new Q.Frog(this, -1, 0, -1, null, null, null, null, t1, 0, 0, 0, false, false, 0, 0, 1, 0, 1, false, t2, W.ImageElement_ImageElement(null, null, null), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null), 0, 0);
        $.get$Turtle_rand().toString;
        t1 = Math.random() * 365 >>> 0;
        frog.heading = frog.heading - -t1 / 180 * 3.141592653589793;
        t1 = frog.img;
        t2 = J.getInterceptor$x(t1);
        t2.set$src(t1, "images/bluefrog.png");
        J.set$src$x(frog.help, "images/help/help1.png");
        t3 = frog.variables;
        t3.$indexSet(t3, "workspace", workspace.name);
        frog.x = x;
        frog.y = y;
        t3 = workspace.start;
        t4 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null);
        t5 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
        t5.segments = [];
        frog.program = new Q.Program(frog, t3, null, false, t4, t5);
        t2.set$src(t1, "images/" + workspace.color + "frog.png");
        this.frogs.push(frog);
        this.turtles.push(frog);
        this.touchables.push(frog);
        return;
      }
    }
    P.Timer_Timer(C.Duration_2000000, new Q.FrogPond_addRandomFrog_closure(this, workspace));
  },
  addHomeFrog$1: function(workspace) {
    var t1, t2, frog, t3, t4, fx, fy, t5;
    t1 = W.ImageElement_ImageElement(null, null, null);
    t2 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t2.segments = [];
    frog = new Q.Frog(this, -1, 0, -1, null, null, null, null, t1, 0, 0, 0, false, false, 0, 0, 1, 0, 1, false, t2, W.ImageElement_ImageElement(null, null, null), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null), 0, 0);
    t2 = $.get$Turtle_rand().nextInt$1(365);
    frog.heading = frog.heading - -t2 / 180 * 3.141592653589793;
    t2 = frog.img;
    t1 = J.getInterceptor$x(t2);
    t1.set$src(t2, "images/bluefrog.png");
    J.set$src$x(frog.help, "images/help/help1.png");
    t3 = J.getInterceptor$x(workspace);
    t4 = frog.variables;
    t4.$indexSet(t4, "workspace", t3.get$name(workspace));
    t4.$indexSet(t4, "moved", false);
    fx = J.$div$n(t3.get$width(workspace), 2);
    fy = J.$sub$n(t3.get$height(workspace), 290);
    frog.x = workspace.objectToWorldX$2(fx, fy);
    frog.y = workspace.objectToWorldY$2(fx, fy);
    frog.heading = workspace.objectToWorldTheta$1(0);
    t3 = t3.get$start(workspace);
    t4 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null);
    t5 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t5.segments = [];
    frog.program = new Q.Program(frog, t3, null, false, t4, t5);
    t1.set$src(t2, "images/" + H.S(workspace.get$color()) + "frog.png");
    this.addFrog$1(frog);
    return frog;
  },
  addFrog$1: function(frog) {
    this.frogs.push(frog);
    this.turtles.push(frog);
    this.touchables.push(frog);
  },
  getFrogCount$1: function(workspaceName) {
    var t1, $arguments, t2, count;
    if (workspaceName == null)
      return this.frogs.length;
    else {
      t1 = this.frogs;
      $arguments = H.substitute(t1.$asJSArray, H.getRuntimeTypeInfo(t1));
      t2 = $arguments == null ? null : $arguments[0];
      t1 = new H.ListIterator(t1, t1.length, 0, null);
      t1.$builtinTypeInfo = [t2];
      count = 0;
      for (; t1.moveNext$0();)
        if (J.$eq(J.$index$asx(t1._current, "workspace"), workspaceName))
          ++count;
      return count;
    }
  },
  getFocalFrog$1: function(workspace) {
    var t1, $arguments, t2, frog;
    t1 = this.frogs;
    $arguments = H.substitute(t1.$asJSArray, H.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new H.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();) {
      frog = t1._current;
      if (J.$eq(J.$index$asx(frog, "workspace"), workspace))
        return frog;
    }
    return;
  },
  removeDeadFrogs$0: function() {
    var t1, i, t2, t3, count, t4;
    for (t1 = this.frogs, i = t1.length - 1, t2 = this.turtles, t3 = this.touchables, count = 0; i >= 0; --i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t4 = t1[i];
      if (t4.get$dead()) {
        C.JSArray_methods.remove$1(t1, t4);
        C.JSArray_methods.remove$1(t2, t4);
        C.JSArray_methods.remove$1(t3, t4);
        ++count;
      }
    }
    return count > 0;
  },
  getFrogsHere$1: function(turtle) {
    var aset, t1, t2, f;
    aset = P.HashSet_HashSet(null, null, null, Q.Frog);
    for (t1 = this.frogs, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      f = t2._current;
      if (!J.$eq(f, turtle) && f.overlapsTurtle$1(turtle))
        aset.add$1(aset, f);
    }
    return aset;
  },
  getFrogHere$2: function(x, y) {
    var t1, $arguments, t2, frog;
    t1 = this.frogs;
    $arguments = H.substitute(t1.$asJSArray, H.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new H.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();) {
      frog = t1._current;
      if (frog.overlapsPoint$2(x, y))
        return frog;
    }
    return;
  },
  previewBlock$3: function(workspace, cmd, param) {
    var t1, t2, frog;
    for (t1 = this.frogs, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      frog = t2._current;
      if (J.$eq(J.$index$asx(frog, "workspace"), workspace))
        frog.get$program().doCommand$3(cmd, param, true);
    }
  },
  playProgram$1: function(workspace) {
    var t1, t2, t3, frog;
    t1 = workspace.name;
    if (this.getFrogCount$1(t1) === 0)
      this.addHomeFrog$1(workspace);
    for (t2 = this.frogs, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]); t3.moveNext$0();) {
      frog = t3._current;
      if (J.$eq(J.$index$asx(frog, "workspace"), t1)) {
        t2 = frog.get$program();
        if (t2.curr == null) {
          t2.curr = t2.start;
          t2.running = false;
        }
        t2.running = true;
      }
    }
  },
  pauseProgram$1: function(workspace) {
    var t1, t2, frog;
    this.play_state = 1;
    for (t1 = this.frogs, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = workspace.name; t2.moveNext$0();) {
      frog = t2._current;
      if (J.$eq(J.$index$asx(frog, "workspace"), t1))
        frog.get$program().running = false;
    }
  },
  stopProgram$1: function(workspace) {
    var t1, t2, frog, t3;
    for (t1 = this.frogs, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = workspace.name; t2.moveNext$0();) {
      frog = t2._current;
      if (J.$eq(J.$index$asx(frog, "workspace"), t1)) {
        t3 = frog.get$program();
        t3.curr = t3.start;
        t3.running = false;
      }
    }
  },
  restartProgram$1: function(workspace) {
    var t1, $arguments, t2, frog;
    t1 = this.frogs;
    $arguments = H.substitute(t1.$asJSArray, H.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new H.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    t2 = J.getInterceptor$x(workspace);
    for (; t1.moveNext$0();) {
      frog = t1._current;
      if (J.$eq(J.$index$asx(frog, "workspace"), t2.get$name(workspace)))
        frog.die$0();
    }
    this.addHomeFrog$1(workspace).pulse$0();
  },
  fastForwardProgram$1: function(workspace) {
    var t1 = this.play_state;
    if (t1 <= 0)
      this.play_state = 1;
    else if (t1 < 64)
      this.play_state = t1 * 2;
    else
      this.play_state = 1;
    this.drawForeground$0();
  },
  isProgramRunning$1: function(workspaceName) {
    var t1, t2, running, frog;
    for (t1 = this.frogs, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), running = false; t2.moveNext$0();) {
      frog = t2._current;
      if (J.$eq(J.$index$asx(frog, "workspace"), workspaceName)) {
        t1 = frog.get$program();
        if (t1.running && t1.curr != null)
          running = true;
      }
    }
    return running;
  },
  addLilyPad$3: function(lx, ly, ls) {
    var t1, pad;
    t1 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    pad = new Q.LilyPad(this, null, null, false, 0, 0, 1, 0, 1, false, t1, W.ImageElement_ImageElement(null, null, null), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null), 0, 0);
    t1 = $.get$Turtle_rand().nextInt$1(365);
    pad.heading = pad.heading - -t1 / 180 * 3.141592653589793;
    J.set$src$x(pad.img, "images/lilypad.png");
    pad.x = lx;
    pad.y = ly;
    pad.size = ls;
    pad.refresh = true;
    this.pads.push(pad);
    this.turtles.push(pad);
    this.touchables.push(pad);
  },
  addFly$0: function() {
    var t1, fly;
    t1 = this.flies;
    if (t1.length < $.MAX_FLIES) {
      fly = Q.Fly$(this);
      t1.push(fly);
      this.turtles.push(fly);
    }
  },
  addBeetle$0: function() {
    var t1, beetle;
    t1 = this.flies;
    if (t1.length < $.MAX_BEETLES) {
      beetle = Q.Beetle$(this, null);
      t1.push(beetle);
      this.turtles.push(beetle);
    }
  },
  removeDeadFlies$0: function() {
    var t1, i, t2, t3;
    for (t1 = this.flies, i = t1.length - 1, t2 = this.turtles; i >= 0; --i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t3 = t1[i];
      if (t3.dead) {
        t3.erase$1(this.layer2);
        if (i >= t1.length)
          throw H.ioore(t1, i);
        C.JSArray_methods.remove$1(t2, t1[i]);
        C.JSArray_methods.removeAt$1(t1, i);
      }
    }
  },
  getTurtlesHere$2: function(target, type) {
    var aset, t1, t2, t;
    aset = P.HashSet_HashSet(null, null, null, Q.Turtle);
    for (t1 = this.turtles, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      t = t2._current;
      t1 = J.getInterceptor(t);
      if (!t1.$eq(t, target)) {
        t1 = t1.get$runtimeType(t);
        t1 = t1.$eq(t1, type) && !t.get$dead() && t.overlapsTurtle$1(target);
      } else
        t1 = false;
      if (t1)
        aset.add$1(aset, t);
    }
    return aset;
  },
  getTurtleHere$2: function(target, type) {
    var aset = this.getTurtlesHere$2(target, type);
    if (aset._collection$_length === 0)
      return;
    else
      return aset.get$first(aset);
  },
  getFlyHere$2: function(x, y) {
    var t1, t2, fly;
    for (t1 = this.flies, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      fly = t2._current;
      if (fly.overlapsPoint$3(x, y, 30))
        return fly;
    }
    return;
  },
  captureFly$2: function(frog, fly) {
    var t1, t2, workspace, t3, t4;
    for (t1 = this.workspaces, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = frog.variables; t2.moveNext$0();) {
      workspace = t2._current;
      t3 = J.get$name$x(workspace);
      t4 = t1.$index(t1, "workspace");
      if (t3 == null ? t4 == null : t3 === t4) {
        workspace.captureFly$1(fly);
        this.addBeetle$0();
      }
    }
  },
  addGem$0: function() {
    var i, t1, max, x, y, t2, gem, r;
    for (i = 0; i < 25; ++i) {
      t1 = $.get$Turtle_rand();
      max = J.$sub$n(this.width, 100);
      t1.toString;
      if (max < 0)
        H.throwExpression(new P.ArgumentError("negative max: " + H.S(max)));
      if (max > 4294967295)
        max = 4294967295;
      x = (Math.random() * max >>> 0) + 50;
      t1 = $.get$Turtle_rand();
      max = J.$sub$n(this.height, 200);
      t1.toString;
      if (max < 0)
        H.throwExpression(new P.ArgumentError("negative max: " + H.S(max)));
      if (max > 4294967295)
        max = 4294967295;
      y = (Math.random() * max >>> 0) + 100;
      if (!this.inWater$2(x, y) && this.getFrogHere$2(x, y) == null) {
        t1 = W.ImageElement_ImageElement(null, null, null);
        t2 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
        t2.segments = [];
        gem = new Q.Gem(null, null, null, t1, false, 0, 0, 1, 0, 1, false, t2, W.ImageElement_ImageElement(null, null, null), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null), 0, 0);
        $.get$Turtle_rand().toString;
        t1 = Math.random() * 365 >>> 0;
        gem.heading = gem.heading - -t1 / 180 * 3.141592653589793;
        t1 = $.get$Turtle_rand();
        $.get$Gem_colors();
        t1.toString;
        r = Math.random() * 4 >>> 0;
        t1 = $.get$Gem_colors();
        if (r < 0 || r >= 4)
          throw H.ioore(t1, r);
        gem._init$1(t1[r]);
        gem.x = x;
        gem.y = y;
        gem.size = 0.75;
        this.gems.push(gem);
        this.turtles.push(gem);
        return;
      }
    }
    P.Timer_Timer(C.Duration_4000000, this.get$addGem());
  },
  get$addGem: function() {
    return new Q.BoundClosure$0(this, Q.FrogPond.prototype.addGem$0, null, "addGem$0");
  },
  removeDeadGems$0: function() {
    var t1, i, t2;
    for (t1 = this.gems, i = t1.length - 1, t2 = this.turtles; i >= 0; --i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      if (t1[i].dead) {
        C.JSArray_methods.removeAt$1(t1, i);
        if (i >= t1.length)
          throw H.ioore(t1, i);
        C.JSArray_methods.remove$1(t2, t1[i]);
      }
    }
  },
  getGemHere$1: function(frog) {
    var t1, t2, gem;
    for (t1 = this.gems, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      gem = t2._current;
      if (gem.overlapsTurtle$1(frog) && !gem.get$dead())
        return gem;
    }
    return;
  },
  captureGem$2: function(frog, gem) {
    var t1, t2, workspace, t3, t4;
    for (t1 = this.workspaces, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = frog.variables; t2.moveNext$0();) {
      workspace = t2._current;
      t3 = J.get$name$x(workspace);
      t4 = t1.$index(t1, "workspace");
      if (t3 == null ? t4 == null : t3 === t4) {
        workspace.captureGem$1(gem);
        gem.die$0();
        P.Timer_Timer(C.Duration_3000000, new Q.FrogPond_captureGem_closure(this));
      }
    }
  },
  tick$1: function(timer) {
    var t1, t2, refresh, pad, i, workspace;
    for (t1 = this.flies, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), refresh = false; t2.moveNext$0();)
      if (t2._current.animate$0() === true)
        refresh = true;
    if (refresh) {
      H.IterableMixinWorkaround_forEach(t1, new Q.FrogPond_tick_closure(this));
      H.IterableMixinWorkaround_forEach(t1, new Q.FrogPond_tick_closure0(this));
    }
    for (t1 = this.pads, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), refresh = false; t2.moveNext$0();) {
      pad = t2._current;
      t1 = J.getInterceptor$x(pad);
      if (t1.get$refresh(pad) === true) {
        t1.set$refresh(pad, false);
        refresh = true;
      }
    }
    if (refresh)
      this.drawPond$0();
    for (refresh = false, i = 0; i < this.play_state; ++i)
      if (this.animate$0())
        refresh = true;
    if (refresh)
      this.drawForeground$0();
    for (t1 = this.workspaces, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      workspace = t2._current;
      if (this.getFrogCount$1(J.get$name$x(workspace)) === 0)
        this.restartProgram$1(workspace);
      if (workspace.animate$0() === true)
        workspace.draw$0();
    }
  },
  get$tick: function() {
    return new Q.BoundClosure$1(this, Q.FrogPond.prototype.tick$1, null, "tick$1");
  },
  animate$0: function() {
    var t1, $arguments, t2, refresh, i;
    this.removeDeadFlies$0();
    this.removeDeadGems$0();
    this.removeDeadFrogs$0();
    t1 = this.gems;
    $arguments = H.substitute(t1.$asJSArray, H.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new H.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    refresh = false;
    for (; t1.moveNext$0();)
      if (t1._current.animate$0() === true)
        refresh = true;
    for (t1 = this.frogs, i = 0; i < t1.length; ++i)
      if (t1[i].animate$0())
        refresh = true;
    t1 = this.workspaces;
    $arguments = H.substitute(t1.$asJSArray, H.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new H.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();)
      if (t1._current.get$bug().animate$0())
        refresh = true;
    return refresh;
  },
  inWater$2: function(x, y) {
    var t1, $arguments, t2;
    t1 = this.pads;
    $arguments = H.substitute(t1.$asJSArray, H.getRuntimeTypeInfo(t1));
    t2 = $arguments == null ? null : $arguments[0];
    t1 = new H.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();)
      if (t1._current.overlapsPoint$2(x, y))
        return false;
    return true;
  },
  onGridPoint$3: function(x, y, r) {
    var t1, t2, point, t3, t4, t5;
    for (t1 = this.lattice, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      point = t2._current;
      t1 = J.getInterceptor$asx(point);
      t3 = t1.$index(point, 0);
      t1 = t1.$index(point, 1);
      t4 = J.getInterceptor$n(t3);
      t5 = J.getInterceptor$n(t1);
      t1 = J.$add$ns(J.$mul$n(t4.$sub(t3, x), t4.$sub(t3, x)), J.$mul$n(t5.$sub(t1, y), t5.$sub(t1, y)));
      if (typeof t1 !== "number")
        H.throwExpression(new P.ArgumentError(t1));
      if (Math.sqrt(t1) <= r)
        return true;
    }
    return false;
  },
  drawPond$0: function() {
    var t1, t2, t3;
    J.clearRect$4$x(this.layer0, 0, 0, this.width, this.height);
    for (t1 = this.pads, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t1 = t2.moveNext$0(), t3 = this.layer0, t1;)
      t2._current.draw$1(t3);
    this.drawGrid$1(t3);
  },
  drawGrid$1: function(ctx) {
    var t1, VSPACE, t2, sy, j, sx, sy0, i, t3;
    t1 = this.lattice;
    C.JSArray_methods.set$length(t1, 0);
    VSPACE = 150 * Math.sin(1.0471975511965976);
    t2 = J.getInterceptor$x(ctx);
    t2.save$0(ctx);
    t2.set$globalAlpha(ctx, 0.05);
    t2.set$fillStyle(ctx, "white");
    t2.set$strokeStyle(ctx, "white");
    t2.set$lineWidth(ctx, 4);
    for (sy = 20, j = 0; j < 9; ++j, sy = sy0) {
      sx = C.JSInt_methods.$mod(j, 2) === 0 ? 136 : 211;
      for (sy0 = sy + VSPACE, i = 0; i < 12; ++i) {
        if (!this.inWater$2(sx, sy)) {
          t2.beginPath$0(ctx);
          t2.arc$6(ctx, sx, sy, 10, 0, 6.283185307179586, true);
          t1.push([sx, sy]);
          t2.beginPath$0(ctx);
          t3 = sx + 150;
          if (!this.inWater$2(t3, sy)) {
            t2.moveTo$2(ctx, sx, sy);
            t2.lineTo$2(ctx, t3, sy);
          }
          t3 = sx + 75;
          if (!this.inWater$2(t3, sy0)) {
            t2.moveTo$2(ctx, sx, sy);
            t2.lineTo$2(ctx, t3, sy0);
          }
          t3 = sx - 75;
          if (!this.inWater$2(t3, sy0)) {
            t2.moveTo$2(ctx, sx, sy);
            t2.lineTo$2(ctx, t3, sy0);
          }
          t2.stroke$0(ctx);
        }
        sx += 150;
      }
    }
    t2.restore$0(ctx);
  },
  drawForeground$0: function() {
    var ctx, t1, t2, workspace, target;
    ctx = this.layer1;
    t1 = J.getInterceptor$x(ctx);
    t1.clearRect$4(ctx, 0, 0, this.width, this.height);
    H.IterableMixinWorkaround_forEach(this.gems, new Q.FrogPond_drawForeground_closure(ctx));
    H.IterableMixinWorkaround_forEach(this.frogs, new Q.FrogPond_drawForeground_closure0(ctx));
    if (this.play_state > 1) {
      t1.set$font(ctx, "20px sans-serif");
      t1.set$textAlign(ctx, "center");
      t1.set$textBaseline(ctx, "top");
      t1.set$fillStyle(ctx, "white");
      t1.fillText$3(ctx, "Speedup: x" + this.play_state, J.$div$n(this.width, 2), 15);
    }
    for (t1 = this.workspaces, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      workspace = t2._current;
      target = this.getFocalFrog$1(J.get$name$x(workspace));
      if (target != null) {
        t1 = target.get$ghost();
        if (t1 != null && J.get$label$x(t1) != null)
          workspace.traceExecution$2(ctx, t1);
        else
          workspace.traceExecution$2(ctx, target);
        workspace.drawBug$1(ctx);
      }
    }
  },
  FrogPond$0: function() {
    var t1, i, t2, t3, t4, workspace, t5, t6, lilypad;
    this.canvas = document.querySelector("#pond");
    this.layer0 = J.getContext$1$x(this.canvas, "2d");
    this.canvas = document.querySelector("#frogs");
    this.layer1 = J.getContext$1$x(this.canvas, "2d");
    this.canvas = document.querySelector("#flies");
    this.layer2 = J.getContext$1$x(this.canvas, "2d");
    this.width = J.get$width$x(this.canvas);
    this.height = J.get$height$x(this.canvas);
    t1 = this.tmanager;
    t1.registerEvents$1(document.documentElement);
    t1 = t1.layers;
    t1.push(this);
    for (i = 0; i < $.MAX_GEMS; ++i)
      this.addGem$0();
    for (i = 0; i < $.MAX_FLIES; ++i)
      this.addFly$0();
    for (i = 0; i < $.MAX_BEETLES; ++i)
      this.addBeetle$0();
    if (Q.isFlagSet("evolution")) {
      this.addLilyPad$3(J.$div$n(this.width, 2), J.$div$n(this.height, 2), 1);
      this.addLilyPad$3(200, 200, 0.7);
      this.addLilyPad$3(900, 210, 0.7);
      this.addLilyPad$3(840, 550, 0.6);
    } else {
      this.addLilyPad$3(300, J.$div$n(this.height, 2), 0.6);
      this.addLilyPad$3(370, 100, 0.6);
      this.addLilyPad$3(1620, J.$div$n(this.height, 2), 0.6);
      this.addLilyPad$3(550, 790, 0.8);
      this.addLilyPad$3(630, 370, 0.9);
      this.addLilyPad$3(940, 650, 0.8);
      this.addLilyPad$3(1000, 250, 0.8);
      this.addLilyPad$3(1300, J.$div$n(this.height, 2), 0.8);
      this.addLilyPad$3(1400, 130, 0.6);
      this.addLilyPad$3(1300, J.$sub$n(this.height, 130), 0.6);
      this.addLilyPad$3(900, J.$sub$n(this.height, 130), 0.6);
    }
    t2 = Q.isFlagSet("evolution");
    t3 = this.height;
    t4 = this.width;
    if (t2) {
      $.MAX_FROGS = 100;
      workspace = Q.CodeWorkspace$(this, t4, t3, "workspace1", "green");
      this.workspaces.push(workspace);
      t1.push(workspace);
      for (i = 0; i < 4; ++i)
        this.addRandomFrog$1(workspace);
    } else {
      workspace = Q.CodeWorkspace$(this, t3, t4, "workspace1", "blue");
      t2 = Math.cos(-1.5707963267948966);
      t3 = Math.sin(-1.5707963267948966);
      t4 = Math.sin(-1.5707963267948966);
      t5 = workspace.xform;
      t5.setTransform$6(t5, t2, t3, -t4, Math.cos(-1.5707963267948966), 0, this.height);
      workspace.iform = t5.invert$0();
      t5 = this.workspaces;
      t5.push(workspace);
      t1.push(workspace);
      this.addHomeFrog$1(workspace);
      workspace = Q.CodeWorkspace$(this, this.height, this.width, "workspace2", "green");
      t2 = Math.cos(1.5707963267948966);
      t3 = Math.sin(1.5707963267948966);
      t4 = Math.sin(1.5707963267948966);
      t6 = workspace.xform;
      t6.setTransform$6(t6, t2, t3, -t4, Math.cos(1.5707963267948966), this.width, 0);
      workspace.iform = t6.invert$0();
      t5.push(workspace);
      t1.push(workspace);
      this.addHomeFrog$1(workspace);
    }
    P.Timer_Timer$periodic(C.Duration_40000, this.get$tick());
    lilypad = W.ImageElement_ImageElement(null, null, null);
    t1 = J.getInterceptor$x(lilypad);
    t1.set$src(lilypad, "images/lilypad.png");
    t1 = t1.get$onLoad(lilypad);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Q.FrogPond_closure(this)), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    if (Q.isFlagSet("timeout")) {
      P.print("initiating master restart timer");
      P.Timer_Timer$periodic(C.Duration_10000000, new Q.FrogPond_closure0(this));
      t1 = document.documentElement;
      t1.toString;
      t1 = new W._ElementEventStreamImpl(t1, C.EventStreamProvider_mousedown._eventType, false);
      H.setRuntimeTypeInfo(t1, [null]);
      t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Q.FrogPond_closure1(this)), t1._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t2._tryResume$0();
      t2 = document.documentElement;
      t2.toString;
      t2 = new W._ElementEventStreamImpl(t2, C.EventStreamProvider_touchstart._eventType, false);
      H.setRuntimeTypeInfo(t2, [null]);
      t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new Q.FrogPond_closure2(this)), t2._useCapture);
      H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
      t1._tryResume$0();
    }
  },
  static: {
FrogPond$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
  t1 = P.List_List(null, Q.TouchLayer);
  H.setRuntimeTypeInfo(t1, [Q.TouchLayer]);
  t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, Q.TouchBinding);
  t3 = P.List_List(null, Q.CodeWorkspace);
  H.setRuntimeTypeInfo(t3, [Q.CodeWorkspace]);
  t4 = P.List_List(null, Q.Turtle);
  H.setRuntimeTypeInfo(t4, [Q.Turtle]);
  t5 = P.List_List(null, Q.Gem);
  H.setRuntimeTypeInfo(t5, [Q.Gem]);
  t6 = P.List_List(null, Q.Fly);
  H.setRuntimeTypeInfo(t6, [Q.Fly]);
  t7 = P.List_List(null, Q.Frog);
  H.setRuntimeTypeInfo(t7, [Q.Frog]);
  t8 = P.List_List(null, Q.LilyPad);
  H.setRuntimeTypeInfo(t8, [Q.LilyPad]);
  t9 = P.List_List(null, null);
  t10 = W.ImageElement_ImageElement(null, null, null);
  t11 = P.List_List(null, Q.Touchable);
  H.setRuntimeTypeInfo(t11, [Q.Touchable]);
  t11 = new Q.FrogPond(null, null, null, null, new Q.TouchManager(false, null, t1, t2), t3, null, null, t4, t5, t6, t7, t8, t9, 1, 0, t10, t11, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, Q.Touchable), new Q.Matrix2D([1, 0, 0, 0, 1, 0, 0, 0, 1]), new Q.Matrix2D([1, 0, 0, 0, 1, 0, 0, 0, 1]));
  t11.FrogPond$0();
  return t11;
}}

},

FrogPond_closure: {"": "Closure;this_0",
  call$1: function(e) {
    var t1 = this.this_0;
    t1.drawPond$0();
    H.IterableMixinWorkaround_forEach(t1.workspaces, new Q.FrogPond__closure());
    t1.drawForeground$0();
  },
  "+call:1:0": 0,
  $is_args1: true
},

FrogPond__closure: {"": "Closure;",
  call$1: function(workspace) {
    return workspace.draw$0();
  },
  "+call:1:0": 0,
  $is_args1: true
},

FrogPond_closure0: {"": "Closure;this_1",
  call$1: function(timer) {
    var t1 = this.this_1;
    t1._countdown = t1._countdown + 10;
    if (t1._countdown >= 80)
      J.reload$0$x(C.Window_methods.get$location(window));
  },
  "+call:1:0": 0,
  $is_args1: true
},

FrogPond_closure1: {"": "Closure;this_2",
  call$1: function(e) {
    this.this_2._countdown = 0;
    return 0;
  },
  "+call:1:0": 0,
  $is_args1: true
},

FrogPond_closure2: {"": "Closure;this_3",
  call$1: function(e) {
    this.this_3._countdown = 0;
    return 0;
  },
  "+call:1:0": 0,
  $is_args1: true
},

FrogPond_addRandomFrog_closure: {"": "Closure;this_0,workspace_1",
  call$0: function() {
    return this.this_0.addRandomFrog$1(this.workspace_1);
  },
  "+call:0:0": 0
},

FrogPond_captureGem_closure: {"": "Closure;this_0",
  call$0: function() {
    this.this_0.addGem$0();
  },
  "+call:0:0": 0
},

FrogPond_tick_closure: {"": "Closure;this_0",
  call$1: function(fly) {
    return fly.erase$1(this.this_0.layer2);
  },
  "+call:1:0": 0,
  $is_args1: true
},

FrogPond_tick_closure0: {"": "Closure;this_1",
  call$1: function(fly) {
    return fly.draw$1(this.this_1.layer2);
  },
  "+call:1:0": 0,
  $is_args1: true
},

FrogPond_drawForeground_closure: {"": "Closure;ctx_0",
  call$1: function(gem) {
    return gem.draw$1(this.ctx_0);
  },
  "+call:1:0": 0,
  $is_args1: true
},

FrogPond_drawForeground_closure0: {"": "Closure;ctx_1",
  call$1: function(frog) {
    return frog.draw$1(this.ctx_1);
  },
  "+call:1:0": 0,
  $is_args1: true
},

Program: {"": "Object;frog,start>,curr,running,variables<,tween",
  step$0: function(_) {
    var t1;
    if (this.running && this.curr != null) {
      this.curr = J.step$1$x(this.curr, this);
      t1 = this.curr;
      if (t1 != null)
        t1.eval$1(this);
    }
  },
  animate$0: function() {
    if (this.tween.isTweening$0()) {
      this.tween.animate$0();
      return true;
    } else if (this.running && this.curr != null) {
      this.step$0(this);
      return true;
    } else {
      this.running = false;
      return false;
    }
  },
  $index: function(_, key) {
    var t1 = this.variables;
    return t1.$index(t1, key);
  },
  $indexSet: function(_, key, value) {
    var t1 = this.variables;
    t1.$indexSet(t1, key, value);
  },
  play$0: function(_) {
    if (this.curr == null) {
      this.curr = this.start;
      this.running = false;
    }
    this.running = true;
  },
  getSensorValue$1: function(sensor) {
    var t1 = J.getInterceptor(sensor);
    if (t1.$eq(sensor, "fly"))
      return this.frog.nearFly$0();
    else if (t1.$eq(sensor, "near-water?"))
      return this.frog.nearWater$0();
    else if (t1.$eq(sensor, "see-bug?"))
      return this.frog.seeBug$0();
    else if (t1.$eq(sensor, "random?")) {
      $.get$Turtle_rand().toString;
      return Math.random() < 0.5;
    } else if (t1.$eq(sensor, "blocked?"))
      return this.frog.isBlocked$0();
    else
      return false;
  },
  doCommand$3: function(cmd, param, preview) {
    var t1 = this.frog;
    t1.reset$0(t1);
    if (cmd === "hop")
      this.doMove$3(cmd, param, preview);
    else if (cmd === "turn" || cmd === "left" || cmd === "right")
      this.doTurn$3(cmd, param, preview);
    else if (cmd === "chirp")
      this.doSound$3(cmd, param, preview);
    else if (cmd === "spin")
      this.doSpin$3(cmd, param, preview);
    else if (cmd === "eat")
      this.doEat$3(cmd, param, preview);
    else if (cmd === "hatch")
      this.doHatch$3(cmd, param, preview);
    else if (cmd === "die")
      this.doDie$3(cmd, param, preview);
    else if (C.JSString_methods.startsWith$1(cmd, "if"))
      this.doIf$3(cmd, param, preview);
    else if (C.JSString_methods.startsWith$1(cmd, "repeat"))
      this.doRepeat$3(cmd, param, preview);
    else if (C.JSString_methods.startsWith$1(cmd, "wait"))
      this.doWait$3(cmd, param, preview);
  },
  doCommand$2: function(cmd, param) {
    return this.doCommand$3(cmd, param, false);
  },
  doPause$1: function(preview) {
    var t1 = this.frog;
    if (t1.pond.inWater$2(t1.x, t1.y)) {
      Q.Sounds_playSound("splash");
      this.frog.dead = true;
      return;
    }
    if (!preview)
      this.frog.captureGem$0();
    t1 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.delay = 0;
    this.tween.duration = 20;
    this.tween.onstart = new Q.Program_doPause_closure();
    this.tween.onend = new Q.Program_doPause_closure0(this);
  },
  doMove$3: function(cmd, param, preview) {
    var t1, t2, $length, bounce;
    t1 = {};
    t1.target_0 = this.frog;
    if (preview) {
      t1.target_0 = this.frog.hatch$0();
      this.frog.ghost = t1.target_0;
      t1.target_0.opacity = 0.3;
    }
    t2 = t1.target_0.variables;
    t2.$indexSet(t2, "moved", true);
    $length = Q.Turtle.prototype.get$radius.call(this.frog) * 0.75 * 4;
    if (typeof param === "number")
      $length *= param;
    bounce = this.frog.pathBlocked$0() && $.FROGS_BLOCK;
    t2 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t2.segments = [];
    this.tween = t2;
    this.tween.$function = 1;
    this.tween.delay = 0;
    this.tween.duration = 12;
    this.tween.onstart = new Q.Program_doMove_closure(t1, cmd, cmd);
    this.tween.onend = new Q.Program_doMove_closure0(this, preview);
    this.tween.addControlPoint$2(0, 0);
    t2 = this.tween;
    if (bounce) {
      t2.addControlPoint$2($length * 0.5, 0.5);
      this.tween.addControlPoint$2(0, 1);
    } else
      t2.addControlPoint$2($length, 1);
    this.tween.ondelta = new Q.Program_doMove_closure1(t1, preview);
  },
  doTurn$3: function(cmd, param, preview) {
    var t1, angle, t2;
    t1 = {};
    if (typeof param === "number")
      angle = param;
    else
      angle = J.$eq(J.toString$0(param), "random") ? $.get$Turtle_rand().nextInt$1(180) - 90 : 60;
    if (cmd === "right") {
      if (typeof angle !== "number")
        throw angle.$mul();
      angle *= -1;
    }
    t1.target_0 = this.frog;
    if (preview) {
      t1.target_0 = this.frog.hatch$0();
      t1.target_0.opacity = 0.5;
      this.frog.ghost = t1.target_0;
    }
    t2 = t1.target_0.variables;
    t2.$indexSet(t2, "moved", true);
    t1.s_1 = cmd;
    if (param != null)
      t1.s_1 = cmd + " " + H.S(param);
    t2 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t2.segments = [];
    this.tween = t2;
    this.tween.$function = 1;
    this.tween.delay = 0;
    this.tween.duration = 20;
    this.tween.onstart = new Q.Program_doTurn_closure(t1);
    this.tween.addControlPoint$2(0, 0);
    this.tween.addControlPoint$2(angle, 1);
    this.tween.ondelta = new Q.Program_doTurn_closure0(t1);
    this.tween.onend = new Q.Program_doTurn_closure1(this, preview);
  },
  doSpin$3: function(cmd, param, preview) {
    var angle, t1;
    angle = 60 * $.get$Turtle_rand().nextInt$1(40);
    $.get$Turtle_rand().toString;
    if (Math.random() < 0.5)
      angle *= -1;
    t1 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.$function = 1;
    this.tween.delay = 0;
    this.tween.duration = 30;
    this.tween.onstart = new Q.Program_doSpin_closure(this, cmd);
    this.tween.addControlPoint$2(0, 0);
    this.tween.addControlPoint$2(angle, 1);
    this.tween.ondelta = new Q.Program_doSpin_closure0(this);
    this.tween.onend = new Q.Program_doSpin_closure1(this, preview);
  },
  doSound$3: function(cmd, param, preview) {
    var t1 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.$function = 1;
    this.tween.onstart = new Q.Program_doSound_closure(this, cmd);
    this.tween.onend = new Q.Program_doSound_closure0(this, preview);
    this.tween.addControlPoint$2(0, 0);
    this.tween.addControlPoint$2(175, 1);
    this.tween.duration = 25;
    this.tween.delay = 0;
    this.tween.ondelta = new Q.Program_doSound_closure1(this);
  },
  doEat$3: function(cmd, param, preview) {
    var t1 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.$function = 1;
    this.tween.onstart = new Q.Program_doEat_closure(this, cmd);
    this.tween.addControlPoint$2(0, 0);
    this.tween.addControlPoint$2(1, 0.4);
    this.tween.addControlPoint$2(0, 1);
    this.tween.duration = 20;
    this.tween.ondelta = new Q.Program_doEat_closure0(this, preview);
    this.tween.onend = new Q.Program_doEat_closure1(this, preview);
  },
  doRepeat$3: function(cmd, param, preview) {
    var t1 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.duration = 5;
    this.tween.onstart = new Q.Program_doRepeat_closure(this, cmd, param);
    this.tween.onend = new Q.Program_doRepeat_closure0(this, preview);
  },
  doIf$3: function(cmd, param, preview) {
    var t1 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.duration = 5;
    this.tween.onstart = new Q.Program_doIf_closure(this, cmd, param);
    this.tween.onend = new Q.Program_doIf_closure0(this, preview);
  },
  doWait$3: function(cmd, param, preview) {
    var t1;
    this.frog._vision = 10;
    this.frog.label = cmd + " " + H.S(param);
    if (preview) {
      t1 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
      t1.segments = [];
      this.tween = t1;
      this.tween.duration = 40;
      this.tween.onend = new Q.Program_doWait_closure(this);
    }
  },
  doDie$3: function(cmd, param, preview) {
    var t1 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.$function = 2;
    this.tween.delay = 0;
    this.tween.duration = 8;
    this.tween.repeat = 3;
    this.tween.addControlPoint$2(1, 0);
    this.tween.addControlPoint$2(0, 0.5);
    this.tween.addControlPoint$2(1, 1);
    this.tween.ondelta = new Q.Program_doDie_closure(this);
    this.tween.onend = new Q.Program_doDie_closure0(this, preview);
  },
  doHatch$3: function(cmd, param, preview) {
    var t1, t2, t3, newsize;
    t1 = {};
    t1.baby_0 = null;
    t2 = this.frog;
    t3 = t2.variables;
    if (t2.pond.getFrogCount$1(t3.$index(t3, "workspace")) < $.MAX_FROGS)
      t1.baby_0 = this.frog.hatch$0();
    t2 = t1.baby_0;
    if (t2 == null)
      return;
    if (preview) {
      t2.set$opacity(0.3);
      this.frog.ghost = t1.baby_0;
    } else {
      this.frog.pond.addFrog$1(t2);
      t1.baby_0.get$program().running = false;
    }
    J.set$size$x(t1.baby_0, 0.05);
    t1.baby_0.set$heading(this.frog.heading);
    J.left$1$x(t1.baby_0, 60 + $.get$Turtle_rand().nextInt$1(5) * 60);
    t2 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t2.segments = [];
    this.tween = t2;
    this.tween.$function = 2;
    this.tween.delay = 0;
    this.tween.duration = 15;
    this.tween.onstart = new Q.Program_doHatch_closure(this, cmd);
    this.tween.onend = new Q.Program_doHatch_closure0(t1, this, preview);
    newsize = this.frog.size;
    if ($.FROG_SIZE_VARIATION) {
      $.get$Turtle_rand().toString;
      t2 = Math.random();
      if (typeof newsize !== "number")
        throw newsize.$add();
      newsize = P.min(2, P.max(0.1, newsize + (t2 * 0.2 - 0.1)));
    }
    this.tween.addControlPoint$2(0.05, 0);
    this.tween.addControlPoint$2(newsize, 1);
    this.tween.ondelta = new Q.Program_doHatch_closure1(t1);
  },
  Program$copy$2: function(other, owner) {
    this.frog = owner;
    this.start = other.start;
    this.curr = other.curr;
    this.running = other.running;
  },
  static: {
Program$copy: function(other, owner) {
  var t1, t2;
  t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null);
  t2 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
  t2.segments = [];
  t2 = new Q.Program(null, null, null, false, t1, t2);
  t2.Program$copy$2(other, owner);
  return t2;
}}

},

Program_doPause_closure: {"": "Closure;",
  call$0: function() {
  },
  "+call:0:0": 0
},

Program_doPause_closure0: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0.frog;
    t1.reset$0(t1);
  },
  "+call:0:0": 0
},

Program_doMove_closure: {"": "Closure;box_0,cmd_1,s_2",
  call$0: function() {
    Q.Sounds_playSound(this.cmd_1);
    this.box_0.target_0.label = this.s_2;
  },
  "+call:0:0": 0
},

Program_doMove_closure0: {"": "Closure;this_3,preview_4",
  call$0: function() {
    this.this_3.doPause$1(this.preview_4);
  },
  "+call:0:0": 0
},

Program_doMove_closure1: {"": "Closure;box_0,preview_5",
  call$1: function(value) {
    var t1, t2, beetle;
    t1 = this.box_0;
    t1.target_0.forward$1(value);
    t2 = t1.target_0;
    beetle = t2.pond.getTurtleHere$2(t2, C.Type_YyT);
    if (beetle != null)
      beetle.spook$0();
    if (!this.preview_5 && $.FROGS_PUSH)
      t1.target_0.push$1(value);
  },
  "+call:1:0": 0,
  $is_args1: true
},

Program_doTurn_closure: {"": "Closure;box_0",
  call$0: function() {
    var t1, t2;
    t1 = this.box_0;
    t2 = t1.target_0;
    t1 = t1.s_1;
    t2.label = t1;
    return t1;
  },
  "+call:0:0": 0
},

Program_doTurn_closure0: {"": "Closure;box_0",
  call$1: function(value) {
    var t1 = this.box_0.target_0;
    t1.heading = t1.heading - J.$div$n(value, 180) * 3.141592653589793;
    return;
  },
  "+call:1:0": 0,
  $is_args1: true
},

Program_doTurn_closure1: {"": "Closure;this_1,preview_2",
  call$0: function() {
    this.this_1.doPause$1(this.preview_2);
  },
  "+call:0:0": 0
},

Program_doSpin_closure: {"": "Closure;this_0,s_1",
  call$0: function() {
    var t1 = this.s_1;
    this.this_0.frog.label = t1;
    return t1;
  },
  "+call:0:0": 0
},

Program_doSpin_closure0: {"": "Closure;this_2",
  call$1: function(value) {
    var t1 = this.this_2.frog;
    t1.heading = t1.heading - J.$div$n(value, 180) * 3.141592653589793;
    return;
  },
  "+call:1:0": 0,
  $is_args1: true
},

Program_doSpin_closure1: {"": "Closure;this_3,preview_4",
  call$0: function() {
    this.this_3.doPause$1(this.preview_4);
  },
  "+call:0:0": 0
},

Program_doSound_closure: {"": "Closure;this_0,cmd_1",
  call$0: function() {
    var t1, t2;
    t1 = this.cmd_1;
    Q.Sounds_playSound(t1);
    t2 = this.this_0;
    t2.frog.label = t1;
    t2.frog._sound = 0.5;
  },
  "+call:0:0": 0
},

Program_doSound_closure0: {"": "Closure;this_2,preview_3",
  call$0: function() {
    var t1 = this.this_2;
    t1.frog._sound = -1;
    t1.doPause$1(this.preview_3);
  },
  "+call:0:0": 0
},

Program_doSound_closure1: {"": "Closure;this_4",
  call$1: function(value) {
    var t1, t2;
    t1 = this.this_4.frog;
    t2 = t1._sound;
    if (typeof value !== "number")
      throw H.iae(value);
    t2 += value;
    t1._sound = t2;
    return t2;
  },
  "+call:1:0": 0,
  $is_args1: true
},

Program_doEat_closure: {"": "Closure;this_0,cmd_1",
  call$0: function() {
    var t1 = this.this_0;
    t1.frog.label = this.cmd_1;
    t1.frog._tongue = 0;
  },
  "+call:0:0": 0
},

Program_doEat_closure0: {"": "Closure;this_2,preview_3",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.this_2;
    t2 = t1.frog;
    t3 = t2._tongue;
    if (typeof value !== "number")
      throw H.iae(value);
    t2._tongue = t3 + value;
    if (!this.preview_3)
      t1.frog.eatFly$0();
    if (t1.frog._tongue === 1)
      Q.Sounds_playSound("swoosh");
  },
  "+call:1:0": 0,
  $is_args1: true
},

Program_doEat_closure1: {"": "Closure;this_4,preview_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.frog.prey != null) {
      Q.Sounds_playSound("gulp");
      t2 = t1.frog;
      t2.pond.captureFly$2(t2, t2.prey);
      t1.frog.prey = null;
    }
    t1.doPause$1(this.preview_5);
  },
  "+call:0:0": 0
},

Program_doRepeat_closure: {"": "Closure;this_0,cmd_1,param_2",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0.frog;
    t2 = this.cmd_1 + " " + H.S(this.param_2);
    t1.label = t2;
    return t2;
  },
  "+call:0:0": 0
},

Program_doRepeat_closure0: {"": "Closure;this_3,preview_4",
  call$0: function() {
    this.this_3.doPause$1(this.preview_4);
  },
  "+call:0:0": 0
},

Program_doIf_closure: {"": "Closure;this_0,cmd_1,param_2",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0.frog;
    t2 = this.cmd_1 + " " + H.S(this.param_2);
    t1.label = t2;
    return t2;
  },
  "+call:0:0": 0
},

Program_doIf_closure0: {"": "Closure;this_3,preview_4",
  call$0: function() {
    this.this_3.doPause$1(this.preview_4);
  },
  "+call:0:0": 0
},

Program_doWait_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    t1.frog.label = null;
    t1.frog._vision = 0;
  },
  "+call:0:0": 0
},

Program_doDie_closure: {"": "Closure;this_0",
  call$1: function(value) {
    var t1, t2;
    t1 = this.this_0.frog;
    t2 = t1.opacity;
    if (typeof value !== "number")
      throw H.iae(value);
    t2 += value;
    t1.opacity = t2;
    return t2;
  },
  "+call:1:0": 0,
  $is_args1: true
},

Program_doDie_closure0: {"": "Closure;this_1,preview_2",
  call$0: function() {
    if (!this.preview_2)
      this.this_1.frog.dead = true;
  },
  "+call:0:0": 0
},

Program_doHatch_closure: {"": "Closure;this_1,cmd_2",
  call$0: function() {
    var t1 = this.cmd_2;
    this.this_1.frog.label = t1;
    return t1;
  },
  "+call:0:0": 0
},

Program_doHatch_closure0: {"": "Closure;box_0,this_3,preview_4",
  call$0: function() {
    this.this_3.doPause$1(this.preview_4);
    var t1 = this.box_0.baby_0.get$program();
    if (t1.curr == null) {
      t1.curr = t1.start;
      t1.running = false;
    }
    t1.running = true;
  },
  "+call:0:0": 0
},

Program_doHatch_closure1: {"": "Closure;box_0",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0.baby_0;
    t2 = J.getInterceptor$x(t1);
    t3 = t2.get$size(t1);
    if (typeof t3 !== "number")
      throw t3.$add();
    if (typeof value !== "number")
      throw H.iae(value);
    t3 += value;
    t2.set$size(t1, t3);
    return t3;
  },
  "+call:1:0": 0,
  $is_args1: true
},

TouchManager: {"": "Object;mdown,parent,layers,touch_bindings",
  findTouchTarget$1: function(tp) {
    var t1, i, t;
    for (t1 = this.layers, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t = t1[i].findTouchTarget$1(tp);
      if (t != null) {
        if (i >= t1.length)
          throw H.ioore(t1, i);
        return new Q.TouchBinding(t1[i], t);
      }
    }
    return;
  },
  registerEvents$1: function(element) {
    var t1, t2, t3;
    this.parent = element;
    if (J.indexOf$1$asx(J.get$search$x(C.Window_methods.get$location(window)), "debug=true") > 0) {
      P.print("Enabling mouse events");
      element.toString;
      t1 = new W._ElementEventStreamImpl(element, C.EventStreamProvider_mousedown._eventType, false);
      H.setRuntimeTypeInfo(t1, [null]);
      t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Q.TouchManager_registerEvents_closure(this)), t1._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t2._tryResume$0();
      t2 = new W._ElementEventStreamImpl(element, C.EventStreamProvider_mouseup._eventType, false);
      H.setRuntimeTypeInfo(t2, [null]);
      t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new Q.TouchManager_registerEvents_closure0(this)), t2._useCapture);
      H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
      t1._tryResume$0();
      t1 = new W._ElementEventStreamImpl(element, C.EventStreamProvider_mousemove._eventType, false);
      H.setRuntimeTypeInfo(t1, [null]);
      t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Q.TouchManager_registerEvents_closure1(this)), t1._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t2._tryResume$0();
    }
    element.toString;
    t1 = new W._ElementEventStreamImpl(element, C.EventStreamProvider_touchstart._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Q.TouchManager_registerEvents_closure2(this)), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = C.EventStreamProvider_touchmove._eventType;
    t1 = new W._ElementEventStreamImpl(element, t2, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t3 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Q.TouchManager_registerEvents_closure3(this)), t1._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t3._tryResume$0();
    t3 = new W._ElementEventStreamImpl(element, C.EventStreamProvider_touchend._eventType, false);
    H.setRuntimeTypeInfo(t3, [null]);
    t1 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(new Q.TouchManager_registerEvents_closure4(this)), t3._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t1._tryResume$0();
    t2 = new W._EventStream(document, t2, false);
    H.setRuntimeTypeInfo(t2, [null]);
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new Q.TouchManager_registerEvents_closure5()), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
  },
  _mouseUp$1: function(evt) {
    var t1, target;
    t1 = this.touch_bindings;
    target = t1.$index(t1, -1);
    if (target != null)
      target.touchUp$1(Q.Contact$fromMouse(evt));
    t1.$indexSet(t1, -1, null);
    this.mdown = false;
  },
  _mouseDown$1: function(evt) {
    var t, target, t1;
    t = Q.Contact$fromMouse(evt);
    target = this.findTouchTarget$1(t);
    if (target != null) {
      target.layer.iform.transformContact$1(t);
      if (target.touchable.touchDown$1(t)) {
        t1 = this.touch_bindings;
        t1.$indexSet(t1, -1, target);
      }
    }
    this.mdown = true;
  },
  _mouseMove$1: function(evt) {
    var t, t1, target;
    if (this.mdown) {
      t = Q.Contact$fromMouse(evt);
      t1 = this.touch_bindings;
      target = t1.$index(t1, -1);
      if (target != null)
        target.touchDrag$1(t);
      else {
        target = this.findTouchTarget$1(t);
        if (target != null) {
          target.layer.iform.transformContact$1(t);
          target.touchable.touchSlide$1(t);
        }
      }
    }
  },
  _touchDown$1: function(tframe) {
    var t1, t2, t, target;
    for (t1 = J.get$iterator$ax(J.get$changedTouches$x(tframe)), t2 = this.touch_bindings; t1.moveNext$0();) {
      t = Q.Contact$fromTouch(t1._html$_current, this.parent);
      target = this.findTouchTarget$1(t);
      if (target != null) {
        target.layer.iform.transformContact$1(t);
        if (target.touchable.touchDown$1(t))
          t2.$indexSet(t2, t.id, target);
      }
    }
  },
  _touchUp$1: function(tframe) {
    var t1, t2, t3, t, target;
    for (t1 = J.getInterceptor$x(tframe), t2 = J.get$iterator$ax(t1.get$changedTouches(tframe)), t3 = this.touch_bindings; t2.moveNext$0();) {
      t = Q.Contact$fromTouch(t2._html$_current, this.parent);
      target = t3.$index(t3, t.id);
      if (target != null) {
        target.touchUp$1(t);
        t3.$indexSet(t3, t.id, null);
      }
    }
    if (t1.get$touches(tframe).length === 0)
      t3.clear$0(t3);
  },
  _touchDrag$1: function(tframe) {
    var t1, t2, t, target;
    for (t1 = J.get$iterator$ax(J.get$changedTouches$x(tframe)), t2 = this.touch_bindings; t1.moveNext$0();) {
      t = Q.Contact$fromTouch(t1._html$_current, this.parent);
      target = t2.$index(t2, t.id);
      if (target != null)
        target.touchDrag$1(t);
      else {
        target = this.findTouchTarget$1(t);
        if (target != null) {
          target.layer.iform.transformContact$1(t);
          target.touchable.touchSlide$1(t);
        }
      }
    }
  }
},

TouchManager_registerEvents_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._mouseDown$1(e);
  },
  "+call:1:0": 0,
  $is_args1: true
},

TouchManager_registerEvents_closure0: {"": "Closure;this_1",
  call$1: function(e) {
    return this.this_1._mouseUp$1(e);
  },
  "+call:1:0": 0,
  $is_args1: true
},

TouchManager_registerEvents_closure1: {"": "Closure;this_2",
  call$1: function(e) {
    return this.this_2._mouseMove$1(e);
  },
  "+call:1:0": 0,
  $is_args1: true
},

TouchManager_registerEvents_closure2: {"": "Closure;this_3",
  call$1: function(e) {
    return this.this_3._touchDown$1(e);
  },
  "+call:1:0": 0,
  $is_args1: true
},

TouchManager_registerEvents_closure3: {"": "Closure;this_4",
  call$1: function(e) {
    return this.this_4._touchDrag$1(e);
  },
  "+call:1:0": 0,
  $is_args1: true
},

TouchManager_registerEvents_closure4: {"": "Closure;this_5",
  call$1: function(e) {
    return this.this_5._touchUp$1(e);
  },
  "+call:1:0": 0,
  $is_args1: true
},

TouchManager_registerEvents_closure5: {"": "Closure;",
  call$1: function(e) {
    return J.preventDefault$0$x(e);
  },
  "+call:1:0": 0,
  $is_args1: true
},

TouchLayer: {"": "Object;",
  findTouchTarget$1: function(tp) {
    var c, t1, i;
    c = Q.Contact$copy(tp);
    this.iform.transformContact$1(c);
    for (t1 = this.touchables, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      if (t1[i].containsTouch$1(c)) {
        if (i >= t1.length)
          throw H.ioore(t1, i);
        return t1[i];
      }
    }
    return;
  },
  objectToWorldX$2: function(x, y) {
    return this.xform.transformX$2(x, y);
  },
  objectToWorldY$2: function(x, y) {
    return this.xform.transformY$2(x, y);
  },
  objectToWorldTheta$1: function(theta) {
    var t1 = this.xform.xform;
    if (3 >= t1.length)
      throw H.ioore(t1, 3);
    t1 = t1[3];
    if (typeof t1 !== "number")
      H.throwExpression(new P.ArgumentError(t1));
    return theta + Math.asin(t1);
  }
},

TouchBinding: {"": "Object;layer,touchable",
  touchDown$1: function(c) {
    this.layer.iform.transformContact$1(c);
    return this.touchable.touchDown$1(c);
  },
  touchUp$1: function(c) {
    this.layer.iform.transformContact$1(c);
    this.touchable.touchUp$1(c);
  },
  touchDrag$1: function(c) {
    this.layer.iform.transformContact$1(c);
    this.touchable.touchDrag$1(c);
  },
  touchSlide$1: function(c) {
    this.layer.iform.transformContact$1(c);
    this.touchable.touchSlide$1(c);
  }
},

Touchable: {"": "Object;"},

Contact: {"": "Object;id,tagId,touchX,touchY,tag,up,down,drag,finger",
  Contact$fromMouse$1: function(mouse) {
    var t1, t2;
    this.id = -1;
    t1 = J.getInterceptor$x(mouse);
    t2 = t1.get$offset(mouse);
    t2 = t2.get$x(t2);
    t2.toString;
    this.touchX = t2;
    t1 = t1.get$offset(mouse);
    t1 = t1.get$y(t1);
    t1.toString;
    this.touchY = t1;
    this.finger = true;
  },
  Contact$copy$1: function(c) {
    this.id = c.id;
    this.tagId = c.tagId;
    this.touchX = c.touchX;
    this.touchY = c.touchY;
    this.up = c.up;
    this.down = c.down;
    this.drag = c.drag;
    this.finger = c.finger;
  },
  Contact$fromTouch$2: function(touch, $parent) {
    var left, $top, box, t1, t2;
    left = window.pageXOffset;
    $top = window.pageYOffset;
    if ($parent != null) {
      box = $parent.getBoundingClientRect();
      t1 = J.getInterceptor$x(box);
      t2 = t1.get$left(box);
      if (typeof left !== "number")
        throw left.$add();
      if (typeof t2 !== "number")
        throw H.iae(t2);
      left += t2;
      t1 = t1.get$top(box);
      if (typeof $top !== "number")
        throw $top.$add();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      $top += t1;
    }
    t1 = J.getInterceptor$x(touch);
    this.id = t1.get$identifier(touch);
    t2 = t1.get$page(touch).x;
    t2.toString;
    if (typeof t2 !== "number")
      throw t2.$sub();
    if (typeof left !== "number")
      throw H.iae(left);
    this.touchX = t2 - left;
    t1 = t1.get$page(touch).y;
    t1.toString;
    if (typeof t1 !== "number")
      throw t1.$sub();
    if (typeof $top !== "number")
      throw H.iae($top);
    this.touchY = t1 - $top;
    this.finger = true;
  },
  static: {
Contact$fromMouse: function(mouse) {
  var t1 = new Q.Contact(null, -1, 0, 0, false, false, false, false, false);
  t1.Contact$fromMouse$1(mouse);
  return t1;
},

Contact$fromTouch: function(touch, $parent) {
  var t1 = new Q.Contact(null, -1, 0, 0, false, false, false, false, false);
  t1.Contact$fromTouch$2(touch, $parent);
  return t1;
},

Contact$copy: function(c) {
  var t1 = new Q.Contact(null, -1, 0, 0, false, false, false, false, false);
  t1.Contact$copy$1(c);
  return t1;
}}

},

Turtle: {"": "Object;x*,y*,size*,heading@,opacity@,dead<,img>,variables<",
  copy$1: function(other) {
    var t1, t2, t3, t4, key;
    t1 = J.getInterceptor$x(other);
    this.x = t1.get$x(other);
    this.y = t1.get$y(other);
    this.size = t1.get$size(other);
    this.heading = other.get$heading();
    this.opacity = other.get$opacity();
    J.set$src$x(this.img, J.get$src$x(t1.get$img(other)));
    for (t2 = other.get$variables(), t3 = new P.LinkedHashMapKeyIterable(t2), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_LinkedHashMap", 0)]), t2 = t3._map, t4 = t2._modifications, t4 = new P.LinkedHashMapKeyIterator(t2, t4, null, null), H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(t3, "LinkedHashMapKeyIterable", 0)]), t4._cell = t4._map._first, t3 = this.variables; t4.moveNext$0();) {
      key = t4._collection$_current;
      t3.$indexSet(t3, key, t1.$index(other, key));
    }
  },
  move$2: function(dx, dy) {
    this.x = J.$add$ns(this.x, dx);
    this.y = J.$add$ns(this.y, dy);
  },
  forward$1: function(distance) {
    var t1, t2;
    t1 = this.x;
    t2 = this.heading;
    t2 = Math.sin(t2);
    if (typeof distance !== "number")
      throw H.iae(distance);
    this.x = J.$add$ns(t1, t2 * distance);
    t2 = this.y;
    t1 = this.heading;
    this.y = J.$sub$n(t2, Math.cos(t1) * distance);
  },
  left$1: function(_, degrees) {
    this.heading = this.heading - J.$div$n(degrees, 180) * 3.141592653589793;
  },
  die$0: function() {
    this.dead = true;
  },
  pulse$0: function() {
    var t1 = new Q.Tween(null, 0, 0, 0, 0, true, 1, null, null, null, null);
    t1.segments = [];
    this.tween = t1;
    this.tween.$function = 1;
    this.tween.duration = 10;
    this.tween.repeat = 3;
    this.tween.ondelta = new Q.Turtle_pulse_closure(this);
    this.tween.addControlPoint$2(1, 0);
    this.tween.addControlPoint$2(0, 0.5);
    this.tween.addControlPoint$2(1, 1);
  },
  overlapsPoint$3: function(tx, ty, tw) {
    return Q.distance(tx, ty, this.x, this.y) < this.get$radius() + tw / 2;
  },
  overlapsPoint$2: function(tx, ty) {
    return this.overlapsPoint$3(tx, ty, 0);
  },
  overlapsTurtle$1: function(other) {
    return Q.distance(other.x, other.y, this.x, this.y) < this.get$radius() + other.get$radius();
  },
  get$width: function(_) {
    return J.$mul$n(J.get$width$x(this.img), this.size);
  },
  get$height: function(_) {
    return J.$mul$n(J.get$height$x(this.img), this.size);
  },
  get$radius: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.img;
    t2 = J.getInterceptor$x(t1);
    t3 = J.$mul$n(t2.get$width(t1), this.size);
    t4 = J.$mul$n(t2.get$height(t1), this.size);
    t5 = this.size;
    return t3 < t4 ? J.$mul$n(t2.get$width(t1), t5) / 2 : J.$mul$n(t2.get$height(t1), t5) / 2;
  },
  angleBetween$1: function(b) {
    var t1, t2, theta;
    t1 = J.getInterceptor$x(b);
    t2 = J.$sub$n(this.x, t1.get$x(b));
    t1 = J.$sub$n(this.y, t1.get$y(b));
    theta = -Math.atan2(t2, t1) / 3.141592653589793 * 180;
    if (theta < 0)
      theta += 360;
    return C.JSNumber_methods.$mod(this.heading / 3.141592653589793 * 180, 360) - theta;
  },
  $index: function(_, key) {
    var t1 = this.variables;
    return t1.$index(t1, key);
  },
  $indexSet: function(_, key, value) {
    var t1 = this.variables;
    t1.$indexSet(t1, key, value);
  },
  draw$1: function(ctx) {
    var t1, t2;
    t1 = J.getInterceptor$x(ctx);
    t1.save$0(ctx);
    t2 = this.opacity;
    if (t2 < 1)
      t1.set$globalAlpha(ctx, t2);
    t1.translate$2(ctx, this.x, this.y);
    t1.rotate$1(ctx, this.heading);
    this._drawLocal$1(ctx);
    t1.set$globalAlpha(ctx, 1);
    t1.restore$0(ctx);
  },
  erase$1: function(ctx) {
    var t1, t2, w, h;
    t1 = this.img;
    t2 = J.getInterceptor$x(t1);
    w = J.$mul$n(t2.get$width(t1), this.size) * 1.4;
    h = J.$mul$n(t2.get$height(t1), this.size) * 1.4;
    J.clearRect$4$x(ctx, J.$sub$n(this.x, w / 2), J.$sub$n(this.y, h / 2), w, h);
  }
},

Turtle_pulse_closure: {"": "Closure;this_0",
  call$1: function(value) {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.opacity;
    if (typeof value !== "number")
      throw H.iae(value);
    t2 += value;
    t1.opacity = t2;
    return t2;
  },
  "+call:1:0": 0,
  $is_args1: true
},

Tween: {"": "Object;segments,delay,duration,count,$function,running,repeat,ontick,ondelta,onend,onstart",
  ondelta$1: function(arg0) {
    return this.ondelta.call$1(arg0);
  },
  onend$0: function() {
    return this.onend.call$0();
  },
  onstart$0: function() {
    return this.onstart.call$0();
  },
  play$0: function(_) {
    this.count = 0;
    this.running = true;
    this.animate$0();
  },
  isTweening$0: function() {
    var t1 = this.repeat;
    if (t1 === -1)
      return true;
    else
      return this.count <= this.duration * t1 + this.delay;
  },
  addControlPoint$2: function(value, time) {
    var t1;
    this.segments.push(new Q.ControlPoint(value, time));
    t1 = this.segments;
    H.IterableMixinWorkaround_sortList(t1, new Q.Tween_addControlPoint_closure());
  },
  getValue$0: function() {
    var t, t1, len, prev, t2, next, curr, y, a;
    t = this.getTime$0();
    t1 = this.segments;
    len = t1.length;
    if (len === 0)
      return 0;
    if (len === 1)
      if (0 >= len)
        throw H.ioore(t1, 0);
    if (0 >= len)
      throw H.ioore(t1, 0);
    prev = t1[0];
    t2 = len - 1;
    if (t2 < 0)
      throw H.ioore(t1, t2);
    next = t1[t2];
    for (t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0(); prev = curr) {
      curr = t2._current;
      if (curr.get$time() <= t)
        ;
      else {
        next = curr;
        break;
      }
    }
    t1 = prev.get$time();
    t2 = next.get$time();
    if (t1 >= t2)
      return J.get$value$x(next);
    y = this.getY$1(P.min(1, P.max((t - t1) / (t2 - t1), 0)));
    a = J.get$value$x(prev);
    t1 = J.$sub$n(J.get$value$x(next), a);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (typeof a !== "number")
      throw H.iae(a);
    return y * t1 + a;
  },
  getTime$0: function() {
    var t = (this.count - this.delay) / this.duration;
    if (t < 0)
      return 0;
    else if (t > 1 && this.repeat !== 1)
      return t - C.JSNumber_methods.toInt$0(Math.floor(t));
    else
      return t;
  },
  getY$1: function(time) {
    var x, t1;
    switch (this.$function) {
      case 0:
        return time;
      case 1:
        x = time * 3.141592653589793 * 0.5;
        t1 = Math.sin(x);
        return t1 * Math.sin(x);
      case 2:
        return 1 - Math.exp(time * -5);
      default:
        return time;
    }
  },
  animate$0: function() {
    var a, b;
    if (!this.running)
      return;
    if (this.isTweening$0()) {
      if (this.delay === 0 && this.count === 0)
        if (this.onstart != null)
          this.onstart$0();
      a = this.getValue$0();
      this.count = this.count + 1;
      b = this.getValue$0();
      if (this.delay === this.count)
        if (this.onstart != null)
          this.onstart$0();
      if (this.isTweening$0() && this.count >= this.delay)
        if (this.ondelta != null)
          this.ondelta$1(J.$sub$n(b, a));
      if (!this.isTweening$0())
        if (this.onend != null)
          this.onend$0();
    }
  }
},

Tween_addControlPoint_closure: {"": "Closure;",
  call$2: function(a, b) {
    return a.get$time() - b.get$time();
  },
  "+call:2:0": 0,
  $is_args2: true
},

ControlPoint: {"": "Object;value>,time<"}},
1],
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = object[init.dispatchPropertyName];
  if (record == null)
    if ($.initNativeDispatchFlag == null) {
      H.initNativeDispatch();
      record = object[init.dispatchPropertyName];
    }
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = H.lookupDispatchRecord(object);
  if (record == null)
    return C.C_UnknownJavaScriptObject;
  Object.defineProperty(Object.getPrototypeOf(object), init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return J.getNativeInterceptor(object);
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return H.Primitives_objectToString(receiver);
  },
  get$runtimeType: function(receiver) {
    return new H.TypeImpl(H.getRuntimeTypeString(receiver), null);
  }
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  get$runtimeType: function(receiver) {
    return C.Type_EsU;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  get$runtimeType: function(receiver) {
    return C.Type_eZO;
  }
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  },
  get$runtimeType: function(_) {
    return C.Type_XXD;
  }
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("add"));
    receiver.push(value);
  },
  removeAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("removeAt"));
    return receiver.splice(index, 1)[0];
  },
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("remove"));
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], element)) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = new H.ListIterator(collection, 0, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(collection, "JSArray", 0)]); t1.moveNext$0();)
      this.add$1(receiver, t1._current);
  },
  forEach$1: function(receiver, f) {
    return H.IterableMixinWorkaround_forEach(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  indexOf$2: function(receiver, element, start) {
    return H.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  get$iterator: function(receiver) {
    var t1 = new H.ListIterator(receiver, receiver.length, 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "JSArray", 0)]);
    return t1;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw H.wrapException(new P.ArgumentError(newLength));
    if (newLength < 0)
      throw H.wrapException(P.RangeError$value(newLength));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      H.throwExpression(P.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: true,
  $asList: null,
  $isList: true,
  $isEfficientLength: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  toInt$0: function(receiver) {
    var t1;
    if (receiver >= -2147483648 && receiver <= 2147483647)
      return receiver | 0;
    if (isFinite(receiver)) {
      t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
      return t1 + 0;
    }
    throw H.wrapException(P.UnsupportedError$('' + receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
      return receiver / other | 0;
    else
      return this._slowTdiv$1(receiver, other);
  },
  _slowTdiv$1: function(receiver, other) {
    return this.toInt$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(new P.ArgumentError(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver >= other;
  },
  $isnum: true,
  static: {
"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32",
}

},

JSInt: {"": "int/JSNumber;",
  get$runtimeType: function(receiver) {
    return C.Type_SnA;
  },
  $isdouble: true,
  $isnum: true,
  $isint: true
},

JSDouble: {"": "double/JSNumber;",
  get$runtimeType: function(receiver) {
    return C.Type_qq1;
  },
  $isdouble: true,
  $isnum: true
},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    if (index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  matchAsPrefix$2: function(receiver, string, start) {
    var t1, t2, i, t3;
    if (start < 0 || start > string.length)
      throw H.wrapException(P.RangeError$range(start, 0, string.length));
    t1 = receiver.length;
    t2 = string.length;
    if (start + t1 > t2)
      return;
    for (i = 0; i < t1; ++i) {
      t3 = start + i;
      if (t3 < 0)
        H.throwExpression(P.RangeError$value(t3));
      if (t3 >= t2)
        H.throwExpression(P.RangeError$value(t3));
      t3 = string.charCodeAt(t3);
      if (i >= t1)
        H.throwExpression(P.RangeError$value(i));
      if (t3 !== receiver.charCodeAt(i))
        return;
    }
    return new H.StringMatch(start, string, receiver);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  startsWith$2: function(receiver, pattern, index) {
    var endIndex;
    if (index < 0 || index > receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    if (typeof pattern === "string") {
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern == receiver.substring(index, endIndex);
    }
    return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
  },
  startsWith$1: function($receiver, pattern) {
    return this.startsWith$2($receiver, pattern, 0);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    if (typeof startIndex !== "number")
      H.throwExpression(P.ArgumentError$(startIndex));
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      H.throwExpression(P.ArgumentError$(endIndex));
    t1 = J.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0))
      throw H.wrapException(P.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex))
      throw H.wrapException(P.RangeError$value(startIndex));
    if (J.$gt$n(endIndex, receiver.length))
      throw H.wrapException(P.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  indexOf$2: function(receiver, pattern, start) {
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw H.wrapException(new P.ArgumentError(start));
    if (start < 0 || start > receiver.length)
      throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
    return receiver.indexOf(pattern, start);
  },
  indexOf$1: function($receiver, pattern) {
    return this.indexOf$2($receiver, pattern, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    if (startIndex < 0 || startIndex > receiver.length)
      throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
    return H.stringContainsUnchecked(receiver, other, startIndex);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$runtimeType: function(receiver) {
    return C.Type_Ejg;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
}}],
["_isolate_helper", "dart:_isolate_helper", , H, {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext, t1;
  $globalState = H._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = H._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  t1 = J.getInterceptor(entry);
  if (!!t1.$is_args1)
    rootContext.eval$1(new H.startRootIsolate_closure(entry));
  else if (!!t1.$is_args2)
    rootContext.eval$1(new H.startRootIsolate_closure0(entry));
  else
    rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript = init.currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  if (typeof version == "function" && typeof os == "object" && "system" in os)
    return H.IsolateNatives_computeThisScriptD8();
  if (typeof version == "function" && typeof system == "function")
    return thisFilename();
  return;
},

IsolateNatives_computeThisScriptD8: function() {
  var stack, matches;
  stack = new Error().stack;
  if (stack == null) {
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
    if (stack == null)
      throw H.wrapException(P.UnsupportedError$("No stack trace"));
  }
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, args, message, isSpawnUri, replyTo, context, t2;
  msg = H._deserializeMessage(e.data);
  t1 = J.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : init.globalFunctions[functionName];
      args = t1.$index(msg, "args");
      message = H._deserializeMessage(t1.$index(msg, "msg"));
      isSpawnUri = t1.$index(msg, "isSpawnUri");
      replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
      context = H._IsolateContext$();
      $globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), t1.$index(msg, "isSpawnUri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        t1.$index(msg, "port").send$1(t1.$index(msg, "msg"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      H.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      } else
        P.print(t1.$index(msg, "msg"));
      break;
    case "error":
      throw H.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1.toString;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      H.unwrapException(exception);
      trace = new H._StackTrace(exception, null);
      throw H.wrapException(P.Exception_Exception(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, replyTo) {
  var t1;
  H.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = H.ReceivePortImpl$();
  t1 = $.lazyPort;
  t1.toString;
  replyTo.send$1(["spawned", new H._NativeJsSendPort(t1, $globalState.currentContext.id)]);
  if (isSpawnUri !== true)
    topLevel.call$1(message);
  else {
    t1 = J.getInterceptor(topLevel);
    if (!!t1.$is_args2)
      topLevel.call$2(args, message);
    else if (!!t1.$is_args1)
      topLevel.call$1(args);
    else
      topLevel.call$0();
  }
},

IsolateNatives__spawnWorker: function(functionName, uri, args, message, isSpawnUri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(replyPort), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "functionName", functionName], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
},

_waitForPendingPorts: function(message, callback) {
  var finder = H._PendingSendPortFinder$();
  finder.traverse$1(message);
  P.Future_wait(finder.ports).then$1(new H._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new H._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

startRootIsolate_closure: {"": "Closure;entry_0",
  call$0: function() {
    this.entry_0.call$1([]);
  },
  "+call:0:0": 0
},

startRootIsolate_closure0: {"": "Closure;entry_1",
  call$0: function() {
    this.entry_1.call$2([], null);
  },
  "+call:0:0": 0
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { H.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
    this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
    this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = new H._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id,ports,isolateStatics<",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        $ = old.get$isolateStatics();
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._collection$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, P.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  static: {
_IsolateContext$: function() {
  var t1 = new H._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._collection$_length === 0)
      throw H.wrapException(P.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
        t1 = t1.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new H._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        trace = new H._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    P.Timer_Timer(C.Duration_0, this);
  },
  "+call:0:0": 0
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,args_1,message_2,isSpawnUri_3,replyTo_4",
  call$0: function() {
    H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.replyTo_4);
  },
  "+call:0:0": 0
},

_BaseSendPort: {"": "Object;", $isSendPort: true},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort,_isolateId",
  send$2: function(message, replyTo) {
    H._waitForPendingPorts(message, new H._NativeJsSendPort_send_closure(this, message));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = $globalState.isolates;
    t3 = this.this_1;
    t4 = t3._isolateId;
    isolate = t2.$index(t2, t4);
    if (isolate == null)
      return;
    if ((t3._receivePort.get$_controller()._state & 4) !== 0)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t4;
    msg = this.message_2;
    t1.msg_0 = msg;
    if (shouldSerialize)
      t1.msg_0 = H._serializeMessage(t1.msg_0);
    t2 = $globalState.topEventLoop;
    t4 = "receive " + H.S(msg);
    t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send__closure(t1, t3, shouldSerialize), t4));
  },
  "+call:0:0": 0
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_3,shouldSerialize_4",
  call$0: function() {
    var t1, t2;
    t1 = this.this_3._receivePort;
    if ((t1.get$_controller()._state & 4) === 0) {
      if (this.shouldSerialize_4) {
        t2 = this.box_0;
        t2.msg_0 = H._deserializeMessage(t2.msg_0);
      }
      t1 = t1.get$_controller();
      t2 = this.box_0.msg_0;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(t2);
    }
  },
  "+call:0:0": 0
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    H._waitForPendingPorts(message, new H._WorkerSendPort_send_closure(this, message));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort)
      t1 = J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = J.$shl$n(this._workerId, 16);
    t2 = J.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1",
  call$0: function() {
    var t1, workerMessage, t2, manager;
    t1 = this.this_0;
    workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", t1, "msg", this.message_1], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.toString;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1._workerId);
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  },
  "+call:0:0": 0
},

ReceivePortImpl: {"": "Stream;_id<,_controller<",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = this._controller;
    t1.toString;
    t1 = new P._ControllerStream(t1);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  close$0: function(_) {
    var t1 = this._controller;
    if ((t1._state & 4) !== 0)
      return;
    t1.close$0(t1);
    $globalState.currentContext.unregister$1(this._id);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, H.ReceivePortImpl.prototype.close$0, _receiver, "close$0");
  },
  ReceivePortImpl$0: function() {
    this._controller = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this._id, this);
  },
  $asStream: function() {
    return [null];
  },
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new H.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  "+call:1:0": 0,
  $is_args1: true
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    J.forEach$1$ax(list, this.get$_dispatch());
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    t1 = map.get$values(map);
    t1.forEach$1(t1, this.get$_dispatch());
  },
  visitSendPort$1: function(port) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new H._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new H._PendingSendPortFinder([], new H._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (!!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return new H._NativeJsSendPort(x._receivePort, x._isolateId);
    if (!!x.$is_WorkerSendPort)
      return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = J.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if (J.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new H._NativeJsSendPort(receivePort, isolateId);
    } else
      return new H._WorkerSendPort(managerId, receivePortId, isolateId);
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = P.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if (H._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    return this.visitObject$1(x);
  },
  get$_dispatch: function() {
    return new Q.BoundClosure$1(this, H._MessageTraverser.prototype._dispatch$1, null, "_dispatch$1");
  },
  visitObject$1: function(x) {
    throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = P.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = copy.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(copy, i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new H._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  "+call:2:0": 0,
  $is_args2: true
},

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id, keys;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = map.get$keys();
    keys = this._serializeList$1(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)));
    t1 = map.get$values(map);
    return ["map", id, keys, this._serializeList$1(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)))];
  },
  _serializeList$1: function(list) {
    var t1, len, result, t2, i, t3;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = P.List_List(len, null);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = result.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(result, i);
      result[i] = t3;
    }
    return result;
  }
},

_Deserializer: {"": "Object;",
  deserialize$1: function(x) {
    if (H._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = J.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = J.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw H.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    values = t1.$index(x, 3);
    t1 = J.getInterceptor$asx(keys);
    len = t1.get$length(keys);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = J.getInterceptor$asx(values);
    i = 0;
    for (; i < len; ++i)
      result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
    return result;
  },
  deserializeObject$1: function(x) {
    throw H.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle",
  TimerImpl$periodic$2: function(milliseconds, callback) {
    var t1;
    if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setInterval(H.convertDartClosureToJS(new H.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(P.UnsupportedError$("Periodic timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
  },
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
},

TimerImpl$periodic: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(false, false, null);
  t1.TimerImpl$periodic$2(milliseconds, callback);
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0._handle = null;
    this.callback_1.call$0();
  },
  "+call:0:0": 0
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2._handle = null;
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  },
  "+call:0:0": 0
},

TimerImpl$periodic_closure: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  },
  "+call:0:0": 0
}}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(P.ArgumentError$(value));
  return res;
},

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + H.S(id));
  $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + H.S(id));
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = H.constructorNameFallback(J.getInterceptor(object));
  if (J.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = J.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = H.getRuntimeTypeInfo(object);
  return H.S($name) + H.joinArguments(t1, 0);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, $arguments, t1, t2, i;
  a = [];
  $arguments = H.substitute(codePoints.$asJSArray, H.getRuntimeTypeInfo(codePoints));
  t1 = $arguments == null ? null : $arguments[0];
  t2 = new H.ListIterator(codePoints, codePoints.length, 0, null);
  t2.$builtinTypeInfo = [t1];
  for (; t2.moveNext$0();) {
    i = t2._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(new P.ArgumentError(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSInt_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw H.wrapException(new P.ArgumentError(i));
  }
  return H.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(charCodes, "JSArray", 0)]); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(new P.ArgumentError(i));
    if (i < 0)
      throw H.wrapException(new P.ArgumentError(i));
    if (i > 65535)
      return H.Primitives_stringFromCodePoints(charCodes);
  }
  return H.Primitives__fromCharCodeApply(charCodes);
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  object[key] = value;
},

Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
  var t1, buffer, $arguments, allNamedArguments, listOfNamedArguments, t2, t3, t4, selectorName, jsFunction;
  t1 = {};
  t1.argumentCount_0 = 0;
  buffer = P.StringBuffer$("");
  $arguments = [];
  t1.argumentCount_0 = t1.argumentCount_0 + 0;
  C.JSArray_methods.addAll$1($arguments, positionalArguments);
  if ("call$catchAll" in $function) {
    allNamedArguments = $function.call$catchAll();
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
      namedArguments.forEach$1(namedArguments, new H.Primitives_applyFunction_closure(allNamedArguments));
    listOfNamedArguments = Object.getOwnPropertyNames(allNamedArguments);
    t2 = t1.argumentCount_0;
    t3 = J.getInterceptor$asx(listOfNamedArguments);
    t4 = t3.get$length(listOfNamedArguments);
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t1.argumentCount_0 = t2 + t4;
    t3.forEach$1(listOfNamedArguments, new H.Primitives_applyFunction_closure0(buffer, $arguments, allNamedArguments));
  } else if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
    namedArguments.forEach$1(namedArguments, new H.Primitives_applyFunction_closure1(t1, buffer, $arguments));
  selectorName = "call$" + t1.argumentCount_0 + H.S(buffer);
  jsFunction = $function[selectorName];
  if (jsFunction == null) {
    if (namedArguments == null)
      t1 = [];
    else {
      t1 = namedArguments.get$keys();
      t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    }
    return $function.noSuchMethod$1($function, new H.JSInvocationMirror(C.Symbol_call, selectorName, 0, $arguments, t1, null));
  }
  return jsFunction.apply($function, $arguments);
},

iae: function(argument) {
  throw H.wrapException(P.ArgumentError$(argument));
},

ioore: function(receiver, index) {
  if (receiver == null)
    J.get$length$asx(receiver);
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(P.RangeError$value(index));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

makeLiteralListConst: function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
},

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new H.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = H.S(message) + " (Error " + ieErrorCode + ")";
          return t1.call$1(new H.NullError(t2, null));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1(H.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new H.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new H.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new P.StackOverflowError();
    return t1.call$1(new P.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new P.StackOverflowError();
  return ex;
},

objectHashCode: function(object) {
  if (object == null || typeof object != 'object')
    return J.get$hashCode$(object);
  else
    return H.Primitives_objectHashCode(object);
},

fillLiteralMap: function(keyValuePairs, result) {
  var $length, index, index0, index1;
  $length = keyValuePairs.length;
  for (index = 0; index < $length; index = index1) {
    index0 = index + 1;
    index1 = index0 + 1;
    result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
  else if (t1.$eq(numberOfArguments, 3))
    return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
  else if (t1.$eq(numberOfArguments, 4))
    return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
  else
    throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,$globalState.currentContext,H.invokeClosure$closure.call$7);
  closure.$identity = $function;
  return $function;
},

intTypeCast: function(value) {
  if (typeof value === "number" && Math.floor(value) === value || value == null)
    return value;
  throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), "int"));
},

throwCyclicInit: function(staticName) {
  throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
},

createRuntimeType: function($name) {
  return new H.TypeImpl($name, null);
},

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
  return $arguments == null ? null : $arguments[index];
},

runtimeTypeToString: function(type) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return type[0].builtin$cls + H.joinArguments(type, 1);
  else if (typeof type == "function")
    return type.builtin$cls;
  else if (typeof type === "number" && Math.floor(type) === type)
    return C.JSInt_methods.toString$0(type);
  else
    return;
},

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument);
    str = typeof str === "string" ? str : str;
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

getRuntimeTypeString: function(object) {
  var className = typeof object === "object" && object !== null && object.constructor === Array ? "List" : J.getInterceptor(object).constructor.builtin$cls;
  return className + H.joinArguments(object.$builtinTypeInfo, 0);
},

substitute: function(substitution, $arguments) {
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = H.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = H.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

computeSignature: function(signature, context, contextName) {
  return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
},

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

typeNameInChrome: function(obj) {
  return obj.constructor.name;
},

typeNameInSafari: function(obj) {
  return H.constructorNameFallback(obj);
},

typeNameInOpera: function(obj) {
  return H.constructorNameFallback(obj);
},

typeNameInFirefox: function(obj) {
  var $name = H.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

typeNameInIE: function(obj) {
  var $name = H.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

getFunctionForTypeNameOf: function() {
  var getTagFunction = H.getBaseFunctionForTypeNameOf();
  if (typeof dartExperimentalFixupGetTag == "function")
    return H.applyExperimentalFixup(dartExperimentalFixupGetTag, getTagFunction);
  return getTagFunction;
},

getBaseFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return H.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return H.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return H.typeNameInFirefox$closure;
  else if (userAgent.indexOf("Trident/") !== -1)
    return H.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return H.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return H.typeNameInSafari$closure;
  else
    return H.constructorNameFallback$closure;
},

applyExperimentalFixup: function(fixupJSFunction, originalGetTagDartFunction) {
  return new H.applyExperimentalFixup_newGetTagDartFunction(fixupJSFunction((function(invoke, closure){return function(arg){ return invoke(closure, arg); };})(H.callDartFunctionWith1Arg$closure.call$2, originalGetTagDartFunction)));
},

callDartFunctionWith1Arg: function(fn, arg) {
  return fn.call$1(arg);
},

toStringForNativeObject: function(obj) {
  return "Instance of " + $.get$getTypeNameOf().call$1(obj);
},

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = init.interceptorsByTag;
  return hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
},

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptorClass, secondTag, interceptor;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  tag = $.get$getTypeNameOf().call$1(obj);
  interceptorClass = H.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptorClass == null) {
    secondTag = H.alternateTag(obj, tag);
    if (secondTag != null)
      interceptorClass = H.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptorClass == null)
    return;
  interceptor = interceptorClass.prototype;
  if (init.leafTags[tag] === true)
    return H.makeLeafDispatchRecord(interceptor);
  else
    return J.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null, null);
},

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
  var interceptor = interceptorClass.prototype;
  if (init.leafTags[tag] === true)
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return J.makeDispatchRecord(interceptor, proto, null, null);
},

initNativeDispatch: function() {
  var context, map, tags, i, tag, proto, record;
  $.initNativeDispatchFlag = true;
  if (typeof window != "undefined") {
    context = window;
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (typeof context[tag] == "function") {
        proto = context[tag].prototype;
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null)
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        }
      }
    }
  }
},

stringContainsUnchecked: function(receiver, other, startIndex) {
  return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
},

JSInvocationMirror: {"": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
  get$memberName: function() {
    return this.__js_helper$_memberName;
  },
  get$positionalArguments: function() {
    var t1, argumentCount, list, index;
    if (this._kind === 1)
      return C.List_empty;
    t1 = this._arguments;
    argumentCount = t1.length - this._namedArgumentNames.length;
    if (argumentCount === 0)
      return C.List_empty;
    list = [];
    for (index = 0; index < argumentCount; ++index) {
      if (index >= t1.length)
        throw H.ioore(t1, index);
      list.push(t1[index]);
    }
    return H.makeLiteralListConst(list);
  },
  get$namedArguments: function() {
    var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4;
    if (this._kind !== 0)
      return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t1 = this._namedArgumentNames;
    namedArgumentCount = t1.length;
    t2 = this._arguments;
    namedArgumentsStartIndex = t2.length - namedArgumentCount;
    if (namedArgumentCount === 0)
      return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, null);
    for (i = 0; i < namedArgumentCount; ++i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t3 = t1[i];
      t4 = namedArgumentsStartIndex + i;
      if (t4 < 0 || t4 >= t2.length)
        throw H.ioore(t2, t4);
      map.$indexSet(map, new H.Symbol0(t3), t2[t4]);
    }
    return map;
  },
  static: {
"": "JSInvocationMirror_METHOD,JSInvocationMirror_GETTER,JSInvocationMirror_SETTER",
}

},

Primitives_applyFunction_closure: {"": "Closure;allNamedArguments_1",
  call$2: function(key, argument) {
    this.allNamedArguments_1[key] = argument;
  },
  "+call:2:0": 0,
  $is_args2: true
},

Primitives_applyFunction_closure0: {"": "Closure;buffer_2,arguments_3,allNamedArguments_4",
  call$1: function($name) {
    this.buffer_2.write$1("$" + H.S($name));
    this.arguments_3.push(this.allNamedArguments_4[$name]);
  },
  "+call:1:0": 0,
  $is_args1: true
},

Primitives_applyFunction_closure1: {"": "Closure;box_0,buffer_5,arguments_6",
  call$2: function($name, argument) {
    var t1;
    this.buffer_5.write$1("$" + H.S($name));
    this.arguments_6.push(argument);
    t1 = this.box_0;
    t1.argumentCount_0 = t1.argumentCount_0 + 1;
  },
  "+call:2:0": 0,
  $is_args2: true
},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Error;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + H.S(this._message);
    return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
  },
  $isError: true
},

JsNoSuchMethodError: {"": "Error;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + H.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
  },
  $isError: true,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new H.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Error;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  }
},

unwrapException_saveStackTrace: {"": "Closure;ex_0",
  call$1: function(error) {
    var t1 = J.getInterceptor(error);
    if (typeof error === "object" && error !== null && !!t1.$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  },
  "+call:1:0": 0,
  $is_args1: true
},

_StackTrace: {"": "Object;_exception,_trace",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  "+call:0:0": 0
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  "+call:0:0": 0
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  "+call:0:0": 0
},

invokeClosure_closure2: {"": "Closure;closure_6,arg1_7,arg2_8,arg3_9",
  call$0: function() {
    return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
  },
  "+call:0:0": 0
},

invokeClosure_closure3: {"": "Closure;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
  call$0: function() {
    return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
  },
  "+call:0:0": 0
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

BoundClosure: {"": "Closure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
      return false;
    return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    var t1, receiverHashCode;
    t1 = this._receiver;
    if (t1 == null)
      receiverHashCode = H.Primitives_objectHashCode(this._self);
    else
      receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
    return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
  },
  $isBoundClosure: true
},

CastErrorImplementation: {"": "Error;message",
  toString$0: function(_) {
    return this.message;
  },
  $isError: true,
  static: {
CastErrorImplementation$: function(actualType, expectedType) {
  return new H.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + H.S(expectedType));
}}

},

TypeImpl: {"": "Object;_typeName,_unmangledName",
  toString$0: function(_) {
    var t1, unmangledName, unmangledName0;
    t1 = this._unmangledName;
    if (t1 != null)
      return t1;
    unmangledName = this._typeName;
    unmangledName0 = H.unmangleGlobalNameIfPreservedAnyways(unmangledName);
    unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
    this._unmangledName = unmangledName;
    return unmangledName;
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isTypeImpl && J.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true
},

applyExperimentalFixup_newGetTagDartFunction: {"": "Closure;newGetTagJSFunction_0",
  call$1: function(object) {
    return this.newGetTagJSFunction_0(object);
  },
  "+call:1:0": 0,
  $is_args1: true
},

StringMatch: {"": "Object;start>,input,pattern",
  $index: function(_, g) {
    if (!J.$eq(g, 0))
      H.throwExpression(P.RangeError$value(g));
    return this.pattern;
  }
}}],
["dart._collection.dev", "dart:_collection-dev", , H, {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
  else
    for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
},

Arrays_indexOf: function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw H.ioore(a, i);
    if (J.$eq(a[i], element))
      return i;
  }
  return -1;
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(iterable, "JSArray", 0)]); t1.moveNext$0();)
    f.call$1(t1._current);
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(t1, i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround_sortList: function(list, compare) {
  H.Sort__doSort(list, 0, list.length - 1, compare);
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  if (start < 0 || start > list.length)
    throw H.wrapException(P.RangeError$range(start, 0, list.length));
  if (end < start || end > list.length)
    throw H.wrapException(P.RangeError$range(end, start, list.length));
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length;
  H.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw H.wrapException(new P.ArgumentError(skipCount));
  if (skipCount + $length > from.length)
    throw H.wrapException(P.StateError$("Not enough elements"));
  H.Arrays_copy(from, skipCount, list, start, $length);
},

printToConsole: function(line) {
  if (typeof dartPrint == "function") {
    dartPrint(line);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(line);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(line);
    return;
  }
  throw "Unable to print message: " + String(line);
},

Sort__doSort: function(a, left, right, compare) {
  if (right - left <= 32)
    H.Sort__insertionSort(a, left, right, compare);
  else
    H.Sort__dualPivotQuicksort(a, left, right, compare);
},

Sort__insertionSort: function(a, left, right, compare) {
  var i, t1, el, j, j0;
  for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
        break;
      j0 = j - 1;
      t1.$indexSet(a, j, t1.$index(a, j0));
      j = j0;
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
  sixth = C.JSInt_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = C.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = J.getInterceptor$asx(a);
  el1 = t1.$index(a, index1);
  el2 = t1.$index(a, index2);
  el3 = t1.$index(a, index3);
  el4 = t1.$index(a, index4);
  el5 = t1.$index(a, index5);
  if (J.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1.$indexSet(a, index1, el1);
  t1.$indexSet(a, index3, el3);
  t1.$indexSet(a, index5, el5);
  t1.$indexSet(a, index2, t1.$index(a, left));
  t1.$indexSet(a, index4, t1.$index(a, right));
  less = left + 1;
  great = right - 1;
  if (J.$eq(compare.call$2(el2, el4), 0)) {
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      comp = compare.call$2(ak, el2);
      t2 = J.getInterceptor(comp);
      if (t2.$eq(comp, 0))
        continue;
      if (t2.$lt(comp, 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          comp = compare.call$2(t1.$index(a, great), el2);
          t2 = J.getInterceptor$n(comp);
          if (t2.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            great0 = great - 1;
            if (t2.$lt(comp, 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
    pivots_are_equal = true;
  } else {
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if (J.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    pivots_are_equal = false;
  }
  t2 = less - 1;
  t1.$indexSet(a, left, t1.$index(a, t2));
  t1.$indexSet(a, t2, el2);
  t2 = great + 1;
  t1.$indexSet(a, right, t1.$index(a, t2));
  t1.$indexSet(a, t2, el4);
  H.Sort__doSort(a, left, less - 2, compare);
  H.Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
      ++less;
    for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
      --great;
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if (J.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$eq(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    H.Sort__doSort(a, less, great, compare);
  } else
    H.Sort__doSort(a, less, great, compare);
},

ListIterator: {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    t3 = this._length;
    if (t3 == null ? $length != null : t3 !== $length)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    t3 = this._index;
    if (typeof $length !== "number")
      throw H.iae($length);
    if (t3 >= $length) {
      this._current = null;
      return false;
    }
    this._current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t1 = new H.MappedIterator(null, t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "MappedIterable", 0), H.getRuntimeTypeArgument(this, "MappedIterable", 1)]);
    return t1;
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  static: {
MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
  var t1;
  if (!!iterable.$isEfficientLength) {
    t1 = new H.EfficientLengthMappedIterable(iterable, $function);
    H.setRuntimeTypeInfo(t1, [$S, $T]);
    return t1;
  }
  t1 = new H.MappedIterable(iterable, $function);
  H.setRuntimeTypeInfo(t1, [$S, $T]);
  return t1;
}}

},

EfficientLengthMappedIterable: {"": "MappedIterable;_iterable,_f", $asMappedIterable: null, $isEfficientLength: true},

MappedIterator: {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0()) {
      this._current = this._f$1(t1.get$current());
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  },
  $asIterator: function($S, $T) {
    return [$T];
  }
},

FixedLengthListMixin: {"": "Object;"},

Symbol0: {"": "Object;_name<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isSymbol0 && J.$eq(this._name, other._name);
  },
  get$hashCode: function(_) {
    return 536870911 & 664597 * J.get$hashCode$(this._name);
  },
  toString$0: function(_) {
    return "Symbol(\"" + H.S(this._name) + "\")";
  },
  $isSymbol0: true,
  static: {
"": "Symbol_validationPattern",
}

}}],
["dart._js_names", "dart:_js_names", , H, {
unmangleGlobalNameIfPreservedAnyways: function($name) {
  return init.mangledGlobalNames[$name];
}}],
["dart.async", "dart:async", , P, {
_attachStackTrace: function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
},

_invokeErrorHandler: function(errorHandler, error, stackTrace) {
  var t1 = J.getInterceptor(errorHandler);
  if (!!t1.$is_args2)
    return errorHandler.call$2(error, stackTrace);
  else
    return errorHandler.call$1(error);
},

_registerErrorHandler: function(errorHandler, zone) {
  var t1 = J.getInterceptor(errorHandler);
  zone.toString;
  if (!!t1.$is_args2)
    return errorHandler;
  else
    return errorHandler;
},

getAttachedStackTrace: function(o) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  return t1.$index(t1, o);
},

Future_wait: function(futures) {
  var t1, t2, t3, future, pos, t4, t5, result, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new P.Future_wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new H.ListIterator(futures, futures.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(futures, "JSArray", 0)]); t3.moveNext$0();) {
    future = t3._current;
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    t4 = future.catchError$1(t2);
    t5 = $.Zone__current;
    t5.toString;
    result = new P._Future(0, t5, null, null, new P.Future_wait_closure(t1, pos), null, P._registerErrorHandler(null, t5), null);
    result.$builtinTypeInfo = [null];
    t4._addListener$1(result);
  }
  t2 = t1.remaining_2;
  if (t2 === 0)
    return P._Future$immediate(C.List_empty, null);
  t1.values_1 = P.List_List(t2, null);
  t2 = J.JSArray;
  completer = new P._AsyncCompleter(P._Future$(t2));
  H.setRuntimeTypeInfo(completer, [t2]);
  t1.completer_0 = completer;
  return t1.completer_0.future;
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      H.unwrapException(exception);
      milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  $.get$_asyncCallbacks()._add$1(callback);
  if (!$._callbacksAreEnqueued) {
    P._createTimer(C.Duration_0, P._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

scheduleMicrotask: function(callback) {
  var t1, t2;
  t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    P._scheduleAsyncCallback(callback);
    return;
  }
  t2 = t1.bindCallback$2$runGuarded(callback, true);
  t1.toString;
  P._scheduleAsyncCallback(t2);
},

StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
  var t1;
  if (sync) {
    t1 = new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  } else {
    t1 = new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  }
  return t1;
},

_runGuarded: function(notificationHandler) {
  var result, e, s, t1, t2, exception;
  if (notificationHandler == null)
    return;
  try {
    result = notificationHandler.call$0();
    t1 = result;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture)
      return result;
    return;
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    t1 = $.Zone__current;
    t2 = P._asyncError(e, s);
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, t2, s);
  }

},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error, stackTrace) {
  var t1 = $.Zone__current;
  t1.toString;
  P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
},

_nullDoneHandler: function() {
},

_asyncError: function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if (P.getAttachedStackTrace(error) != null)
    return error;
  P._attachStackTrace(error, stackTrace);
  return error;
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    onError.call$2(P._asyncError(e, s), s);
  }

},

_cancelAndError: function(subscription, future, error, stackTrace) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0();
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
  else
    future._completeError$2(error, stackTrace);
},

_cancelAndErrorClosure: function(subscription, future) {
  return new P._cancelAndErrorClosure_closure(subscription, future);
},

Timer_Timer: function(duration, callback) {
  var t1, milliseconds, t2;
  t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  }
  t2 = t1.bindCallback$2$runGuarded(callback, true);
  t1.toString;
  milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, t2);
},

Timer_Timer$periodic: function(duration, callback) {
  var t1, t2;
  t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    return P._createPeriodicTimer(duration, callback);
  }
  t2 = t1.bindUnaryCallback$2$runGuarded(callback, true);
  t1.toString;
  return P._createPeriodicTimer(duration, t2);
},

_createTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_createPeriodicTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return H.TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
},

_rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
  P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
},

_rootRun: function($self, $parent, zone, f) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$0();
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$0();
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunUnary: function($self, $parent, zone, f, arg) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$1(arg);
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$1(arg);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_AsyncError: {"": "Object;error>,stackTrace<", $isError: true},

Future: {"": "Object;", $isFuture: true},

Future_wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1 = t1.completer_0.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncCompleteError$2(error, null);
    }
    return;
  },
  "+call:1:0": 0,
  $is_args1: true
},

Future_wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2 = t2.future;
      if (t2._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t2._asyncComplete$1(t1);
    }
  },
  "+call:1:0": 0,
  $is_args1: true
},

_Completer: {"": "Object;"},

_AsyncCompleter: {"": "_Completer;future", $as_Completer: null},

_Future: {"": "Object;_state,_zone<,_resultOrListeners,_nextListener@,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
  get$_isComplete: function() {
    return this._state >= 4;
  },
  get$_hasError: function() {
    return this._state === 8;
  },
  set$_isChained: function(value) {
    if (value)
      this._state = 2;
    else
      this._state = 0;
  },
  get$_onValue: function() {
    return this._state === 2 ? null : this._onValueCallback;
  },
  _onValue$1: function(arg0) {
    return this.get$_onValue().call$1(arg0);
  },
  get$_errorTest: function() {
    return this._state === 2 ? null : this._errorTestCallback;
  },
  get$_onError: function() {
    return this._state === 2 ? null : this._onErrorCallback;
  },
  get$_whenCompleteAction: function() {
    return this._state === 2 ? null : this._whenCompleteActionCallback;
  },
  _whenCompleteAction$0: function() {
    return this.get$_whenCompleteAction().call$0();
  },
  then$2$onError: function(f, onError) {
    var result = P._Future$_then(f, onError, null);
    this._addListener$1(result);
    return result;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(onError, test) {
    var result = P._Future$_catchError(onError, test, null);
    this._addListener$1(result);
    return result;
  },
  catchError$1: function(onError) {
    return this.catchError$2$test(onError, null);
  },
  whenComplete$1: function(action) {
    var result = P._Future$_whenComplete(action, H.getRuntimeTypeArgument(this, "_Future", 0));
    this._addListener$1(result);
    return result;
  },
  get$_value: function() {
    return this._resultOrListeners;
  },
  get$_error: function() {
    return this._resultOrListeners;
  },
  _setValue$1: function(value) {
    this._state = 4;
    this._resultOrListeners = value;
  },
  _setError$2: function(error, stackTrace) {
    this._state = 8;
    this._resultOrListeners = new P._AsyncError(error, stackTrace);
  },
  _addListener$1: function(listener) {
    if (this._state >= 4) {
      this._zone.toString;
      P._scheduleAsyncCallback(new P._Future__addListener_closure(this, listener));
    } else {
      listener.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _complete$1: function(value) {
    var t1, listeners;
    t1 = J.getInterceptor(value);
    if (typeof value === "object" && value !== null && !!t1.$isFuture) {
      P._Future__chainFutures(value, this);
      return;
    }
    listeners = this._removeListeners$0();
    this._setValue$1(value);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$2: function(error, stackTrace) {
    var listeners;
    if (stackTrace != null)
      P._attachStackTrace(error, stackTrace);
    listeners = this._state === 2 ? null : this._removeListeners$0();
    this._setError$2(error, stackTrace);
    P._Future__propagateToListeners(this, listeners);
  },
  get$_completeError: function() {
    return new P.BoundClosure$2(this, P._Future.prototype._completeError$2, null, "_completeError$2");
  },
  _asyncComplete$1: function(value) {
    if (this._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncComplete_closure(this, value));
  },
  _asyncCompleteError$2: function(error, stackTrace) {
    if (this._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
  },
  _async$_Future$immediate$1: function(value, $T) {
    this._asyncComplete$1(value);
  },
  $is_Future: true,
  $isFuture: true,
  static: {
"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR",
_Future$: function($T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$immediate: function(value, $T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._async$_Future$immediate$1(value, $T);
  return t1;
},

_Future$_then: function(onValueCallback, onErrorCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, onValueCallback, null, P._registerErrorHandler(onErrorCallback, t1), null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$_catchError: function(onErrorCallback, errorTestCallback, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = P._registerErrorHandler(onErrorCallback, t1);
  $.Zone__current.toString;
  t2 = new P._Future(0, t1, null, null, null, errorTestCallback, t2, null);
  H.setRuntimeTypeInfo(t2, [$T]);
  return t2;
},

_Future$_whenComplete: function(whenCompleteActionCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, null, null, null, whenCompleteActionCallback);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future__chainFutures: function(source, target) {
  var t1;
  target.set$_isChained(true);
  t1 = J.getInterceptor(source);
  if (typeof source === "object" && source !== null && !!t1.$is_Future)
    if (source._state >= 4)
      P._Future__propagateToListeners(source, target);
    else
      source._addListener$1(target);
  else
    source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
},

_Future__propagateMultipleListeners: function(source, listeners) {
  var listeners0;
  do {
    listeners0 = listeners.get$_nextListener();
    listeners.set$_nextListener(null);
    P._Future__propagateToListeners(source, listeners);
    if (listeners0 != null) {
      listeners = listeners0;
      continue;
    } else
      break;
  } while (true);
},

_Future__propagateToListeners: function(source, listeners) {
  var t1, t2, hasError, asyncError, t3, t4, t5, chainSource, listeners0;
  t1 = {};
  t1.source_4 = source;
  for (; true;) {
    t2 = {};
    if (!t1.source_4.get$_isComplete())
      return;
    hasError = t1.source_4.get$_hasError();
    if (hasError && listeners == null) {
      asyncError = t1.source_4.get$_error();
      t2 = t1.source_4.get$_zone();
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    if (listeners == null)
      return;
    if (listeners.get$_nextListener() != null) {
      P._Future__propagateMultipleListeners(t1.source_4, listeners);
      return;
    }
    if (hasError) {
      t3 = t1.source_4.get$_zone();
      t4 = listeners.get$_zone();
      t3.toString;
      t4.toString;
      t3 = t4 == null ? t3 != null : t4 !== t3;
    } else
      t3 = false;
    if (t3) {
      asyncError = t1.source_4.get$_error();
      t2 = t1.source_4.get$_zone();
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    t3 = $.Zone__current;
    t4 = listeners.get$_zone();
    if (t3 == null ? t4 != null : t3 !== t4) {
      t4.toString;
      P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure(t1, listeners));
      return;
    }
    t2.listenerHasValue_1 = null;
    t2.listenerValueOrError_2 = null;
    t2.isPropagationAborted_3 = false;
    t3 = listeners.get$_zone();
    t3.toString;
    P._rootRun(t3, null, t3, new P._Future__propagateToListeners_closure0(t1, t2, hasError, listeners));
    if (t2.isPropagationAborted_3)
      return;
    t3 = t2.listenerHasValue_1 === true;
    if (t3) {
      t4 = t2.listenerValueOrError_2;
      t5 = J.getInterceptor(t4);
      t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
      t4 = t5;
    } else
      t4 = false;
    if (t4) {
      chainSource = t2.listenerValueOrError_2;
      t2 = J.getInterceptor(chainSource);
      if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
        listeners.set$_isChained(true);
        t1.source_4 = chainSource;
        continue;
      }
      P._Future__chainFutures(chainSource, listeners);
      return;
    }
    if (t3) {
      listeners0 = listeners._removeListeners$0();
      listeners._setValue$1(t2.listenerValueOrError_2);
    } else {
      listeners0 = listeners._removeListeners$0();
      asyncError = t2.listenerValueOrError_2;
      listeners._setError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
    }
    t1.source_4 = listeners;
    listeners = listeners0;
  }
}}

},

_Future__addListener_closure: {"": "Closure;this_0,listener_1",
  call$0: function() {
    P._Future__propagateToListeners(this.this_0, this.listener_1);
  },
  "+call:0:0": 0
},

_Future__chainFutures_closure: {"": "Closure;target_0",
  call$1: function(value) {
    this.target_0._complete$1(value);
  },
  "+call:1:0": 0,
  $is_args1: true
},

_Future__chainFutures_closure0: {"": "Closure;target_1",
  call$2: function(error, stackTrace) {
    this.target_1._completeError$2(error, stackTrace);
  },
  "+call:2:0": 0,
  "*call": [0],
  call$1: function(error) {
    return this.call$2(error, null);
  },
  "+call:1:0": 0,
  $is_args2: true,
  $is_args1: true
},

_Future__asyncComplete_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._complete$1(this.value_1);
  },
  "+call:0:0": 0
},

_Future__asyncCompleteError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    this.this_0._completeError$2(this.error_1, this.stackTrace_2);
  },
  "+call:0:0": 0
},

_Future__propagateToListeners_closure: {"": "Closure;box_2,listener_3",
  call$0: function() {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
  },
  "+call:0:0": 0
},

_Future__propagateToListeners_closure0: {"": "Closure;box_2,box_1,hasError_4,listener_5",
  call$0: function() {
    var t1, value, asyncError, test, matchesTest, errorCallback, e, s, t2, t3, t4, exception;
    t1 = {};
    try {
      t2 = this.box_2;
      if (!this.hasError_4) {
        value = t2.source_4.get$_value();
        t2 = this.listener_5;
        t3 = this.box_1;
        if (t2.get$_onValue() != null) {
          t3.listenerValueOrError_2 = t2._onValue$1(value);
          t3.listenerHasValue_1 = true;
        } else {
          t3.listenerValueOrError_2 = value;
          t3.listenerHasValue_1 = true;
        }
      } else {
        asyncError = t2.source_4.get$_error();
        t2 = this.listener_5;
        test = t2.get$_errorTest();
        matchesTest = true;
        if (test != null)
          matchesTest = test.call$1(J.get$error$x(asyncError));
        t3 = matchesTest === true && t2.get$_onError() != null;
        t4 = this.box_1;
        if (t3) {
          errorCallback = t2.get$_onError();
          t4.listenerValueOrError_2 = P._invokeErrorHandler(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          t4.listenerHasValue_1 = true;
        } else {
          t4.listenerValueOrError_2 = asyncError;
          t4.listenerHasValue_1 = false;
        }
      }
      t2 = this.listener_5;
      if (t2.get$_whenCompleteAction() != null) {
        t1.completeResult_0 = t2._whenCompleteAction$0();
        t3 = t1.completeResult_0;
        t4 = J.getInterceptor(t3);
        if (typeof t3 === "object" && t3 !== null && !!t4.$isFuture) {
          t2.set$_isChained(true);
          t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners__closure(this.box_2, t2), new P._Future__propagateToListeners__closure0(t1, t2));
          this.box_1.isPropagationAborted_3 = true;
        }
      }
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      if (this.hasError_4) {
        t1 = J.get$error$x(this.box_2.source_4.get$_error());
        t2 = e;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      t2 = this.box_1;
      if (t1)
        t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
      else
        t2.listenerValueOrError_2 = new P._AsyncError(P._asyncError(e, s), s);
      this.box_1.listenerHasValue_1 = false;
    }

  },
  "+call:0:0": 0
},

_Future__propagateToListeners__closure: {"": "Closure;box_2,listener_6",
  call$1: function(ignored) {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
  },
  "+call:1:0": 0,
  $is_args1: true
},

_Future__propagateToListeners__closure0: {"": "Closure;box_0,listener_7",
  call$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.completeResult_0;
    t3 = J.getInterceptor(t2);
    if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
      t1.completeResult_0 = P._Future$(null);
      t1.completeResult_0._setError$2(error, stackTrace);
    }
    P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
  },
  "+call:2:0": 0,
  "*call": [0],
  call$1: function(error) {
    return this.call$2(error, null);
  },
  "+call:1:0": 0,
  $is_args2: true,
  $is_args1: true
},

Stream: {"": "Object;",
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSInt);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
    return future;
  }
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
  },
  "+call:1:0": 0,
  $is_args1: true
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  },
  "+call:0:0": 0
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  "+call:1:0": 0,
  $is_args1: true
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    this.future_6._complete$1(null);
  },
  "+call:0:0": 0
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  },
  "+call:1:0": 0,
  $is_args1: true
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._complete$1(this.box_0.count_0);
  },
  "+call:0:0": 0
},

StreamSubscription: {"": "Object;"},

_StreamController: {"": "Object;",
  get$_pendingEvents: function() {
    if ((this._state & 8) === 0)
      return this._varData;
    return this._varData.get$varData();
  },
  _ensurePendingEvents$0: function() {
    if ((this._state & 8) === 0) {
      if (this._varData == null)
        this._varData = new P._StreamImplEvents(null, null, 0);
      return this._varData;
    }
    var t1 = this._varData.get$varData();
    return t1;
  },
  get$_subscription: function() {
    if ((this._state & 8) !== 0)
      return this._varData.get$varData();
    return this._varData;
  },
  _badEventState$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add event after closing");
    return new P.StateError("Cannot add event while adding a stream");
  },
  _ensureDoneFuture$0: function() {
    if (this._doneFuture == null) {
      this._doneFuture = P._Future$(null);
      if ((this._state & 2) !== 0)
        this._doneFuture._complete$1(null);
    }
    return this._doneFuture;
  },
  close$0: function(_) {
    var t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._badEventState$0());
    this._state = (t1 | 4) >>> 0;
    this._ensureDoneFuture$0();
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendDone$0();
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, C.C__DelayedDone);
    }
    return this._doneFuture;
  },
  _async$_add$1: function(value) {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendData$1(value);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t2 = new P._DelayedData(value, null);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "_StreamController", 0)]);
      t1.add$1(t1, t2);
    }
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, subscription, pendingEvents;
    if ((this._state & 3) !== 0)
      throw H.wrapException(P.StateError$("Stream has already been listened to."));
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    subscription = new P._ControllerSubscription(this, null, null, null, t1, t2, null, null);
    H.setRuntimeTypeInfo(subscription, [null]);
    pendingEvents = this.get$_pendingEvents();
    this._state = (this._state | 1) >>> 0;
    if ((this._state & 8) !== 0)
      this._varData.set$varData(subscription);
    else
      this._varData = subscription;
    subscription._setPendingEvents$1(pendingEvents);
    subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var t1, future;
    if ((this._state & 8) !== 0)
      this._varData.cancel$0();
    this._varData = null;
    this._state = (this._state & 4294967286 | 2) >>> 0;
    t1 = new P._StreamController__recordCancel_complete(this);
    future = P._runGuarded(this.get$_onCancel());
    if (future != null)
      future = future.whenComplete$1(t1);
    else
      t1.call$0();
    return future;
  }
},

_StreamController__subscribe_closure: {"": "Closure;this_0",
  call$0: function() {
    P._runGuarded(this.this_0.get$_onListen());
  },
  "+call:0:0": 0
},

_StreamController__recordCancel_complete: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0._doneFuture;
    if (t1 != null && t1._state === 0)
      t1._asyncComplete$1(null);
  },
  "+call:0:0": 0
},

_SyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._async$_add$1(data);
  },
  _sendDone$0: function() {
    this.get$_subscription()._close$0();
  }
},

_AsyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    var t1, t2;
    t1 = this.get$_subscription();
    t2 = new P._DelayedData(data, null);
    H.setRuntimeTypeInfo(t2, [null]);
    t1._addPending$1(t2);
  },
  _sendDone$0: function() {
    this.get$_subscription()._addPending$1(C.C__DelayedDone);
  }
},

_AsyncStreamController: {"": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__AsyncStreamControllerDispatch: {"": "_StreamController+_AsyncStreamControllerDispatch;", $as_StreamController: null},

_SyncStreamController: {"": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__SyncStreamControllerDispatch: {"": "_StreamController+_SyncStreamControllerDispatch;", $as_StreamController: null},

_ControllerStream: {"": "_StreamImpl;_async$_controller",
  _createSubscription$1: function(cancelOnError) {
    return this._async$_controller._subscribe$1(cancelOnError);
  },
  get$hashCode: function(_) {
    return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
      return false;
    return other._async$_controller === this._async$_controller;
  },
  $is_ControllerStream: true,
  $as_StreamImpl: null
},

_ControllerSubscription: {"": "_BufferingStreamSubscription;_async$_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _onCancel$0: function() {
    return this._async$_controller._recordCancel$1(this);
  },
  _onPause$0: function() {
    var t1, addState;
    t1 = this._async$_controller;
    if ((t1._state & 8) !== 0) {
      addState = t1._varData;
      addState.pause$0(addState);
    }
    P._runGuarded(t1.get$_onPause());
  },
  get$_onPause: function() {
    return new Q.BoundClosure$0(this, P._ControllerSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    var t1 = this._async$_controller;
    if ((t1._state & 8) !== 0)
      t1._varData.resume$0();
    P._runGuarded(t1.get$_onResume());
  },
  get$_onResume: function() {
    return new Q.BoundClosure$0(this, P._ControllerSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_BufferingStreamSubscription: null
},

_EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_async$_onData,_onError<,_onDone,_zone<,_state,_cancelFuture,_pending",
  _setPendingEvents$1: function(pendingEvents) {
    if (pendingEvents == null)
      return;
    this._pending = pendingEvents;
    if (!pendingEvents.get$isEmpty(pendingEvents)) {
      this._state = (this._state | 64) >>> 0;
      this._pending.schedule$1(this);
    }
  },
  onData$1: function(handleData) {
    $.Zone__current.toString;
    this._async$_onData = handleData;
  },
  onError$1: function(_, handleError) {
    this._onError = P._registerErrorHandler(handleError, $.Zone__current);
  },
  onDone$1: function(handleDone) {
    $.Zone__current.toString;
    this._onDone = handleDone;
  },
  pause$1: function(_, resumeSignal) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 128 | 4) >>> 0;
    if (t1 < 128 && this._pending != null)
      this._pending.cancelSchedule$0();
    if ((t1 & 4) === 0 && (this._state & 32) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 >= 128) {
      this._state = t1 - 128;
      t1 = this._state;
      if (t1 < 128) {
        if ((t1 & 64) !== 0) {
          t1 = this._pending;
          t1 = !t1.get$isEmpty(t1);
        } else
          t1 = false;
        if (t1)
          this._pending.schedule$1(this);
        else {
          this._state = (this._state & 4294967291) >>> 0;
          if ((this._state & 32) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function() {
    this._state = (this._state & 4294967279) >>> 0;
    if ((this._state & 8) !== 0)
      return this._cancelFuture;
    this._cancel$0();
    return this._cancelFuture;
  },
  get$_mayResumeInput: function() {
    if (this._state < 128) {
      var t1 = this._pending;
      t1 = t1 == null || t1.get$isEmpty(t1);
    } else
      t1 = false;
    return t1;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    if ((this._state & 64) !== 0)
      this._pending.cancelSchedule$0();
    if ((this._state & 32) === 0)
      this._pending = null;
    this._cancelFuture = this._onCancel$0();
  },
  _async$_add$1: function(data) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendData$1(data);
    else {
      t1 = new P._DelayedData(data, null);
      H.setRuntimeTypeInfo(t1, [null]);
      this._addPending$1(t1);
    }
  },
  _close$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 32)
      this._sendDone$0();
    else
      this._addPending$1(C.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new Q.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new Q.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new P._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    t1 = this._state;
    if ((t1 & 64) === 0) {
      this._state = (t1 | 64) >>> 0;
      if (this._state < 128)
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    this._zone.runUnaryGuarded$2(this._async$_onData, data);
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendDone$0: function() {
    var t1, t2, t3;
    t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
    this._cancel$0();
    this._state = (this._state | 16) >>> 0;
    t2 = this._cancelFuture;
    t3 = J.getInterceptor(t2);
    if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture)
      t2.whenComplete$1(t1);
    else
      t1.call$0();
  },
  _guardCallback$1: function(callback) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, isInputPaused;
    if ((this._state & 64) !== 0) {
      t1 = this._pending;
      t1 = t1.get$isEmpty(t1);
    } else
      t1 = false;
    if (t1) {
      this._state = (this._state & 4294967231) >>> 0;
      if ((this._state & 4) !== 0 && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 32) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967263) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 64) !== 0 && t1 < 128)
      this._pending.schedule$1(this);
  },
  static: {
"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT",
}

},

_BufferingStreamSubscription__sendDone_sendDone: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 16) === 0)
      return;
    t1._state = (t2 | 42) >>> 0;
    t1._zone.runGuarded$1(t1._onDone);
    t1._state = (t1._state & 4294967263) >>> 0;
  },
  "+call:0:0": 0
},

_StreamImpl: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var subscription = this._createSubscription$1(true === cancelOnError);
    subscription.onData$1(onData);
    subscription.onError$1(subscription, onError);
    subscription.onDone$1(onDone);
    return subscription;
  },
  _createSubscription$1: function(cancelOnError) {
    var t1, t2, t3;
    t1 = H.getRuntimeTypeArgument(this, "_StreamImpl", 0);
    t2 = $.Zone__current;
    t3 = cancelOnError ? 1 : 0;
    t3 = new P._BufferingStreamSubscription(null, null, null, t2, t3, null, null);
    H.setRuntimeTypeInfo(t3, [t1]);
    return t3;
  },
  $asStream: null
},

_DelayedEvent: {"": "Object;next@"},

_DelayedData: {"": "_DelayedEvent;value>,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw H.wrapException(P.StateError$("No events after a done."));
  }
},

_PendingEvents: {"": "Object;",
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  cancelSchedule$0: function() {
    if (this._state === 1)
      this._state = 3;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1._state;
    t1._state = 0;
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  },
  "+call:0:0": 0
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  }
},

_cancelAndError_closure: {"": "Closure;future_0,error_1,stackTrace_2",
  call$0: function() {
    return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
  },
  "+call:0:0": 0
},

_cancelAndErrorClosure_closure: {"": "Closure;subscription_0,future_1",
  call$2: function(error, stackTrace) {
    return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
  },
  "+call:2:0": 0,
  $is_args2: true
},

Timer: {"": "Object;"},

_BaseZone: {"": "Object;",
  runGuarded$1: function(f) {
    var e, s, t1, exception;
    try {
      t1 = this.run$1(f);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runUnaryGuarded$2: function(f, arg) {
    var e, s, t1, exception;
    try {
      t1 = this.runUnary$2(f, arg);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  bindCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindCallback_closure(this, registered);
    else
      return new P._BaseZone_bindCallback_closure0(this, registered);
  },
  bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerUnaryCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindUnaryCallback_closure(this, registered);
    else
      return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
  }
},

_BaseZone_bindCallback_closure: {"": "Closure;this_0,registered_1",
  call$0: function() {
    return this.this_0.runGuarded$1(this.registered_1);
  },
  "+call:0:0": 0
},

_BaseZone_bindCallback_closure0: {"": "Closure;this_2,registered_3",
  call$0: function() {
    return this.this_2.run$1(this.registered_3);
  },
  "+call:0:0": 0
},

_BaseZone_bindUnaryCallback_closure: {"": "Closure;this_0,registered_1",
  call$1: function(arg) {
    return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
  },
  "+call:1:0": 0,
  $is_args1: true
},

_BaseZone_bindUnaryCallback_closure0: {"": "Closure;this_2,registered_3",
  call$1: function(arg) {
    return this.this_2.runUnary$2(this.registered_3, arg);
  },
  "+call:1:0": 0,
  $is_args1: true
},

_rootHandleUncaughtError_closure: {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
  },
  "+call:0:0": 0
},

_rootHandleUncaughtError__closure: {"": "Closure;error_2,stackTrace_3",
  call$0: function() {
    var t1, trace;
    t1 = this.error_2;
    P.print("Uncaught Error: " + H.S(t1));
    trace = this.stackTrace_3;
    if (trace == null)
      trace = P.getAttachedStackTrace(t1);
    P._attachStackTrace(t1, null);
    if (trace != null)
      P.print("Stack Trace: \n" + H.S(trace) + "\n");
    throw H.wrapException(t1);
  },
  "+call:0:0": 0
},

_RootZone: {"": "_BaseZone;",
  $index: function(_, key) {
    return;
  },
  handleUncaughtError$2: function(error, stackTrace) {
    return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
  },
  run$1: function(f) {
    return P._rootRun(this, null, this, f);
  },
  runUnary$2: function(f, arg) {
    return P._rootRunUnary(this, null, this, f, arg);
  },
  registerCallback$1: function(f) {
    return f;
  },
  registerUnaryCallback$1: function(f) {
    return f;
  }
}}],
["dart.collection", "dart:collection", , P, {
_defaultEquals: function(a, b) {
  return J.$eq(a, b);
},

_defaultHashCode: function(a) {
  return J.get$hashCode$(a);
},

HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._HashMap(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

_iterableToString: function(iterable) {
  var parts, t1;
  t1 = $.get$_toStringVisiting();
  if (t1.contains$1(t1, iterable))
    return "(...)";
  t1 = $.get$_toStringVisiting();
  t1.add$1(t1, iterable);
  parts = [];
  try {
    P._iterablePartsToStrings(iterable, parts);
  } finally {
    t1 = $.get$_toStringVisiting();
    t1.remove$1(t1, iterable);
  }
  t1 = P.StringBuffer$("(");
  t1.writeAll$2(parts, ", ");
  t1.write$1(")");
  return t1._contents;
},

_iterablePartsToStrings: function(iterable, parts) {
  var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
  it = iterable.get$iterator(iterable);
  $length = 0;
  count = 0;
  while (true) {
    if (!($length < 80 || count < 3))
      break;
    if (!it.moveNext$0())
      return;
    next = H.S(it.get$current());
    parts.push(next);
    $length += next.length + 2;
    ++count;
  }
  if (!it.moveNext$0()) {
    if (count <= 5)
      return;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    ultimateString = parts.pop();
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    penultimateString = parts.pop();
  } else {
    penultimate = it.get$current();
    ++count;
    if (!it.moveNext$0()) {
      if (count <= 4) {
        parts.push(H.S(penultimate));
        return;
      }
      ultimateString = H.S(penultimate);
      if (0 >= parts.length)
        throw H.ioore(parts, 0);
      penultimateString = parts.pop();
      $length += ultimateString.length + 2;
    } else {
      ultimate = it.get$current();
      ++count;
      for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
        ultimate0 = it.get$current();
        ++count;
        if (count > 100) {
          while (true) {
            if (!($length > 75 && count > 3))
              break;
            if (0 >= parts.length)
              throw H.ioore(parts, 0);
            $length -= parts.pop().length + 2;
            --count;
          }
          parts.push("...");
          return;
        }
      }
      penultimateString = H.S(penultimate);
      ultimateString = H.S(ultimate);
      $length += ultimateString.length + penultimateString.length + 4;
    }
  }
  if (count > parts.length + 2) {
    $length += 5;
    elision = "...";
  } else
    elision = null;
  while (true) {
    if (!($length > 80 && parts.length > 3))
      break;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    $length -= parts.pop().length + 2;
    if (elision == null) {
      $length += 5;
      elision = "...";
    }
  }
  if (elision != null)
    parts.push(elision);
  parts.push(penultimateString);
  parts.push(ultimateString);
},

LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw H.ioore(t2, i);
    if (t2[i] === m)
      return "{...}";
  }
  result = P.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    result.write$1("{");
    t1.first_0 = true;
    J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

_HashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$keys: function() {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._HashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._HashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._HashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _addHashTableEntry$3: function(table, key, value) {
    if (table[key] == null) {
      this._collection$_length = this._collection$_length + 1;
      this._keys = null;
    }
    P._HashMap__setTableEntry(table, key, value);
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (J.$eq(bucket[i], key))
        return i;
    return -1;
  },
  $isMap: true,
  static: {
_HashMap__setTableEntry: function(table, key, value) {
  if (value == null)
    table[key] = table;
  else
    table[key] = value;
},

_HashMap__newHashTable: function() {
  var table = Object.create(null);
  P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
  delete table["<non-identifier-key>"];
  return table;
}}

},

_HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  "+call:1:0": 0,
  $is_args1: true
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._map;
    t2 = t1._computeKeys$0();
    t2 = new P.HashMapKeyIterator(t1, t2, 0, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "HashMapKeyIterable", 0)]);
    return t2;
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  get$keys: function() {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._LinkedHashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_collection$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._LinkedHashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._LinkedHashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_collection$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_collection$_value();
    }
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell._key, cell._collection$_value);
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell._next;
    }
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_collection$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_collection$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new P.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last._next = cell;
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous._next = next;
    if (next == null)
      this._last = previous;
    else
      next._previous = previous;
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_key(), key))
        return i;
    return -1;
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  $isMap: true,
  static: {
_LinkedHashMap__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
}}

},

_LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  "+call:1:0": 0,
  $is_args1: true
},

LinkedHashMapCell: {"": "Object;_key<,_collection$_value@,_next<,_previous<"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._map;
    t2 = t1._modifications;
    t2 = new P.LinkedHashMapKeyIterator(t1, t2, null, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "LinkedHashMapKeyIterable", 0)]);
    t2._cell = t2._map._first;
    return t2;
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell._key);
      if (modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = cell._next;
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1._key;
        this._cell = this._cell._next;
        return true;
      }
    }
  }
},

_HashSet: {"": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_elements",
  get$iterator: function(_) {
    var t1 = this._computeElements$0();
    t1 = new P.HashSetIterator(this, t1, 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashSet", 0)]);
    return t1;
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      return nums == null ? false : nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    rest = this._rest;
    if (rest == null)
      return;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return;
    return J.$index$asx(bucket, index);
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      return this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      return this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      this._collection$_length = this._collection$_length + 1;
      this._elements = null;
      return true;
    }
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    rest = this._rest;
    if (rest == null)
      return false;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return false;
    this._collection$_length = this._collection$_length - 1;
    this._elements = null;
    bucket.splice(index, 1);
    return true;
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return false;
    table[element] = 0;
    this._collection$_length = this._collection$_length + 1;
    this._elements = null;
    return true;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i], element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $isEfficientLength: true
},

_IdentityHashSet: {"": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = bucket[i];
      if (t1 == null ? element == null : t1 === element)
        return i;
    }
    return -1;
  },
  $as_HashSet: null
},

HashSetIterator: {"": "Object;_set,_elements,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= elements.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_HashSetBase: {"": "IterableBase;",
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

HashSet: {"": "Object;", $isEfficientLength: true, static: {
HashSet_HashSet: function(equals, hashCode, isValidKey, $E) {
  var t1 = new P._HashSet(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

HashSet_HashSet$identity: function($E) {
  var t1 = new P._IdentityHashSet(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
}}
},

IterableBase: {"": "Object;",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  get$first: function(_) {
    var it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw H.wrapException(P.StateError$("No elements"));
    return it.get$current();
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw H.wrapException(P.RangeError$value(index));
  },
  toString$0: function(_) {
    return P._iterableToString(this);
  }
},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    var t1 = new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    return t1;
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
  },
  indexOf$2: function(receiver, element, startIndex) {
    var t1, i;
    t1 = this.get$length(receiver);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (startIndex >= t1)
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    i = startIndex;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      if (J.$eq(this.$index(receiver, i), element))
        return i;
      ++i;
    }
    return -1;
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  toString$0: function(receiver) {
    var result, t1;
    t1 = $.get$_toStringVisiting();
    if (t1.contains$1(t1, receiver))
      return "[...]";
    result = P.StringBuffer$("");
    try {
      t1 = $.get$_toStringVisiting();
      t1.add$1(t1, receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$_toStringVisiting();
      t1.remove$1(t1, receiver);
    }
    return result.get$_contents();
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  },
  "+call:2:0": 0,
  $is_args2: true
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return P._ListQueueIterator$(this, H.getRuntimeTypeArgument(this, "ListQueue", 0));
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(this));
    }
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw H.wrapException(P.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = P.List_List(this._table.length * 2, H.getRuntimeTypeArgument(this, "ListQueue", 0));
    H.setRuntimeTypeInfo(newTable, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity, $E) {
    var t1 = P.List_List(8, $E);
    H.setRuntimeTypeInfo(t1, [$E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $isEfficientLength: true,
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity, $E) {
  var t1 = new P.ListQueue(null, 0, 0, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.ListQueue$1(initialCapacity, $E);
  return t1;
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_position,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      H.throwExpression(P.ConcurrentModificationError$(t1));
    t2 = this._position;
    if (t2 === this._end) {
      this._collection$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t3, t2);
    this._collection$_current = t3[t2];
    this._position = (this._position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  static: {
_ListQueueIterator$: function(queue, $E) {
  var t1 = new P._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
}}

}}],
["dart.core", "dart:core", , P, {
Function__toMangledNames: function(namedArguments) {
  return;
},

Comparable_compare: function(a, b) {
  return J.compareTo$1$ns(a, b);
},

Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, t2, charCodes;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return J.toString$0(object);
  if (typeof object === "string") {
    buffer = new P.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
          charCodes = P.List_List$filled(1, t2, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t2 = H.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    buffer._contents = buffer._contents + "\"";
    return buffer._contents;
  }
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Exception_Exception: function(message) {
  return new P._ExceptionImplementation(message);
},

identical: function(a, b) {
  return a == null ? b == null : a === b;
},

identityHashCode: function(object) {
  return H.objectHashCode(object);
},

List_List: function($length, $E) {
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(new P.ArgumentError("Length must be a positive integer: " + H.S($length) + "."));
  return H.Primitives_newFixedList($length);
},

List_List$filled: function($length, fill, $E) {
  var result, t1, i;
  if ($length < 0)
    throw H.wrapException(new P.ArgumentError("Length must be a positive integer: " + $length + "."));
  result = H.Primitives_newFixedList($length);
  if ($length !== 0 && true)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, $E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = P.List_List(null, $E);
  H.setRuntimeTypeInfo(list, [$E]);
  for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = P.List_List($length, $E);
  H.setRuntimeTypeInfo(fixedList, [$E]);
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw H.ioore(list, i);
    t3 = list[i];
    if (i >= t2)
      throw H.ioore(fixedList, i);
    fixedList[i] = t3;
  }
  return fixedList;
},

print: function(object) {
  var line = J.toString$0(object);
  H.printToConsole(line);
},

Function__toMangledNames_closure: {"": "Closure;result_0",
  call$2: function(symbol, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, symbol.get$_name(), value);
  },
  "+call:2:0": 0,
  $is_args2: true
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (t1.i_1 > 0)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(key.get$_name());
    t1.sb_0.write$1(": ");
    t1.sb_0.write$1(P.Error_safeToString(value));
    t1.i_1 = t1.i_1 + 1;
  },
  "+call:2:0": 0,
  $is_args2: true
},

Comparable: {"": "Object;"},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw H.iae(factor);
    return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
  },
  $lt: function(_, other) {
    return C.JSNumber_methods.$lt(this._duration, other.get$_duration());
  },
  $gt: function(_, other) {
    return C.JSNumber_methods.$gt(this._duration, other.get$_duration());
  },
  $le: function(_, other) {
    return C.JSNumber_methods.$le(this._duration, other.get$_duration());
  },
  $ge: function(_, other) {
    return C.JSNumber_methods.$ge(this._duration, other.get$_duration());
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new P.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
    twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
    sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
    return H.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
  },
  $isDuration: true,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
}}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return H.S(n);
    if (t1.$ge(n, 10000))
      return "0" + H.S(n);
    if (t1.$ge(n, 1000))
      return "00" + H.S(n);
    if (t1.$ge(n, 100))
      return "000" + H.S(n);
    if (t1.$gt(n, 10))
      return "0000" + H.S(n);
    return "00000" + H.S(n);
  },
  "+call:1:0": 0,
  $is_args1: true
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  "+call:1:0": 0,
  $is_args1: true
},

Error: {"": "Object;",
  get$stackTrace: function() {
    return new H._StackTrace(this.$thrownJsError, null);
  },
  $isError: true
},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + H.S(t1);
    return "Illegal argument(s)";
  },
  static: {
ArgumentError$: function(message) {
  return new P.ArgumentError(message);
}}

},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  },
  static: {
RangeError$value: function(value) {
  return new P.RangeError("value " + H.S(value));
},

RangeError$range: function(value, start, end) {
  return new P.RangeError("value " + H.S(value) + " not in range " + start + ".." + H.S(end));
}}

},

NoSuchMethodError: {"": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, str;
    t1 = {};
    t1.sb_0 = P.StringBuffer$("");
    t1.i_1 = 0;
    for (t2 = this._core$_arguments; t3 = t1.i_1, t3 < t2.length; t1.i_1 = t1.i_1 + 1) {
      if (t3 > 0) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 < 0 || t4 >= t2.length)
        throw H.ioore(t2, t4);
      str = P.Error_safeToString(t2[t4]);
      str = typeof str === "string" ? str : H.S(str);
      t3._contents = t3._contents + str;
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new P.NoSuchMethodError_toString_closure(t1));
    return "NoSuchMethodError : method not found: '" + H.S(this._memberName) + "'\nReceiver: " + H.S(P.Error_safeToString(this._core$_receiver)) + "\nArguments: [" + H.S(t1.sb_0) + "]";
  },
  static: {
NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
  return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
}}

},

UnsupportedError: {"": "Error;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  },
  static: {
UnsupportedError$: function(message) {
  return new P.UnsupportedError(message);
}}

},

StateError: {"": "Error;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  },
  static: {
StateError$: function(message) {
  return new P.StateError(message);
}}

},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
  },
  static: {
ConcurrentModificationError$: function(modifiedObject) {
  return new P.ConcurrentModificationError(modifiedObject);
}}

},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  get$stackTrace: function() {
    return;
  },
  $isError: true
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  },
  static: {
CyclicInitializationError$: function(variableName) {
  return new P.CyclicInitializationError(variableName);
}}

},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + H.S(t1);
  }
},

Expando: {"": "Object;name>",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values = H.Primitives_getProperty(object, "expando$values");
    return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = H.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new P.Object();
      H.Primitives_setProperty(object, "expando$values", values);
    }
    H.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = H.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      H.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Function: {"": "Object;"},

Iterator: {"": "Object;"},

Map: {"": "Object;", $isMap: true},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return H.Primitives_objectToString(this);
  },
  noSuchMethod$1: function(_, invocation) {
    throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
  },
  get$runtimeType: function(_) {
    return new H.TypeImpl(H.getRuntimeTypeString(this), null);
  }
},

StackTrace: {"": "Object;"},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

},

Symbol: {"": "Object;"}}],
["dart.dom.html", "dart:html", , W, {
AudioElement_AudioElement: function(src) {
  return new Audio();
},

ImageElement_ImageElement: function(height, src, width) {
  var e = document.createElement("img", null);
  return e;
},

Window__isDartLocation: function(thing) {
  var t1, t2, exception;
  try {
    t1 = thing;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isLocation;
  } catch (exception) {
    H.unwrapException(exception);
    return false;
  }

},

_JenkinsSmiHash_combine: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

_convertNativeToDart_EventTarget: function(e) {
  var $window, t1;
  if (e == null)
    return;
  if ("setInterval" in e) {
    $window = W._DOMWindowCrossFrame__createSafe(e);
    t1 = J.getInterceptor($window);
    if (typeof $window === "object" && $window !== null && !!t1.$isEventTarget)
      return $window;
    return;
  } else
    return e;
},

_wrapZone: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone)
    return callback;
  return t1.bindUnaryCallback$2$runGuarded(callback, true);
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin2: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin2: {"": "Interceptor_ListMixin2+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin3: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin3: {"": "Interceptor_ListMixin3+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin4: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin4: {"": "Interceptor_ListMixin4+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

EventTarget_ListMixin: {"": "EventTarget+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

EventTarget_ListMixin_ImmutableListMixin: {"": "EventTarget_ListMixin+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin5: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin5: {"": "Interceptor_ListMixin5+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin6: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin6: {"": "Interceptor_ListMixin6+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

EventTarget_ListMixin0: {"": "EventTarget+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

EventTarget_ListMixin_ImmutableListMixin0: {"": "EventTarget_ListMixin0+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin7: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin7: {"": "Interceptor_ListMixin7+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin8: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin8: {"": "Interceptor_ListMixin8+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin9: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin9: {"": "Interceptor_ListMixin9+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_CSSValue_ListMixin: {"": "_CSSValue+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

_CSSValue_ListMixin_ImmutableListMixin: {"": "_CSSValue_ListMixin+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin10: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin10: {"": "Interceptor_ListMixin10+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin11: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin11: {"": "Interceptor_ListMixin11+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin12: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin12: {"": "Interceptor_ListMixin12+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin13: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin13: {"": "Interceptor_ListMixin13+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin14: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin14: {"": "Interceptor_ListMixin14+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_EventStream: {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_EventStream", 0)]);
    t1._tryResume$0();
    return t1;
  },
  $asStream: null
},

_ElementEventStreamImpl: {"": "_EventStream;_target,_eventType,_useCapture", $as_EventStream: null},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this._target == null)
      return;
    this._unlisten$0();
    this._target = null;
    this._onData = null;
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null
},

EventStreamProvider: {"": "Object;_eventType"},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return W.FixedSizeListIterator$(receiver, H.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0));
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

FixedSizeListIterator: {"": "Object;_array,_html$_length,_html$_position,_html$_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._html$_position;
    if (typeof t1 !== "number")
      throw t1.$add();
    nextPosition = t1 + 1;
    t1 = this._html$_length;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (nextPosition < t1) {
      this._html$_current = J.$index$asx(this._array, nextPosition);
      this._html$_position = nextPosition;
      return true;
    }
    this._html$_current = null;
    this._html$_position = t1;
    return false;
  },
  get$current: function() {
    return this._html$_current;
  },
  static: {
FixedSizeListIterator$: function(array, $T) {
  var t1 = new W.FixedSizeListIterator(array, J.get$length$asx(array), -1, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
}}

},

_DOMWindowCrossFrame: {"": "Object;_window", $isEventTarget: true, static: {
_DOMWindowCrossFrame__createSafe: function(w) {
  if (w === window)
    return w;
  else
    return new W._DOMWindowCrossFrame(w);
}}
},

_LocationWrapper: {"": "Object;_ptr",
  get$search: function(_) {
    return this._ptr.search;
  },
  reload$0: function(_) {
    return this._ptr.reload();
  },
  toString$0: function(_) {
    return this._ptr.toString();
  },
  $isLocation: true
},

HtmlElement: {"": "Element;", "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"},

AnchorElement: {"": "HtmlElement;search=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "HTMLAnchorElement"
},

AreaElement: {"": "HtmlElement;search=", "%": "HTMLAreaElement"},

Blob: {"": "Interceptor;size=", "%": ";Blob"},

BodyElement: {"": "HtmlElement;",
  get$onLoad: function(receiver) {
    var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_load._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "%": "HTMLBodyElement"
},

ButtonElement: {"": "HtmlElement;name=,value=", "%": "HTMLButtonElement"},

CanvasElement: {"": "HtmlElement;height=,width=",
  getContext$2: function(receiver, contextId, attrs) {
    return receiver.getContext(contextId);
  },
  getContext$1: function($receiver, contextId) {
    return this.getContext$2($receiver, contextId, null);
  },
  "%": "HTMLCanvasElement"
},

CanvasRenderingContext: {"": "Interceptor;", "%": "WebGLRenderingContext;CanvasRenderingContext"},

CanvasRenderingContext2D: {"": "CanvasRenderingContext;fillStyle},font},globalAlpha},lineCap},lineWidth},strokeStyle},textAlign},textBaseline}",
  beginPath$0: function(receiver) {
    return receiver.beginPath();
  },
  bezierCurveTo$6: function(receiver, cp1x, cp1y, cp2x, cp2y, x, y) {
    return receiver.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
  },
  clearRect$4: function(receiver, x, y, width, height) {
    return receiver.clearRect(x, y, width, height);
  },
  clip$1: function(receiver, winding) {
    return receiver.clip(winding);
  },
  clip$0: function($receiver) {
    return $receiver.clip();
  },
  closePath$0: function(receiver) {
    return receiver.closePath();
  },
  fill$1: function(receiver, winding) {
    return receiver.fill(winding);
  },
  fill$0: function($receiver) {
    return $receiver.fill();
  },
  fillRect$4: function(receiver, x, y, width, height) {
    return receiver.fillRect(x, y, width, height);
  },
  lineTo$2: function(receiver, x, y) {
    return receiver.lineTo(x, y);
  },
  measureText$1: function(receiver, text) {
    return receiver.measureText(text);
  },
  moveTo$2: function(receiver, x, y) {
    return receiver.moveTo(x, y);
  },
  quadraticCurveTo$4: function(receiver, cpx, cpy, x, y) {
    return receiver.quadraticCurveTo(cpx, cpy, x, y);
  },
  restore$0: function(receiver) {
    return receiver.restore();
  },
  rotate$1: function(receiver, angle) {
    return receiver.rotate(angle);
  },
  save$0: function(receiver) {
    return receiver.save();
  },
  stroke$0: function(receiver) {
    return receiver.stroke();
  },
  transform$6: function(receiver, m11, m12, m21, m22, dx, dy) {
    return receiver.transform(m11, m12, m21, m22, dx, dy);
  },
  translate$2: function(receiver, tx, ty) {
    return receiver.translate(tx, ty);
  },
  arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
    receiver.arc(x, y, radius, startAngle, endAngle, anticlockwise);
  },
  drawImage$3: function(receiver, source, destX, destY) {
    return receiver.drawImage(source, destX, destY);
  },
  drawImageScaled$5: function(receiver, source, destX, destY, destWidth, destHeight) {
    return receiver.drawImage(source, destX, destY, destWidth, destHeight);
  },
  fillText$4: function(receiver, text, x, y, maxWidth) {
    receiver.fillText(text, x, y);
  },
  fillText$3: function($receiver, text, x, y) {
    return this.fillText$4($receiver, text, x, y, null);
  },
  "%": "CanvasRenderingContext2D"
},

CharacterData: {"": "Node;length=", "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"},

CssKeyframesRule: {"": "CssRule;name=", "%": "CSSKeyframesRule|MozCSSKeyframesRule|WebKitCSSKeyframesRule"},

CssRule: {"": "Interceptor;", "%": "CSSCharsetRule|CSSFontFaceRule|CSSHostRule|CSSImportRule|CSSKeyframeRule|CSSMediaRule|CSSPageRule|CSSStyleRule|CSSSupportsRule|CSSUnknownRule|CSSViewportRule|MozCSSKeyframeRule|WebKitCSSFilterRule|WebKitCSSKeyframeRule|WebKitCSSRegionRule;CSSRule"},

DomError: {"": "Interceptor;name=", "%": "DOMError|FileError"},

DomException: {"": "Interceptor;",
  get$name: function(receiver) {
    var errorName = receiver.name;
    if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
      return "SecurityError";
    if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
      return "SyntaxError";
    return errorName;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMException"
},

DomStringList: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "DOMStringList"
},

Element: {"": "Node;",
  get$offset: function(receiver) {
    var t1 = new P.Rectangle(receiver.offsetLeft, receiver.offsetTop, receiver.offsetWidth, receiver.offsetHeight);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  getBoundingClientRect$0: function(receiver) {
    return receiver.getBoundingClientRect();
  },
  get$onLoad: function(receiver) {
    var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_load._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  $isElement: true,
  "%": ";Element"
},

EmbedElement: {"": "HtmlElement;height=,name=,src%,width=", "%": "HTMLEmbedElement"},

ErrorEvent: {"": "Event;error=", "%": "ErrorEvent"},

Event: {"": "Interceptor;",
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  },
  "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent;Event"
},

EventTarget: {"": "Interceptor;",
  addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isEventTarget: true,
  "%": ";EventTarget;EventTarget_ListMixin|EventTarget_ListMixin_ImmutableListMixin|EventTarget_ListMixin0|EventTarget_ListMixin_ImmutableListMixin0"
},

FieldSetElement: {"": "HtmlElement;name=", "%": "HTMLFieldSetElement"},

File: {"": "Blob;name=", "%": "File"},

FileList: {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "FileList"
},

FormElement: {"": "HtmlElement;length=,name=", "%": "HTMLFormElement"},

Gamepad: {"": "Interceptor;", "%": "Gamepad"},

HtmlCollection: {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
},

IFrameElement: {"": "HtmlElement;height=,name=,src%,width=", "%": "HTMLIFrameElement"},

ImageElement: {"": "HtmlElement;height=,src%,width=", "%": "HTMLImageElement"},

InputElement: {"": "HtmlElement;height=,name=,size=,src%,value=,width=", $isElement: true, $isEventTarget: true, "%": "HTMLInputElement"},

KeygenElement: {"": "HtmlElement;name=", "%": "HTMLKeygenElement"},

LIElement: {"": "HtmlElement;value=", "%": "HTMLLIElement"},

Location: {"": "Interceptor;search=",
  reload$0: function(receiver) {
    return receiver.reload();
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isLocation: true,
  "%": "Location"
},

MapElement: {"": "HtmlElement;name=", "%": "HTMLMapElement"},

MediaElement: {"": "HtmlElement;error=,src%,volume}",
  play$0: function(receiver) {
    return receiver.play();
  },
  "%": "HTMLAudioElement;HTMLMediaElement"
},

MediaStream: {"": "EventTarget;label=", "%": "MediaStream"},

MetaElement: {"": "HtmlElement;name=", "%": "HTMLMetaElement"},

MeterElement: {"": "HtmlElement;value=", "%": "HTMLMeterElement"},

MimeType: {"": "Interceptor;", "%": "MimeType"},

MimeTypeArray: {"": "Interceptor_ListMixin_ImmutableListMixin2;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "MimeTypeArray"
},

MouseEvent: {"": "UIEvent;",
  get$offset: function(receiver) {
    var t1, t2, target, point;
    if (!!receiver.offsetX) {
      t1 = new P.Point(receiver.offsetX, receiver.offsetY);
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    } else {
      t1 = W._convertNativeToDart_EventTarget(receiver.target);
      t2 = J.getInterceptor(t1);
      if (typeof t1 !== "object" || t1 === null || !t2.$isElement)
        throw H.wrapException(P.UnsupportedError$("offsetX is only supported on elements"));
      target = W._convertNativeToDart_EventTarget(receiver.target);
      t1 = new P.Point(receiver.clientX, receiver.clientY);
      H.setRuntimeTypeInfo(t1, [null]);
      point = t1.$sub(t1, J.get$topLeft$x(J.getBoundingClientRect$0$x(target)));
      t1 = new P.Point(J.toInt$0$n(point.x), J.toInt$0$n(point.y));
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    }
  },
  "%": "DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent"
},

NavigatorUserMediaError: {"": "Interceptor;name=", "%": "NavigatorUserMediaError"},

Node: {"": "EventTarget;",
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  "%": "Document|DocumentFragment|DocumentType|Entity|HTMLDocument|Notation|SVGDocument|ShadowRoot;Node"
},

NodeList: {"": "Interceptor_ListMixin_ImmutableListMixin3;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "NodeList|RadioNodeList"
},

OListElement: {"": "HtmlElement;start=", "%": "HTMLOListElement"},

ObjectElement: {"": "HtmlElement;height=,name=,width=", "%": "HTMLObjectElement"},

OptGroupElement: {"": "HtmlElement;label=", "%": "HTMLOptGroupElement"},

OptionElement: {"": "HtmlElement;label=,value=", "%": "HTMLOptionElement"},

OutputElement: {"": "HtmlElement;name=,value=", "%": "HTMLOutputElement"},

ParamElement: {"": "HtmlElement;name=,value=", "%": "HTMLParamElement"},

Plugin: {"": "Interceptor;length=,name=", "%": "Plugin"},

PluginArray: {"": "Interceptor_ListMixin_ImmutableListMixin4;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  refresh$1: function(receiver, reload) {
    return receiver.refresh(reload);
  },
  get$refresh: function(_receiver) {
    return new W.BoundClosure$i1(this, W.PluginArray.prototype.refresh$1, _receiver, "refresh$1");
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "PluginArray"
},

ProgressElement: {"": "HtmlElement;value=", "%": "HTMLProgressElement"},

ScriptElement: {"": "HtmlElement;src%", "%": "HTMLScriptElement"},

SelectElement: {"": "HtmlElement;length=,name=,size=,value=", "%": "HTMLSelectElement"},

SourceBuffer: {"": "EventTarget;", "%": "SourceBuffer"},

SourceBufferList: {"": "EventTarget_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SourceBufferList"
},

SourceElement: {"": "HtmlElement;src%", "%": "HTMLSourceElement"},

SpeechGrammar: {"": "Interceptor;", "%": "SpeechGrammar"},

SpeechGrammarList: {"": "Interceptor_ListMixin_ImmutableListMixin5;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SpeechGrammarList"
},

SpeechInputResult: {"": "Interceptor;", "%": "SpeechInputResult"},

SpeechRecognitionError: {"": "Event;error=", "%": "SpeechRecognitionError"},

SpeechRecognitionResult: {"": "Interceptor;length=", "%": "SpeechRecognitionResult"},

SpeechSynthesisEvent: {"": "Event;name=", "%": "SpeechSynthesisEvent"},

StyleSheet: {"": "Interceptor;", "%": "CSSStyleSheet|StyleSheet"},

TextAreaElement: {"": "HtmlElement;name=,value=", "%": "HTMLTextAreaElement"},

TextMetrics: {"": "Interceptor;width=", "%": "TextMetrics"},

TextTrack: {"": "EventTarget;label=", "%": "TextTrack"},

TextTrackCue: {"": "EventTarget;size=", "%": "TextTrackCue"},

TextTrackCueList: {"": "Interceptor_ListMixin_ImmutableListMixin6;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "TextTrackCueList"
},

TextTrackList: {"": "EventTarget_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "TextTrackList"
},

Touch: {"": "Interceptor;identifier=",
  get$page: function(receiver) {
    var t1 = new P.Point(receiver.pageX, receiver.pageY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "%": "Touch"
},

TouchEvent: {"": "UIEvent;changedTouches=,touches=", "%": "TouchEvent"},

TouchList: {"": "Interceptor_ListMixin_ImmutableListMixin7;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "TouchList"
},

TrackElement: {"": "HtmlElement;label=,src%", "%": "HTMLTrackElement"},

UIEvent: {"": "Event;",
  get$page: function(receiver) {
    var t1 = new P.Point(receiver.pageX, receiver.pageY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "%": "CompositionEvent|FocusEvent|KeyboardEvent|SVGZoomEvent|TextEvent;UIEvent"
},

VideoElement: {"": "MediaElement;height=,width=", "%": "HTMLVideoElement"},

Window: {"": "EventTarget;name=",
  get$location: function(receiver) {
    var result = receiver.location;
    if (W.Window__isDartLocation(result) === true)
      return result;
    if (null == receiver._location_wrapper)
      receiver._location_wrapper = new W._LocationWrapper(result);
    return receiver._location_wrapper;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isEventTarget: true,
  "%": "DOMWindow|Window"
},

_Attr: {"": "Node;name=,value=", "%": "Attr"},

_CSSValue: {"": "Interceptor;", "%": "CSSPrimitiveValue;CSSValue;_CSSValue_ListMixin|_CSSValue_ListMixin_ImmutableListMixin"},

_ClientRect: {"": "Interceptor;height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = receiver.left;
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = receiver.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(receiver) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(receiver.left);
    t2 = J.get$hashCode$(receiver.top);
    t3 = J.get$hashCode$(receiver.width);
    t4 = J.get$hashCode$(receiver.height);
    return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
  },
  get$topLeft: function(receiver) {
    var t1 = new P.Point(receiver.left, receiver.top);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  $isRectangle: true,
  $asRectangle: function() {
    return [null];
  },
  "%": "ClientRect|DOMRect"
},

_ClientRectList: {"": "Interceptor_ListMixin_ImmutableListMixin8;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "ClientRectList"
},

_CssRuleList: {"": "Interceptor_ListMixin_ImmutableListMixin9;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "CSSRuleList"
},

_CssValueList: {"": "_CSSValue_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "CSSValueList|WebKitCSSFilterValue|WebKitCSSMixFunctionValue|WebKitCSSTransformValue"
},

_GamepadList: {"": "Interceptor_ListMixin_ImmutableListMixin10;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "GamepadList"
},

_NamedNodeMap: {"": "Interceptor_ListMixin_ImmutableListMixin11;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "MozNamedAttrMap|NamedNodeMap"
},

_SpeechInputResultList: {"": "Interceptor_ListMixin_ImmutableListMixin12;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SpeechInputResultList"
},

_SpeechRecognitionResultList: {"": "Interceptor_ListMixin_ImmutableListMixin13;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SpeechRecognitionResultList"
},

_StyleSheetList: {"": "Interceptor_ListMixin_ImmutableListMixin14;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "StyleSheetList"
}}],
["dart.dom.svg", "dart:svg", , P, {
Interceptor_ListMixin15: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin15: {"": "Interceptor_ListMixin15+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin16: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin16: {"": "Interceptor_ListMixin16+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin17: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin17: {"": "Interceptor_ListMixin17+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin18: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin18: {"": "Interceptor_ListMixin18+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin19: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin19: {"": "Interceptor_ListMixin19+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin20: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin20: {"": "Interceptor_ListMixin20+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

ElementInstance: {"": "EventTarget;", "%": "SVGElementInstance"},

FEBlendElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEBlendElement"},

FEColorMatrixElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEColorMatrixElement"},

FEComponentTransferElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEComponentTransferElement"},

FECompositeElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFECompositeElement"},

FEConvolveMatrixElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEConvolveMatrixElement"},

FEDiffuseLightingElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEDiffuseLightingElement"},

FEDisplacementMapElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEDisplacementMapElement"},

FEFloodElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEFloodElement"},

FEGaussianBlurElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEGaussianBlurElement"},

FEImageElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEImageElement"},

FEMergeElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEMergeElement"},

FEMorphologyElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEMorphologyElement"},

FEOffsetElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEOffsetElement"},

FEPointLightElement: {"": "SvgElement;x=,y=", "%": "SVGFEPointLightElement"},

FESpecularLightingElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFESpecularLightingElement"},

FESpotLightElement: {"": "SvgElement;x=,y=", "%": "SVGFESpotLightElement"},

FETileElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFETileElement"},

FETurbulenceElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFETurbulenceElement"},

FilterElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFilterElement"},

ForeignObjectElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGForeignObjectElement"},

GraphicsElement: {"": "SvgElement;", "%": "SVGAElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGGElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGSwitchElement;SVGGraphicsElement"},

ImageElement0: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGImageElement"},

Length: {"": "Interceptor;value=", "%": "SVGLength"},

LengthList: {"": "Interceptor_ListMixin_ImmutableListMixin15;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGLengthList"
},

MaskElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGMaskElement"},

Number: {"": "Interceptor;value=", "%": "SVGNumber"},

NumberList: {"": "Interceptor_ListMixin_ImmutableListMixin16;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGNumberList"
},

PathSeg: {"": "Interceptor;", "%": "SVGPathSegClosePath;SVGPathSeg"},

PathSegArcAbs: {"": "PathSeg;x%,y%", "%": "SVGPathSegArcAbs"},

PathSegArcRel: {"": "PathSeg;x%,y%", "%": "SVGPathSegArcRel"},

PathSegCurvetoCubicAbs: {"": "PathSeg;x%,y%", "%": "SVGPathSegCurvetoCubicAbs"},

PathSegCurvetoCubicRel: {"": "PathSeg;x%,y%", "%": "SVGPathSegCurvetoCubicRel"},

PathSegCurvetoCubicSmoothAbs: {"": "PathSeg;x%,y%", "%": "SVGPathSegCurvetoCubicSmoothAbs"},

PathSegCurvetoCubicSmoothRel: {"": "PathSeg;x%,y%", "%": "SVGPathSegCurvetoCubicSmoothRel"},

PathSegCurvetoQuadraticAbs: {"": "PathSeg;x%,y%", "%": "SVGPathSegCurvetoQuadraticAbs"},

PathSegCurvetoQuadraticRel: {"": "PathSeg;x%,y%", "%": "SVGPathSegCurvetoQuadraticRel"},

PathSegCurvetoQuadraticSmoothAbs: {"": "PathSeg;x%,y%", "%": "SVGPathSegCurvetoQuadraticSmoothAbs"},

PathSegCurvetoQuadraticSmoothRel: {"": "PathSeg;x%,y%", "%": "SVGPathSegCurvetoQuadraticSmoothRel"},

PathSegLinetoAbs: {"": "PathSeg;x%,y%", "%": "SVGPathSegLinetoAbs"},

PathSegLinetoHorizontalAbs: {"": "PathSeg;x%", "%": "SVGPathSegLinetoHorizontalAbs"},

PathSegLinetoHorizontalRel: {"": "PathSeg;x%", "%": "SVGPathSegLinetoHorizontalRel"},

PathSegLinetoRel: {"": "PathSeg;x%,y%", "%": "SVGPathSegLinetoRel"},

PathSegLinetoVerticalAbs: {"": "PathSeg;y%", "%": "SVGPathSegLinetoVerticalAbs"},

PathSegLinetoVerticalRel: {"": "PathSeg;y%", "%": "SVGPathSegLinetoVerticalRel"},

PathSegList: {"": "Interceptor_ListMixin_ImmutableListMixin17;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGPathSegList"
},

PathSegMovetoAbs: {"": "PathSeg;x%,y%", "%": "SVGPathSegMovetoAbs"},

PathSegMovetoRel: {"": "PathSeg;x%,y%", "%": "SVGPathSegMovetoRel"},

PatternElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGPatternElement"},

RectElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGRectElement"},

StringList: {"": "Interceptor_ListMixin_ImmutableListMixin18;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGStringList"
},

SvgElement: {"": "Element;", "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGRadialGradientElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"},

SvgSvgElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGSVGElement"},

TextContentElement: {"": "GraphicsElement;", "%": "SVGTextPathElement;SVGTextContentElement"},

TextPositioningElement: {"": "TextContentElement;x=,y=", "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"},

Transform: {"": "Interceptor;", "%": "SVGTransform"},

TransformList: {"": "Interceptor_ListMixin_ImmutableListMixin19;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGTransformList"
},

UseElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGUseElement"},

_ElementInstanceList: {"": "Interceptor_ListMixin_ImmutableListMixin20;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    return receiver.item(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGElementInstanceList"
}}],
["dart.dom.web_sql", "dart:web_sql", , P, {
Interceptor_ListMixin21: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin21: {"": "Interceptor_ListMixin21+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

SqlResultSetRowList: {"": "Interceptor_ListMixin_ImmutableListMixin21;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    return P.convertNativeToDart_Dictionary(receiver.item(index));
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [null];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SQLResultSetRowList"
}}],
["dart.isolate", "dart:isolate", , P, {
ReceivePort: {"": "Object;"}}],
["dart.math", "dart:math", , P, {
_JenkinsSmiHash_combine0: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish0: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

min: function(a, b) {
  if (a > b)
    return b;
  if (a < b)
    return a;
  if (typeof b === "number") {
    if (typeof a === "number")
      ;
    if (a === 0 && C.JSDouble_methods.get$isNegative(b) || isNaN(b))
      return b;
    return a;
  }
  return a;
},

max: function(a, b) {
  if (a > b)
    return a;
  if (a < b)
    return b;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return a + b;
    if (isNaN(b))
      return b;
    return a;
  }
  if (b === 0 && C.JSNumber_methods.get$isNegative(a))
    return b;
  return a;
},

_Random: {"": "Object;",
  nextInt$1: function(max) {
    var t1 = J.getInterceptor$n(max);
    if (t1.$lt(max, 0))
      throw H.wrapException(new P.ArgumentError("negative max: " + H.S(max)));
    if (t1.$gt(max, 4294967295))
      max = 4294967295;
    return Math.random() * max >>> 0;
  }
},

Point: {"": "Object;x>,y>",
  toString$0: function(_) {
    return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isPoint)
      return false;
    t1 = this.x;
    t2 = other.x;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this.y;
      t2 = other.y;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = J.get$hashCode$(this.x);
    t2 = J.get$hashCode$(this.y);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
  },
  $add: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = new P.Point(t1 + t3, t4 + t2);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Point", 0)]);
    return t2;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$sub();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$sub();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = new P.Point(t1 - t3, t4 - t2);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Point", 0)]);
    return t2;
  },
  $mul: function(_, factor) {
    var t1, t2;
    t1 = this.x;
    if (typeof t1 !== "number")
      throw t1.$mul();
    if (typeof factor !== "number")
      throw H.iae(factor);
    t2 = this.y;
    if (typeof t2 !== "number")
      throw t2.$mul();
    t2 = new P.Point(t1 * factor, t2 * factor);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Point", 0)]);
    return t2;
  },
  $isPoint: true
},

_RectangleBase: {"": "Object;",
  toString$0: function(_) {
    return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.get$top(this)) + ") " + H.S(this.get$width(this)) + " x " + H.S(this.get$height(this));
  },
  $eq: function(_, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = this.get$left(this);
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = this.get$top(this);
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = this.get$width(this);
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = this.get$height(this);
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(this.get$left(this));
    t2 = J.get$hashCode$(this.get$top(this));
    t3 = J.get$hashCode$(this.get$width(this));
    t4 = J.get$hashCode$(this.get$height(this));
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2), t3), t4));
  },
  get$topLeft: function(_) {
    var t1, t2;
    t1 = this.get$left(this);
    t2 = this.get$top(this);
    t2 = new P.Point(t1, t2);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "_RectangleBase", 0)]);
    return t2;
  }
},

Rectangle: {"": "_RectangleBase;left>,top>,width>,height>", $isRectangle: true, $asRectangle: null, $as_RectangleBase: null}}],
["dart.typed_data", "dart:typed_data", , P, {
TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin0: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin0: {"": "TypedData_ListMixin0+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin1: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin1: {"": "TypedData_ListMixin1+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin2: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin2: {"": "TypedData_ListMixin2+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin3: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin3: {"": "TypedData_ListMixin3+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin4: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin4: {"": "TypedData_ListMixin4+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin5: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin5: {"": "TypedData_ListMixin5+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin6: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin6: {"": "TypedData_ListMixin6+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin7: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin7: {"": "TypedData_ListMixin7+FixedLengthListMixin;", $asList: null},

Int64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Int64List_BYTES_PER_ELEMENT",
}

},

Uint64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Uint64List_BYTES_PER_ELEMENT",
}

},

TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw H.wrapException(P.RangeError$range(index, 0, $length));
    else
      throw H.wrapException(new P.ArgumentError("Invalid list index " + H.S(index)));
  },
  "%": ";ArrayBufferView;TypedData_ListMixin|TypedData_ListMixin_FixedLengthListMixin|TypedData_ListMixin0|TypedData_ListMixin_FixedLengthListMixin0|TypedData_ListMixin1|TypedData_ListMixin_FixedLengthListMixin1|TypedData_ListMixin2|TypedData_ListMixin_FixedLengthListMixin2|TypedData_ListMixin3|TypedData_ListMixin_FixedLengthListMixin3|TypedData_ListMixin4|TypedData_ListMixin_FixedLengthListMixin4|TypedData_ListMixin5|TypedData_ListMixin_FixedLengthListMixin5|TypedData_ListMixin6|TypedData_ListMixin_FixedLengthListMixin6|TypedData_ListMixin7|TypedData_ListMixin_FixedLengthListMixin7|Int64List|Uint64List"
},

Float32List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Float32Array"
},

Float64List: {"": "TypedData_ListMixin_FixedLengthListMixin0;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Float64Array"
},

Int16List: {"": "TypedData_ListMixin_FixedLengthListMixin1;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int16Array"
},

Int32List: {"": "TypedData_ListMixin_FixedLengthListMixin2;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int32Array"
},

Int8List: {"": "TypedData_ListMixin_FixedLengthListMixin3;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int8Array"
},

Uint16List: {"": "TypedData_ListMixin_FixedLengthListMixin4;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Uint16Array"
},

Uint32List: {"": "TypedData_ListMixin_FixedLengthListMixin5;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Uint32Array"
},

Uint8ClampedList: {"": "TypedData_ListMixin_FixedLengthListMixin6;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "CanvasPixelArray|Uint8ClampedArray"
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin7;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": ";Uint8Array"
}}],
["html_common", "dart:html_common", , P, {
convertNativeToDart_Dictionary: function(object) {
  var dict, keys, t1, key;
  if (object == null)
    return;
  dict = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  keys = Object.getOwnPropertyNames(object);
  for (t1 = new H.ListIterator(keys, keys.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(keys, "JSArray", 0)]); t1.moveNext$0();) {
    key = t1._current;
    dict.$indexSet(dict, key, object[key]);
  }
  return dict;
},

Device_isOpera: function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
  return $.Device__isOpera;
},

Device_isWebKit: function() {
  if ($.Device__isWebKit == null)
    $.Device__isWebKit = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
  return $.Device__isWebKit;
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.main$closure = Q.main$closure = new Q.Closure$0(Q.main, "main$closure");
init.globalFunctions.IsolateNatives__processWorkerMessage$closure = H.IsolateNatives__processWorkerMessage$closure = new H.Closure$2(H.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new Q.Closure$0(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$7(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions.typeNameInChrome$closure = H.typeNameInChrome$closure = new H.Closure$1(H.typeNameInChrome, "typeNameInChrome$closure");
init.globalFunctions.typeNameInSafari$closure = H.typeNameInSafari$closure = new H.Closure$1(H.typeNameInSafari, "typeNameInSafari$closure");
init.globalFunctions.typeNameInOpera$closure = H.typeNameInOpera$closure = new H.Closure$1(H.typeNameInOpera, "typeNameInOpera$closure");
init.globalFunctions.typeNameInFirefox$closure = H.typeNameInFirefox$closure = new H.Closure$1(H.typeNameInFirefox, "typeNameInFirefox$closure");
init.globalFunctions.typeNameInIE$closure = H.typeNameInIE$closure = new H.Closure$1(H.typeNameInIE, "typeNameInIE$closure");
init.globalFunctions.constructorNameFallback$closure = H.constructorNameFallback$closure = new H.Closure$1(H.constructorNameFallback, "constructorNameFallback$closure");
init.globalFunctions.callDartFunctionWith1Arg$closure = H.callDartFunctionWith1Arg$closure = new H.Closure$2(H.callDartFunctionWith1Arg, "callDartFunctionWith1Arg$closure");
init.globalFunctions._asyncRunCallback$closure = P._asyncRunCallback$closure = new Q.Closure$0(P._asyncRunCallback, "_asyncRunCallback$closure");
init.globalFunctions._nullDataHandler$closure = P._nullDataHandler$closure = new H.Closure$1(P._nullDataHandler, "_nullDataHandler$closure");
init.globalFunctions._nullErrorHandler$closure = P._nullErrorHandler$closure = new P.Closure$21(P._nullErrorHandler, "_nullErrorHandler$closure");
init.globalFunctions._nullDoneHandler$closure = P._nullDoneHandler$closure = new Q.Closure$0(P._nullDoneHandler, "_nullDoneHandler$closure");
init.globalFunctions._defaultEquals$closure = P._defaultEquals$closure = new H.Closure$2(P._defaultEquals, "_defaultEquals$closure");
init.globalFunctions._defaultHashCode$closure = P._defaultHashCode$closure = new H.Closure$1(P._defaultHashCode, "_defaultHashCode$closure");
init.globalFunctions.Comparable_compare$closure = P.Comparable_compare$closure = new H.Closure$2(P.Comparable_compare, "Comparable_compare$closure");
init.globalFunctions.identical$closure = P.identical$closure = new H.Closure$2(P.identical, "identical$closure");
init.globalFunctions.identityHashCode$closure = P.identityHashCode$closure = new H.Closure$1(P.identityHashCode, "identityHashCode$closure");
// Runtime type support
J.JSInt.$isint = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
W.Touch.$isObject = true;
W._CSSValue.$isObject = true;
W.StyleSheet.$isObject = true;
W.SpeechRecognitionResult.$isObject = true;
W.SpeechInputResult.$isObject = true;
W.Node.$isObject = true;
W.Gamepad.$isObject = true;
W.CssRule.$isObject = true;
P.Rectangle.$isObject = true;
W.TextTrack.$isObject = true;
W.TextTrackCue.$isObject = true;
W.SpeechGrammar.$isObject = true;
W.SourceBuffer.$isObject = true;
W.Plugin.$isObject = true;
W.MimeType.$isObject = true;
W.File.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
P.ElementInstance.$isObject = true;
P.Transform.$isObject = true;
P.PathSeg.$isObject = true;
P.Number.$isObject = true;
P.Length.$isObject = true;
P.Map.$isObject = true;
J.JSDouble.$isdouble = true;
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isObject = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
Q.TouchLayer.$isObject = true;
Q.TouchBinding.$isObject = true;
Q.CodeWorkspace.$isObject = true;
Q.Turtle.$isObject = true;
Q.Gem.$isObject = true;
Q.Fly.$isObject = true;
Q.Frog.$isObject = true;
Q.LilyPad.$isObject = true;
Q.Touchable.$isObject = true;
W.MouseEvent.$isObject = true;
W.TouchEvent.$isObject = true;
W.Event.$isObject = true;
Q.Block.$isObject = true;
Q.Button.$isObject = true;
Q.Beetle.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.ReceivePort.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
J.JSArray.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P.Object.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
P.Timer.$isTimer = true;
P.Timer.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.C_UnknownJavaScriptObject = new J.UnknownJavaScriptObject();
C.C__DelayedDone = new P._DelayedDone();
C.C__Random = new P._Random();
C.C__RootZone = new P._RootZone();
C.Duration_0 = new P.Duration(0);
C.Duration_10000000 = new P.Duration(10000000);
C.Duration_2000000 = new P.Duration(2000000);
C.Duration_3000000 = new P.Duration(3000000);
C.Duration_40000 = new P.Duration(40000);
C.Duration_4000000 = new P.Duration(4000000);
C.EventStreamProvider_load = H.setRuntimeTypeInfo(new W.EventStreamProvider("load"), [W.Event]);
C.EventStreamProvider_mousedown = H.setRuntimeTypeInfo(new W.EventStreamProvider("mousedown"), [W.MouseEvent]);
C.EventStreamProvider_mousemove = H.setRuntimeTypeInfo(new W.EventStreamProvider("mousemove"), [W.MouseEvent]);
C.EventStreamProvider_mouseup = H.setRuntimeTypeInfo(new W.EventStreamProvider("mouseup"), [W.MouseEvent]);
C.EventStreamProvider_touchend = H.setRuntimeTypeInfo(new W.EventStreamProvider("touchend"), [W.TouchEvent]);
C.EventStreamProvider_touchmove = H.setRuntimeTypeInfo(new W.EventStreamProvider("touchmove"), [W.TouchEvent]);
C.EventStreamProvider_touchstart = H.setRuntimeTypeInfo(new W.EventStreamProvider("touchstart"), [W.TouchEvent]);
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_empty = Isolate.makeConstantList([]);
C.Symbol_call = new H.Symbol0("call");
C.Type_Ejg = H.createRuntimeType('String');
C.Type_EsU = H.createRuntimeType('bool');
C.Type_SDA = H.createRuntimeType('Frog');
C.Type_SnA = H.createRuntimeType('int');
C.Type_XXD = H.createRuntimeType('JSObject');
C.Type_YyT = H.createRuntimeType('Beetle');
C.Type_eZO = H.createRuntimeType('Null');
C.Type_oqh = H.createRuntimeType('Uint64List');
C.Type_pas = H.createRuntimeType('Turtle');
C.Type_qq1 = H.createRuntimeType('double');
C.Type_qxd = H.createRuntimeType('Int64List');
C.Window_methods = W.Window.prototype;
$.Block_BLOCK_ID = 0;
$.SHOW_FASTFORWARD = false;
$.SHOW_TURN_BLOCK = false;
$.SHOW_DIE_BLOCK = false;
$.SHOW_WAIT_BLOCK = false;
$.SHOW_PREVIEW = false;
$.SHOW_WAIT_TIMEOUT = false;
$.SHOW_STATUS = false;
$.AUTO_REPEAT = false;
$.FROG_SIZE_VARIATION = false;
$.DRAG_LILYPADS = false;
$.FROGS_PUSH = false;
$.FROGS_BLOCK = true;
$.MAX_FLIES = 0;
$.MAX_FROGS = 5;
$.MAX_BEETLES = 6;
$.MAX_GEMS = 0;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.initNativeDispatchFlag = null;
$.printToZone = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Device__isOpera = null;
$.Device__isWebKit = null;
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mod$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$mod(receiver, a0);
};
J.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$n(receiver).$mul(receiver, a0);
};
J.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return J.getInterceptor$n(receiver).$negate(receiver);
};
J.$shl$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shl(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.$tdiv$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
J.clone$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).clone$0(receiver);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.drawImageScaled$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).drawImageScaled$5(receiver, a0, a1, a2, a3, a4);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$changedTouches$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$changedTouches(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$height$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$height(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$label$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$label(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$search$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$search(receiver);
};
J.get$src$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$src(receiver);
};
J.get$topLeft$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$topLeft(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$width$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$width(receiver);
};
J.get$y$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$y(receiver);
};
J.getBoundingClientRect$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
};
J.getContext$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
J.indexOf$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
};
J.left$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).left$1(receiver, a0);
};
J.matchAsPrefix$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
};
J.play$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).play$0(receiver);
};
J.preventDefault$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preventDefault$0(receiver);
};
J.reload$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).reload$0(receiver);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.restore$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).restore$0(receiver);
};
J.save$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).save$0(receiver);
};
J.set$candidate$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$candidate(receiver, value);
};
J.set$size$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$size(receiver, value);
};
J.set$src$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$src(receiver, value);
};
J.set$volume$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$volume(receiver, value);
};
J.step$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).step$1(receiver, a0);
};
J.toDouble$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toDouble$0(receiver);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.transform$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).transform$6(receiver, a0, a1, a2, a3, a4, a5);
};
Isolate.$lazy($, "colors", "Beetle_colors", "get$Beetle_colors", function() {
  return ["red", "green", "blue", "yellow"];
});
Isolate.$lazy($, "colors", "Gem_colors", "get$Gem_colors", function() {
  return ["red", "orange", "blue", "green"];
});
Isolate.$lazy($, "sounds", "Sounds_sounds", "get$Sounds_sounds", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
});
Isolate.$lazy($, "rand", "Turtle_rand", "get$Turtle_rand", function() {
  return C.C__Random;
});
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  var t1 = new P.Expando(null);
  H.setRuntimeTypeInfo(t1, [J.JSInt]);
  return t1;
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "getTypeNameOf", "getTypeNameOf", "get$getTypeNameOf", function() {
  return H.getFunctionForTypeNameOf();
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  var t1 = new P.Expando("asynchronous error");
  H.setRuntimeTypeInfo(t1, [null]);
  return t1;
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return P.ListQueue$(null, {func: "void_", void: true});
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return P.List_List(null, null);
});
// Native classes
J.Interceptor["%"] = "CanvasGradient|CanvasPattern|MediaError|MediaKeyError|Navigator|PositionError|RTCIceCandidate|SQLError|SVGAnimatedInteger|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|SVGAnimatedTransformList|SpeechRecognitionAlternative|mozRTCIceCandidate";


init.functionAliases = {};
;
init.metadata = [,
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(Q.main$closure); });
  } else {
    H.startRootIsolate(Q.main$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, accessors, cls) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = {};
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()

//# sourceMappingURL=main.dart.js.map
//@ sourceMappingURL=main.dart.js.map
